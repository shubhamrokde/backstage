{"version":3,"file":"index.cjs.js","sources":["../src/paths.ts","../src/isChildPath.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport { dirname, resolve as resolvePath } from 'path';\n\n/**\n * A function that takes a set of path fragments and resolves them into a\n * single complete path, relative to some root.\n *\n * @public\n */\nexport type ResolveFunc = (...paths: string[]) => string;\n\n/**\n * Common paths and resolve functions used by the cli.\n * Currently assumes it is being executed within a monorepo.\n *\n * @public\n */\nexport type Paths = {\n  // Root dir of the cli itself, containing package.json\n  ownDir: string;\n\n  // Monorepo root dir of the cli itself. Only accessible when running inside Backstage repo.\n  ownRoot: string;\n\n  // The location of the app that the cli is being executed in\n  targetDir: string;\n\n  // The monorepo root package of the app that the cli is being executed in.\n  targetRoot: string;\n\n  // Resolve a path relative to own repo\n  resolveOwn: ResolveFunc;\n\n  // Resolve a path relative to own monorepo root. Only accessible when running inside Backstage repo.\n  resolveOwnRoot: ResolveFunc;\n\n  // Resolve a path relative to the app\n  resolveTarget: ResolveFunc;\n\n  // Resolve a path relative to the app repo root\n  resolveTargetRoot: ResolveFunc;\n};\n\n// Looks for a package.json with a workspace config to identify the root of the monorepo\nexport function findRootPath(\n  searchDir: string,\n  filterFunc: (pkgJsonPath: string) => boolean,\n): string | undefined {\n  let path = searchDir;\n\n  // Some sanity check to avoid infinite loop\n  for (let i = 0; i < 1000; i++) {\n    const packagePath = resolvePath(path, 'package.json');\n    const exists = fs.existsSync(packagePath);\n    if (exists && filterFunc(packagePath)) {\n      return path;\n    }\n\n    const newPath = dirname(path);\n    if (newPath === path) {\n      return undefined;\n    }\n    path = newPath;\n  }\n\n  throw new Error(\n    `Iteration limit reached when searching for root package.json at ${searchDir}`,\n  );\n}\n\n// Finds the root of a given package\nexport function findOwnDir(searchDir: string) {\n  const path = findRootPath(searchDir, () => true);\n  if (!path) {\n    throw new Error(\n      `No package.json found while searching for package root of ${searchDir}`,\n    );\n  }\n  return path;\n}\n\n// Finds the root of the monorepo that the package exists in. Only accessible when running inside Backstage repo.\nexport function findOwnRootDir(ownDir: string) {\n  const isLocal = fs.existsSync(resolvePath(ownDir, 'src'));\n  if (!isLocal) {\n    throw new Error(\n      'Tried to access monorepo package root dir outside of Backstage repository',\n    );\n  }\n\n  return resolvePath(ownDir, '../..');\n}\n\n/**\n * Find paths related to a package and its execution context.\n *\n * @public\n * @example\n *\n * const paths = findPaths(__dirname)\n */\nexport function findPaths(searchDir: string): Paths {\n  const ownDir = findOwnDir(searchDir);\n  // Drive letter can end up being lowercased here on Windows, bring back to uppercase for consistency\n  const targetDir = fs\n    .realpathSync(process.cwd())\n    .replace(/^[a-z]:/, str => str.toLocaleUpperCase('en-US'));\n\n  // Lazy load this as it will throw an error if we're not inside the Backstage repo.\n  let ownRoot = '';\n  const getOwnRoot = () => {\n    if (!ownRoot) {\n      ownRoot = findOwnRootDir(ownDir);\n    }\n    return ownRoot;\n  };\n\n  // We're not always running in a monorepo, so we lazy init this to only crash commands\n  // that require a monorepo when we're not in one.\n  let targetRoot = '';\n  const getTargetRoot = () => {\n    if (!targetRoot) {\n      targetRoot =\n        findRootPath(targetDir, path => {\n          try {\n            const content = fs.readFileSync(path, 'utf8');\n            const data = JSON.parse(content);\n            return Boolean(data.workspaces?.packages);\n          } catch (error) {\n            throw new Error(\n              `Failed to parse package.json file while searching for root, ${error}`,\n            );\n          }\n        }) ?? targetDir; // We didn't find any root package.json, assume we're not in a monorepo\n    }\n    return targetRoot;\n  };\n\n  return {\n    ownDir,\n    get ownRoot() {\n      return getOwnRoot();\n    },\n    targetDir,\n    get targetRoot() {\n      return getTargetRoot();\n    },\n    resolveOwn: (...paths) => resolvePath(ownDir, ...paths),\n    resolveOwnRoot: (...paths) => resolvePath(getOwnRoot(), ...paths),\n    resolveTarget: (...paths) => resolvePath(targetDir, ...paths),\n    resolveTargetRoot: (...paths) => resolvePath(getTargetRoot(), ...paths),\n  };\n}\n\n/**\n * The name of the backstage's config file\n *\n * @public\n */\nexport const BACKSTAGE_JSON = 'backstage.json';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { relative, isAbsolute } from 'path';\n\n/**\n * Checks if path is the same as or a child path of base.\n *\n * @public\n */\nexport function isChildPath(base: string, path: string): boolean {\n  const relativePath = relative(base, path);\n  if (relativePath === '') {\n    // The same directory\n    return true;\n  }\n\n  const outsideBase = relativePath.startsWith('..'); // not outside base\n  const differentDrive = isAbsolute(relativePath); // on Windows, this means dir is on a different drive from base.\n\n  return !outsideBase && !differentDrive;\n}\n"],"names":["path","resolvePath","fs","dirname","relative","isAbsolute"],"mappings":";;;;;;;;;;;sBA6DE,WACA,YACoB;AACpB,MAAIA,SAAO;AAGX,WAAS,IAAI,GAAG,IAAI,KAAM,KAAK;AAC7B,UAAM,cAAcC,aAAYD,QAAM;AACtC,UAAM,SAASE,uBAAG,WAAW;AAC7B,QAAI,UAAU,WAAW,cAAc;AACrC,aAAOF;AAAA;AAGT,UAAM,UAAUG,aAAQH;AACxB,QAAI,YAAYA,QAAM;AACpB,aAAO;AAAA;AAET,aAAO;AAAA;AAGT,QAAM,IAAI,MACR,mEAAmE;AAAA;oBAK5C,WAAmB;AAC5C,QAAM,OAAO,aAAa,WAAW,MAAM;AAC3C,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MACR,6DAA6D;AAAA;AAGjE,SAAO;AAAA;wBAIsB,QAAgB;AAC7C,QAAM,UAAUE,uBAAG,WAAWD,aAAY,QAAQ;AAClD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MACR;AAAA;AAIJ,SAAOA,aAAY,QAAQ;AAAA;mBAWH,WAA0B;AAClD,QAAM,SAAS,WAAW;AAE1B,QAAM,YAAYC,uBACf,aAAa,QAAQ,OACrB,QAAQ,WAAW,SAAO,IAAI,kBAAkB;AAGnD,MAAI,UAAU;AACd,QAAM,aAAa,MAAM;AACvB,QAAI,CAAC,SAAS;AACZ,gBAAU,eAAe;AAAA;AAE3B,WAAO;AAAA;AAKT,MAAI,aAAa;AACjB,QAAM,gBAAgB,MAAM;AAxI9B;AAyII,QAAI,CAAC,YAAY;AACf,mBACE,mBAAa,WAAW,UAAQ;AA3IxC;AA4IU,YAAI;AACF,gBAAM,UAAUA,uBAAG,aAAa,MAAM;AACtC,gBAAM,OAAO,KAAK,MAAM;AACxB,iBAAO,QAAQ,YAAK,eAAL,oBAAiB;AAAA,iBACzB,OAAP;AACA,gBAAM,IAAI,MACR,+DAA+D;AAAA;AAAA,aAPrE,YAUM;AAAA;AAEV,WAAO;AAAA;AAGT,SAAO;AAAA,IACL;AAAA,QACI,UAAU;AACZ,aAAO;AAAA;AAAA,IAET;AAAA,QACI,aAAa;AACf,aAAO;AAAA;AAAA,IAET,YAAY,IAAI,UAAUD,aAAY,QAAQ,GAAG;AAAA,IACjD,gBAAgB,IAAI,UAAUA,aAAY,cAAc,GAAG;AAAA,IAC3D,eAAe,IAAI,UAAUA,aAAY,WAAW,GAAG;AAAA,IACvD,mBAAmB,IAAI,UAAUA,aAAY,iBAAiB,GAAG;AAAA;AAAA;MASxD,iBAAiB;;qBCxJF,MAAcD,QAAuB;AAC/D,QAAM,eAAeI,cAAS,MAAMJ;AACpC,MAAI,iBAAiB,IAAI;AAEvB,WAAO;AAAA;AAGT,QAAM,cAAc,aAAa,WAAW;AAC5C,QAAM,iBAAiBK,gBAAW;AAElC,SAAO,CAAC,eAAe,CAAC;AAAA;;;;;;"}