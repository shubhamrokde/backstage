{"version":3,"file":"index.esm.js","sources":["../src/lib/globalObject.ts","../src/lib/VersionedValue.ts","../src/lib/VersionedContext.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nfunction getGlobalObject() {\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  }\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n  // eslint-disable-next-line no-new-func\n  return Function('return this')();\n}\n\nconst globalObject = getGlobalObject();\n\nconst makeKey = (id: string) => `__@backstage/${id}__`;\n\n/**\n * Serializes access to a global singleton value, with the first caller creating the value.\n *\n * @public\n */\nexport function getOrCreateGlobalSingleton<T>(\n  id: string,\n  supplier: () => T,\n): T {\n  const key = makeKey(id);\n\n  let value = globalObject[key];\n  if (value) {\n    return value;\n  }\n\n  value = supplier();\n  globalObject[key] = value;\n  return value;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The versioned value interface is a container for a set of values that\n * can be looked up by version. It is intended to be used as a container\n * for values that can be versioned independently of package versions.\n *\n * @public\n */\nexport type VersionedValue<Versions extends { [version: number]: unknown }> = {\n  atVersion<Version extends keyof Versions>(\n    version: Version,\n  ): Versions[Version] | undefined;\n};\n\n/**\n * Creates a container for a map of versioned values that implements VersionedValue.\n *\n * @public\n */\nexport function createVersionedValueMap<\n  Versions extends { [version: number]: unknown },\n>(versions: Versions): VersionedValue<Versions> {\n  Object.freeze(versions);\n  return {\n    atVersion(version) {\n      return versions[version];\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useContext, Context } from 'react';\nimport { getOrCreateGlobalSingleton } from './globalObject';\nimport { createVersionedValueMap, VersionedValue } from './VersionedValue';\n\n/**\n * Get the existing or create a new versioned React context that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const MyContext = createVersionedContext<{ 1: string }>('my-context');\n *\n * const MyContextProvider = ({children}) => (\n *   <MyContext.Provider value={createVersionedValueMap({ 1: 'value-for-version-1' })}>\n *     {children}\n *   <MyContext.Provider>\n * )\n * ```\n */\nexport function createVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): Context<VersionedValue<Versions> | undefined> {\n  return getOrCreateGlobalSingleton(key, () =>\n    createContext<VersionedValue<Versions> | undefined>(undefined),\n  );\n}\n\n/**\n * A hook that simplifies the consumption of a versioned contexts that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const versionedHolder = useVersionedContext<{ 1: string }>('my-context');\n *\n * if (!versionedHolder) {\n *   throw new Error('My context is not available!')\n * }\n *\n * const myValue = versionedHolder.atVersion(1);\n *\n * // ...\n * ```\n */\nexport function useVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): VersionedValue<Versions> | undefined {\n  return useContext(createVersionedContext<Versions>(key));\n}\n\n/**\n * Creates a helper for writing tests towards multiple different\n * combinations of versions provided from a context.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const context = createVersionedContextForTesting('my-context');\n *\n * afterEach(() => {\n *   context.reset();\n * });\n *\n * it('should work when provided with version 1', () => {\n *   context.set({1: 'value-for-version-1'})\n *\n *   // ...\n * })\n * ```\n */\nexport function createVersionedContextForTesting(key: string) {\n  return {\n    set(versions: { [version in number]: unknown }) {\n      (globalThis as any)[`__@backstage/${key}__`] = createContext(\n        createVersionedValueMap(versions),\n      );\n    },\n    reset() {\n      delete (globalThis as any)[`__@backstage/${key}__`];\n    },\n  };\n}\n"],"names":[],"mappings":";;AAiBA,SAA2B,eAAA,GAAA;AACzB,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,SAAS,IAAM,EAAA;AACzD,IAAO,OAAA,MAAA,CAAA;AAAA,GAAA;AAET,EAAA,IAAI,OAAO,IAAA,KAAS,WAAe,IAAA,IAAA,CAAK,SAAS,IAAM,EAAA;AACrD,IAAO,OAAA,IAAA,CAAA;AAAA,GAAA;AAGT,EAAA,OAAO,QAAS,CAAA,aAAA,CAAA,EAAA,CAAA;AAAA,CAAA;AAGlB,MAAM,YAAe,GAAA,eAAA,EAAA,CAAA;AAErB,MAAM,OAAA,GAAU,CAAC,EAAA,KAAe,CAAgB,aAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAOzC,SAAA,0BAAA,CACL,IACA,QACG,EAAA;AACH,EAAA,MAAM,MAAM,OAAQ,CAAA,EAAA,CAAA,CAAA;AAEpB,EAAA,IAAI,QAAQ,YAAa,CAAA,GAAA,CAAA,CAAA;AACzB,EAAA,IAAI,KAAO,EAAA;AACT,IAAO,OAAA,KAAA,CAAA;AAAA,GAAA;AAGT,EAAQ,KAAA,GAAA,QAAA,EAAA,CAAA;AACR,EAAA,YAAA,CAAa,GAAO,CAAA,GAAA,KAAA,CAAA;AACpB,EAAO,OAAA,KAAA,CAAA;AAAA;;AChBF,SAAA,uBAAA,CAEL,QAA8C,EAAA;AAC9C,EAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAA,CAAA;AACd,EAAO,OAAA;AAAA,IACL,UAAU,OAAS,EAAA;AACjB,MAAA,OAAO,QAAS,CAAA,OAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA,CAAA;AAAA;;ACFf,SAAA,sBAAA,CAEL,GAA4D,EAAA;AAC5D,EAAO,OAAA,0BAAA,CAA2B,GAAK,EAAA,MACrC,aAAoD,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAwBjD,SAAA,mBAAA,CAEL,GAAmD,EAAA;AACnD,EAAA,OAAO,WAAW,sBAAiC,CAAA,GAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAyB9C,SAAA,gCAAA,CAA0C,GAAa,EAAA;AAC5D,EAAO,OAAA;AAAA,IACL,IAAI,QAA4C,EAAA;AAC9C,MAAC,UAAmB,CAAA,CAAA,aAAA,EAAgB,GAAW,CAAA,EAAA,CAAA,CAAA,GAAA,aAAA,CAC7C,uBAAwB,CAAA,QAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAG5B,KAAQ,GAAA;AACN,MAAA,OAAQ,WAAmB,CAAgB,aAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA,CAAA;AAAA;;;;"}