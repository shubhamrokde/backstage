{"version":3,"file":"index.cjs.js","sources":["../src/scaffolder/actions/createTemplateAction.ts","../src/scaffolder/actions/builtin/catalog/register.ts","../src/scaffolder/actions/builtin/catalog/write.ts","../src/scaffolder/actions/builtin/debug/log.ts","../src/scaffolder/actions/builtin/fetch/helpers.ts","../src/scaffolder/actions/builtin/fetch/plain.ts","../src/lib/templating/SecureTemplater.ts","../src/scaffolder/actions/builtin/fetch/template.ts","../src/scaffolder/actions/builtin/filesystem/delete.ts","../src/scaffolder/actions/builtin/filesystem/rename.ts","../src/scaffolder/actions/builtin/helpers.ts","../src/scaffolder/actions/builtin/publish/util.ts","../src/scaffolder/actions/builtin/publish/azure.ts","../src/scaffolder/actions/builtin/publish/bitbucket.ts","../src/scaffolder/actions/builtin/publish/file.ts","../src/scaffolder/actions/builtin/github/helpers.ts","../src/scaffolder/actions/builtin/publish/github.ts","../src/scaffolder/actions/builtin/publish/githubPullRequest.ts","../src/scaffolder/actions/builtin/publish/gitlab.ts","../src/scaffolder/actions/builtin/publish/gitlabMergeRequest.ts","../src/scaffolder/actions/builtin/github/githubActionsDispatch.ts","../src/scaffolder/actions/builtin/github/githubWebhook.ts","../src/scaffolder/actions/builtin/github/githubIssuesLabel.ts","../src/scaffolder/actions/builtin/createBuiltinActions.ts","../src/scaffolder/actions/TemplateActionRegistry.ts","../src/scaffolder/tasks/DatabaseTaskStore.ts","../src/scaffolder/tasks/StorageTaskBroker.ts","../src/scaffolder/tasks/helper.ts","../src/scaffolder/tasks/NunjucksWorkflowRunner.ts","../src/scaffolder/tasks/TaskWorker.ts","../src/service/helpers.ts","../src/service/router.ts","../src/processor/ScaffolderEntitiesProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { TemplateAction } from './types';\n\n/**\n * This function is used to create new template actions to get type safety.\n * @public\n */\nexport const createTemplateAction = <TInput extends JsonObject>(\n  templateAction: TemplateAction<TInput>,\n): TemplateAction<TInput> => {\n  // TODO(blam): Can add some more validation here to validate the action later on\n  return templateAction;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { createTemplateAction } from '../../createTemplateAction';\n\n/**\n * Registers entities from a catalog descriptor file in the workspace into the software catalog.\n * @public\n */\nexport function createCatalogRegisterAction(options: {\n  catalogClient: CatalogApi;\n  integrations: ScmIntegrations;\n}) {\n  const { catalogClient, integrations } = options;\n\n  return createTemplateAction<\n    | { catalogInfoUrl: string; optional?: boolean }\n    | { repoContentsUrl: string; catalogInfoPath?: string; optional?: boolean }\n  >({\n    id: 'catalog:register',\n    description:\n      'Registers entities from a catalog descriptor file in the workspace into the software catalog.',\n    schema: {\n      input: {\n        oneOf: [\n          {\n            type: 'object',\n            required: ['catalogInfoUrl'],\n            properties: {\n              catalogInfoUrl: {\n                title: 'Catalog Info URL',\n                description:\n                  'An absolute URL pointing to the catalog info file location',\n                type: 'string',\n              },\n              optional: {\n                title: 'Optional',\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n                type: 'boolean',\n              },\n            },\n          },\n          {\n            type: 'object',\n            required: ['repoContentsUrl'],\n            properties: {\n              repoContentsUrl: {\n                title: 'Repository Contents URL',\n                description:\n                  'An absolute URL pointing to the root of a repository directory tree',\n                type: 'string',\n              },\n              catalogInfoPath: {\n                title: 'Fetch URL',\n                description:\n                  'A relative path from the repo root pointing to the catalog info file, defaults to /catalog-info.yaml',\n                type: 'string',\n              },\n              optional: {\n                title: 'Optional',\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n                type: 'boolean',\n              },\n            },\n          },\n        ],\n      },\n    },\n    async handler(ctx) {\n      const { input } = ctx;\n\n      let catalogInfoUrl;\n      if ('catalogInfoUrl' in input) {\n        catalogInfoUrl = input.catalogInfoUrl;\n      } else {\n        const { repoContentsUrl, catalogInfoPath = '/catalog-info.yaml' } =\n          input;\n        const integration = integrations.byUrl(repoContentsUrl);\n        if (!integration) {\n          throw new InputError(\n            `No integration found for host ${repoContentsUrl}`,\n          );\n        }\n\n        catalogInfoUrl = integration.resolveUrl({\n          base: repoContentsUrl,\n          url: catalogInfoPath,\n        });\n      }\n\n      ctx.logger.info(`Registering ${catalogInfoUrl} in the catalog`);\n\n      await catalogClient.addLocation(\n        {\n          type: 'url',\n          target: catalogInfoUrl,\n        },\n        ctx.secrets?.backstageToken\n          ? { token: ctx.secrets.backstageToken }\n          : {},\n      );\n\n      try {\n        const result = await catalogClient.addLocation(\n          {\n            dryRun: true,\n            type: 'url',\n            target: catalogInfoUrl,\n          },\n          ctx.secrets?.backstageToken\n            ? { token: ctx.secrets.backstageToken }\n            : {},\n        );\n\n        if (result.entities.length > 0) {\n          const { entities } = result;\n          let entity: any;\n          // prioritise 'Component' type as it is the most central kind of entity\n          entity = entities.find(\n            (e: any) =>\n              !e.metadata.name.startsWith('generated-') &&\n              e.kind === 'Component',\n          );\n          if (!entity) {\n            entity = entities.find(\n              (e: any) => !e.metadata.name.startsWith('generated-'),\n            );\n          }\n          if (!entity) {\n            entity = entities[0];\n          }\n\n          ctx.output('entityRef', stringifyEntityRef(entity));\n        }\n      } catch (e) {\n        if (!input.optional) {\n          throw e;\n        }\n      }\n\n      ctx.output('catalogInfoUrl', catalogInfoUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport * as yaml from 'yaml';\nimport { Entity } from '@backstage/catalog-model';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\n\n/**\n * Writes a catalog descriptor file containing the provided entity to a path in the workspace.\n * @public\n */\nexport function createCatalogWriteAction() {\n  return createTemplateAction<{ filePath?: string; entity: Entity }>({\n    id: 'catalog:write',\n    description: 'Writes the catalog-info.yaml for your template',\n    schema: {\n      input: {\n        type: 'object',\n        properties: {\n          filePath: {\n            title: 'Catalog file path',\n            description: 'Defaults to catalog-info.yaml',\n            type: 'string',\n          },\n          entity: {\n            title: 'Entity info to write catalog-info.yaml',\n            description:\n              'You can provide the same values used in the Entity schema.',\n            type: 'object',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      ctx.logStream.write(`Writing catalog-info.yaml`);\n      const { filePath, entity } = ctx.input;\n      const path = filePath ?? 'catalog-info.yaml';\n\n      await fs.writeFile(\n        resolveSafeChildPath(ctx.workspacePath, path),\n        yaml.stringify(entity),\n      );\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readdir, stat } from 'fs-extra';\nimport { relative, join } from 'path';\nimport { createTemplateAction } from '../../createTemplateAction';\n\n/**\n * Writes a message into the log or lists all files in the workspace\n *\n * @remarks\n *\n * This task is useful for local development and testing of both the scaffolder\n * and scaffolder templates.\n *\n * @public\n */\nexport function createDebugLogAction() {\n  return createTemplateAction<{ message?: string; listWorkspace?: boolean }>({\n    id: 'debug:log',\n    description:\n      'Writes a message into the log or lists all files in the workspace.',\n    schema: {\n      input: {\n        type: 'object',\n        properties: {\n          message: {\n            title: 'Message to output.',\n            type: 'string',\n          },\n          listWorkspace: {\n            title: 'List all files in the workspace, if true.',\n            type: 'boolean',\n          },\n          extra: {\n            title: 'Extra info',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info(JSON.stringify(ctx.input, null, 2));\n\n      if (ctx.input?.message) {\n        ctx.logStream.write(ctx.input.message);\n      }\n\n      if (ctx.input?.listWorkspace) {\n        const files = await recursiveReadDir(ctx.workspacePath);\n        ctx.logStream.write(\n          `Workspace:\\n${files\n            .map(f => `  - ${relative(ctx.workspacePath, f)}`)\n            .join('\\n')}`,\n        );\n      }\n    },\n  });\n}\n\nexport async function recursiveReadDir(dir: string): Promise<string[]> {\n  const subdirs = await readdir(dir);\n  const files = await Promise.all(\n    subdirs.map(async subdir => {\n      const res = join(dir, subdir);\n      return (await stat(res)).isDirectory() ? recursiveReadDir(res) : [res];\n    }),\n  );\n  return files.reduce((a, f) => a.concat(f), []);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath, UrlReader } from '@backstage/backend-common';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport fs from 'fs-extra';\nimport path from 'path';\n\n/**\n * A helper function that reads the contents of a directory from the given URL.\n * Can be used in your own actions, and also used behind fetch:template and fetch:plain\n *\n * @public\n */\nexport async function fetchContents({\n  reader,\n  integrations,\n  baseUrl,\n  fetchUrl = '.',\n  outputPath,\n}: {\n  reader: UrlReader;\n  integrations: ScmIntegrations;\n  baseUrl?: string;\n  fetchUrl?: string;\n  outputPath: string;\n}) {\n  let fetchUrlIsAbsolute = false;\n  try {\n    // eslint-disable-next-line no-new\n    new URL(fetchUrl);\n    fetchUrlIsAbsolute = true;\n  } catch {\n    /* ignored */\n  }\n\n  // We handle both file locations and url ones\n  if (!fetchUrlIsAbsolute && baseUrl?.startsWith('file://')) {\n    const basePath = baseUrl.slice('file://'.length);\n    const srcDir = resolveSafeChildPath(path.dirname(basePath), fetchUrl);\n    await fs.copy(srcDir, outputPath);\n  } else {\n    let readUrl;\n\n    if (fetchUrlIsAbsolute) {\n      readUrl = fetchUrl;\n    } else if (baseUrl) {\n      const integration = integrations.byUrl(baseUrl);\n      if (!integration) {\n        throw new InputError(`No integration found for location ${baseUrl}`);\n      }\n\n      readUrl = integration.resolveUrl({\n        url: fetchUrl,\n        base: baseUrl,\n      });\n    } else {\n      throw new InputError(\n        `Failed to fetch, template location could not be determined and the fetch URL is relative, ${fetchUrl}`,\n      );\n    }\n\n    const res = await reader.readTree(readUrl);\n    await fs.ensureDir(outputPath);\n    await res.dir({ targetDir: outputPath });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader, resolveSafeChildPath } from '@backstage/backend-common';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { fetchContents } from './helpers';\nimport { createTemplateAction } from '../../createTemplateAction';\n\n/**\n * Downloads content and places it in the workspace, or optionally\n * in a subdirectory specified by the 'targetPath' input option.\n * @public\n */\nexport function createFetchPlainAction(options: {\n  reader: UrlReader;\n  integrations: ScmIntegrations;\n}) {\n  const { reader, integrations } = options;\n\n  return createTemplateAction<{ url: string; targetPath?: string }>({\n    id: 'fetch:plain',\n    description:\n      \"Downloads content and places it in the workspace, or optionally in a subdirectory specified by the 'targetPath' input option.\",\n    schema: {\n      input: {\n        type: 'object',\n        required: ['url'],\n        properties: {\n          url: {\n            title: 'Fetch URL',\n            description:\n              'Relative path or absolute URL pointing to the directory tree to fetch',\n            type: 'string',\n          },\n          targetPath: {\n            title: 'Target Path',\n            description:\n              'Target path within the working directory to download the contents to.',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info('Fetching plain content from remote URL');\n\n      // Finally move the template result into the task workspace\n      const targetPath = ctx.input.targetPath ?? './';\n      const outputPath = resolveSafeChildPath(ctx.workspacePath, targetPath);\n\n      await fetchContents({\n        reader,\n        integrations,\n        baseUrl: ctx.templateInfo?.baseUrl,\n        fetchUrl: ctx.input.url,\n        outputPath,\n      });\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VM } from 'vm2';\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport fs from 'fs-extra';\nimport { JsonValue } from '@backstage/types';\nimport { RepoSpec } from '../../scaffolder/actions/builtin/publish/util';\n\n// language=JavaScript\nconst mkScript = (nunjucksSource: string) => `\nconst { render, renderCompat } = (() => {\n  const module = {};\n  const process = { env: {} };\n  const require = (pkg) => { if (pkg === 'events') { return function (){}; }};\n\n  ${nunjucksSource}\n\n  const env = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '\\${{',\n      variableEnd: '}}',\n    },\n  });\n\n  const compatEnv = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '{{',\n      variableEnd: '}}',\n    },\n  });\n  compatEnv.addFilter('jsonify', compatEnv.getFilter('dump'));\n\n  if (typeof parseRepoUrl !== 'undefined') {\n    const safeHelperRef = parseRepoUrl;\n\n    env.addFilter('parseRepoUrl', repoUrl => {\n      return JSON.parse(safeHelperRef(repoUrl))\n    });\n    env.addFilter('projectSlug', repoUrl => {\n      const { owner, repo } = JSON.parse(safeHelperRef(repoUrl));\n      return owner + '/' + repo;\n    });\n  }\n\n  if (typeof additionalTemplateFilters !== 'undefined') {\n    for (const [filterName, filterFn] of Object.entries(additionalTemplateFilters)) {\n      env.addFilter(filterName, (...args) => JSON.parse(filterFn(...args)));\n    }\n  }\n\n  let uninstallCompat = undefined;\n\n  function render(str, values) {\n    try {\n      if (uninstallCompat) {\n        uninstallCompat();\n        uninstallCompat = undefined;\n      }\n      return env.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  function renderCompat(str, values) {\n    try {\n      if (!uninstallCompat) {\n        uninstallCompat = module.exports.installJinjaCompat();\n      }\n      return compatEnv.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  return { render, renderCompat };\n})();\n`;\n\n/** @public */\nexport type TemplateFilter = (...args: JsonValue[]) => JsonValue | undefined;\n\nexport interface SecureTemplaterOptions {\n  /* Optional implementation of the parseRepoUrl filter */\n  parseRepoUrl?(repoUrl: string): RepoSpec;\n\n  /* Enables jinja compatibility and the \"jsonify\" filter */\n  cookiecutterCompat?: boolean;\n\n  /* Extra user-provided nunjucks filters */\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n}\n\nexport type SecureTemplateRenderer = (\n  template: string,\n  values: unknown,\n) => string;\n\nexport class SecureTemplater {\n  static async loadRenderer(options: SecureTemplaterOptions = {}) {\n    const { parseRepoUrl, cookiecutterCompat, additionalTemplateFilters } =\n      options;\n    const sandbox: Record<string, any> = {};\n\n    if (parseRepoUrl) {\n      sandbox.parseRepoUrl = (url: string) => JSON.stringify(parseRepoUrl(url));\n    }\n\n    if (additionalTemplateFilters) {\n      sandbox.additionalTemplateFilters = Object.fromEntries(\n        Object.entries(additionalTemplateFilters)\n          .filter(([_, filterFunction]) => !!filterFunction)\n          .map(([filterName, filterFunction]) => [\n            filterName,\n            (...args: JsonValue[]) => JSON.stringify(filterFunction(...args)),\n          ]),\n      );\n    }\n\n    const vm = new VM({ sandbox });\n\n    const nunjucksSource = await fs.readFile(\n      resolvePackagePath(\n        '@backstage/plugin-scaffolder-backend',\n        'assets/nunjucks.js.txt',\n      ),\n      'utf-8',\n    );\n\n    vm.run(mkScript(nunjucksSource));\n\n    const render: SecureTemplateRenderer = (template, values) => {\n      if (!vm) {\n        throw new Error('SecureTemplater has not been initialized');\n      }\n      vm.setGlobal('templateStr', template);\n      vm.setGlobal('templateValues', JSON.stringify(values));\n\n      if (cookiecutterCompat) {\n        return vm.run(`renderCompat(templateStr, templateValues)`);\n      }\n\n      return vm.run(`render(templateStr, templateValues)`);\n    };\n    return render;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extname } from 'path';\nimport { resolveSafeChildPath, UrlReader } from '@backstage/backend-common';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { fetchContents } from './helpers';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport globby from 'globby';\nimport fs from 'fs-extra';\nimport { isBinaryFile } from 'isbinaryfile';\nimport {\n  TemplateFilter,\n  SecureTemplater,\n} from '../../../../lib/templating/SecureTemplater';\n\n/**\n * Downloads a skeleton, templates variables into file and directory names and content.\n * Then places the result in the workspace, or optionally in a subdirectory\n * specified by the 'targetPath' input option.\n *\n * @public\n */\nexport function createFetchTemplateAction(options: {\n  reader: UrlReader;\n  integrations: ScmIntegrations;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n}) {\n  const { reader, integrations, additionalTemplateFilters } = options;\n\n  return createTemplateAction<{\n    url: string;\n    targetPath?: string;\n    values: any;\n    templateFileExtension?: string | boolean;\n\n    // Cookiecutter compat options\n    copyWithoutRender?: string[];\n    cookiecutterCompat?: boolean;\n  }>({\n    id: 'fetch:template',\n    description:\n      \"Downloads a skeleton, templates variables into file and directory names and content, and places the result in the workspace, or optionally in a subdirectory specified by the 'targetPath' input option.\",\n    schema: {\n      input: {\n        type: 'object',\n        required: ['url'],\n        properties: {\n          url: {\n            title: 'Fetch URL',\n            description:\n              'Relative path or absolute URL pointing to the directory tree to fetch',\n            type: 'string',\n          },\n          targetPath: {\n            title: 'Target Path',\n            description:\n              'Target path within the working directory to download the contents to. Defaults to the working directory root.',\n            type: 'string',\n          },\n          values: {\n            title: 'Template Values',\n            description: 'Values to pass on to the templating engine',\n            type: 'object',\n          },\n          copyWithoutRender: {\n            title: 'Copy Without Render',\n            description:\n              'An array of glob patterns. Any files or directories which match are copied without being processed as templates.',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          cookiecutterCompat: {\n            title: 'Cookiecutter compatibility mode',\n            description:\n              'Enable features to maximise compatibility with templates built for fetch:cookiecutter',\n            type: 'boolean',\n          },\n          templateFileExtension: {\n            title: 'Template File Extension',\n            description:\n              'If set, only files with the given extension will be templated. If set to `true`, the default extension `.njk` is used.',\n            type: ['string', 'boolean'],\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info('Fetching template content from remote URL');\n\n      const workDir = await ctx.createTemporaryDirectory();\n      const templateDir = resolveSafeChildPath(workDir, 'template');\n\n      const targetPath = ctx.input.targetPath ?? './';\n      const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n\n      if (\n        ctx.input.copyWithoutRender &&\n        !Array.isArray(ctx.input.copyWithoutRender)\n      ) {\n        throw new InputError(\n          'Fetch action input copyWithoutRender must be an Array',\n        );\n      }\n\n      if (\n        ctx.input.templateFileExtension &&\n        (ctx.input.copyWithoutRender || ctx.input.cookiecutterCompat)\n      ) {\n        throw new InputError(\n          'Fetch action input extension incompatible with copyWithoutRender and cookiecutterCompat',\n        );\n      }\n\n      let extension: string | false = false;\n      if (ctx.input.templateFileExtension) {\n        extension =\n          ctx.input.templateFileExtension === true\n            ? '.njk'\n            : ctx.input.templateFileExtension;\n        if (!extension.startsWith('.')) {\n          extension = `.${extension}`;\n        }\n      }\n\n      await fetchContents({\n        reader,\n        integrations,\n        baseUrl: ctx.templateInfo?.baseUrl,\n        fetchUrl: ctx.input.url,\n        outputPath: templateDir,\n      });\n\n      ctx.logger.info('Listing files and directories in template');\n      const allEntriesInTemplate = await globby(`**/*`, {\n        cwd: templateDir,\n        dot: true,\n        onlyFiles: false,\n        markDirectories: true,\n      });\n\n      const nonTemplatedEntries = new Set(\n        (\n          await Promise.all(\n            (ctx.input.copyWithoutRender || []).map(pattern =>\n              globby(pattern, {\n                cwd: templateDir,\n                dot: true,\n                onlyFiles: false,\n                markDirectories: true,\n              }),\n            ),\n          )\n        ).flat(),\n      );\n\n      // Cookiecutter prefixes all parameters in templates with\n      // `cookiecutter.`. To replicate this, we wrap our parameters\n      // in an object with a `cookiecutter` property when compat\n      // mode is enabled.\n      const { cookiecutterCompat, values } = ctx.input;\n      const context = {\n        [cookiecutterCompat ? 'cookiecutter' : 'values']: values,\n      };\n\n      ctx.logger.info(\n        `Processing ${allEntriesInTemplate.length} template files/directories with input values`,\n        ctx.input.values,\n      );\n\n      const renderTemplate = await SecureTemplater.loadRenderer({\n        cookiecutterCompat: ctx.input.cookiecutterCompat,\n        additionalTemplateFilters,\n      });\n\n      for (const location of allEntriesInTemplate) {\n        let renderFilename: boolean;\n        let renderContents: boolean;\n\n        let localOutputPath = location;\n        if (extension) {\n          renderFilename = true;\n          renderContents = extname(localOutputPath) === extension;\n          if (renderContents) {\n            localOutputPath = localOutputPath.slice(0, -extension.length);\n          }\n        } else {\n          renderFilename = renderContents = !nonTemplatedEntries.has(location);\n        }\n        if (renderFilename) {\n          localOutputPath = renderTemplate(localOutputPath, context);\n        }\n        const outputPath = resolveSafeChildPath(outputDir, localOutputPath);\n        // variables have been expanded to make an empty file name\n        // this is due to a conditional like if values.my_condition then file-name.txt else empty string so skip\n        if (outputDir === outputPath) {\n          continue;\n        }\n\n        if (!renderContents && !extension) {\n          ctx.logger.info(\n            `Copying file/directory ${location} without processing.`,\n          );\n        }\n\n        if (location.endsWith('/')) {\n          ctx.logger.info(\n            `Writing directory ${location} to template output path.`,\n          );\n          await fs.ensureDir(outputPath);\n        } else {\n          const inputFilePath = resolveSafeChildPath(templateDir, location);\n\n          if (await isBinaryFile(inputFilePath)) {\n            ctx.logger.info(\n              `Copying binary file ${location} to template output path.`,\n            );\n            await fs.copy(inputFilePath, outputPath);\n          } else {\n            const statsObj = await fs.stat(inputFilePath);\n            ctx.logger.info(\n              `Writing file ${location} to template output path with mode ${statsObj.mode}.`,\n            );\n            const inputFileContents = await fs.readFile(inputFilePath, 'utf-8');\n            await fs.outputFile(\n              outputPath,\n              renderContents\n                ? renderTemplate(inputFileContents, context)\n                : inputFileContents,\n              { mode: statsObj.mode },\n            );\n          }\n        }\n      }\n\n      ctx.logger.info(`Template result written to ${outputDir}`);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { InputError } from '@backstage/errors';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport fs from 'fs-extra';\n\n/**\n * Creates new action that enables deletion of files and directories in the workspace.\n * @public\n */\nexport const createFilesystemDeleteAction = () => {\n  return createTemplateAction<{ files: string[] }>({\n    id: 'fs:delete',\n    description: 'Deletes files and directories from the workspace',\n    schema: {\n      input: {\n        required: ['files'],\n        type: 'object',\n        properties: {\n          files: {\n            title: 'Files',\n            description: 'A list of files and directories that will be deleted',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      if (!Array.isArray(ctx.input?.files)) {\n        throw new InputError('files must be an Array');\n      }\n\n      for (const file of ctx.input.files) {\n        const filepath = resolveSafeChildPath(ctx.workspacePath, file);\n\n        try {\n          await fs.remove(filepath);\n          ctx.logger.info(`File ${filepath} deleted successfully`);\n        } catch (err) {\n          ctx.logger.error(`Failed to delete file ${filepath}:`, err);\n          throw err;\n        }\n      }\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\n\nimport { InputError } from '@backstage/errors';\nimport fs from 'fs-extra';\n\n/**\n * Creates a new action that allows renames of files and directories in the workspace.\n * @public\n */\nexport const createFilesystemRenameAction = () => {\n  return createTemplateAction<{\n    files: Array<{\n      from: string;\n      to: string;\n      overwrite?: boolean;\n    }>;\n  }>({\n    id: 'fs:rename',\n    description: 'Renames files and directories within the workspace',\n    schema: {\n      input: {\n        required: ['files'],\n        type: 'object',\n        properties: {\n          files: {\n            title: 'Files',\n            description:\n              'A list of file and directory names that will be renamed',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['from', 'to'],\n              properties: {\n                from: {\n                  type: 'string',\n                  title: 'The source location of the file to be renamed',\n                },\n                to: {\n                  type: 'string',\n                  title: 'The destination of the new file',\n                },\n                overwrite: {\n                  type: 'boolean',\n                  title:\n                    'Overwrite existing file or directory, default is false',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      if (!Array.isArray(ctx.input?.files)) {\n        throw new InputError('files must be an Array');\n      }\n\n      for (const file of ctx.input.files) {\n        if (!file.from || !file.to) {\n          throw new InputError('each file must have a from and to property');\n        }\n\n        const sourceFilepath = resolveSafeChildPath(\n          ctx.workspacePath,\n          file.from,\n        );\n        const destFilepath = resolveSafeChildPath(ctx.workspacePath, file.to);\n\n        try {\n          await fs.move(sourceFilepath, destFilepath, {\n            overwrite: file.overwrite ?? false,\n          });\n          ctx.logger.info(\n            `File ${sourceFilepath} renamed to ${destFilepath} successfully`,\n          );\n        } catch (err) {\n          ctx.logger.error(\n            `Failed to rename file ${sourceFilepath} to ${destFilepath}:`,\n            err,\n          );\n          throw err;\n        }\n      }\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpawnOptionsWithoutStdio, spawn } from 'child_process';\nimport { PassThrough, Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { Git } from '@backstage/backend-common';\nimport { Octokit } from 'octokit';\nimport { assertError } from '@backstage/errors';\n\n/** @public */\nexport type RunCommandOptions = {\n  /** command to run */\n  command: string;\n  /** arguments to pass the command */\n  args: string[];\n  /** options to pass to spawn */\n  options?: SpawnOptionsWithoutStdio;\n  /** stream to capture stdout and stderr output */\n  logStream?: Writable;\n};\n\n/**\n * Run a command in a sub-process, normally a shell command.\n *\n * @public\n */\nexport const executeShellCommand = async (options: RunCommandOptions) => {\n  const {\n    command,\n    args,\n    options: spawnOptions,\n    logStream = new PassThrough(),\n  } = options;\n  await new Promise<void>((resolve, reject) => {\n    const process = spawn(command, args, spawnOptions);\n\n    process.stdout.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.stderr.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.on('error', error => {\n      return reject(error);\n    });\n\n    process.on('close', code => {\n      if (code !== 0) {\n        return reject(\n          new Error(`Command ${command} failed, exit code: ${code}`),\n        );\n      }\n      return resolve();\n    });\n  });\n};\n\nexport async function initRepoAndPush({\n  dir,\n  remoteUrl,\n  auth,\n  logger,\n  defaultBranch = 'master',\n  commitMessage = 'Initial commit',\n  gitAuthorInfo,\n}: {\n  dir: string;\n  remoteUrl: string;\n  auth: { username: string; password: string };\n  logger: Logger;\n  defaultBranch?: string;\n  commitMessage?: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n}): Promise<void> {\n  const git = Git.fromAuth({\n    username: auth.username,\n    password: auth.password,\n    logger,\n  });\n\n  await git.init({\n    dir,\n    defaultBranch,\n  });\n\n  await git.add({ dir, filepath: '.' });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.addRemote({\n    dir,\n    url: remoteUrl,\n    remote: 'origin',\n  });\n\n  await git.push({\n    dir,\n    remote: 'origin',\n  });\n}\n\ntype BranchProtectionOptions = {\n  client: Octokit;\n  owner: string;\n  repoName: string;\n  logger: Logger;\n  requireCodeOwnerReviews: boolean;\n  defaultBranch?: string;\n};\n\nexport const enableBranchProtectionOnDefaultRepoBranch = async ({\n  repoName,\n  client,\n  owner,\n  logger,\n  requireCodeOwnerReviews,\n  defaultBranch = 'master',\n}: BranchProtectionOptions): Promise<void> => {\n  const tryOnce = async () => {\n    try {\n      await client.rest.repos.updateBranchProtection({\n        mediaType: {\n          /**\n           * 👇 we need this preview because allowing a custom\n           * reviewer count on branch protection is a preview\n           * feature\n           *\n           * More here: https://docs.github.com/en/rest/overview/api-previews#require-multiple-approving-reviews\n           */\n          previews: ['luke-cage-preview'],\n        },\n        owner,\n        repo: repoName,\n        branch: defaultBranch,\n        required_status_checks: { strict: true, contexts: [] },\n        restrictions: null,\n        enforce_admins: true,\n        required_pull_request_reviews: {\n          required_approving_review_count: 1,\n          require_code_owner_reviews: requireCodeOwnerReviews,\n        },\n      });\n    } catch (e) {\n      assertError(e);\n      if (\n        e.message.includes(\n          'Upgrade to GitHub Pro or make this repository public to enable this feature',\n        )\n      ) {\n        logger.warn(\n          'Branch protection was not enabled as it requires GitHub Pro for private repositories',\n        );\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  try {\n    await tryOnce();\n  } catch (e) {\n    if (!e.message.includes('Branch not found')) {\n      throw e;\n    }\n\n    // GitHub has eventual consistency. Fail silently, wait, and try again.\n    await new Promise(resolve => setTimeout(resolve, 600));\n    await tryOnce();\n  }\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { isChildPath } from '@backstage/backend-common';\nimport { join as joinPath, normalize as normalizePath } from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\nexport const getRepoSourceDirectory = (\n  workspacePath: string,\n  sourcePath: string | undefined,\n) => {\n  if (sourcePath) {\n    const safeSuffix = normalizePath(sourcePath).replace(\n      /^(\\.\\.(\\/|\\\\|$))+/,\n      '',\n    );\n    const path = joinPath(workspacePath, safeSuffix);\n    if (!isChildPath(workspacePath, path)) {\n      throw new Error('Invalid source path');\n    }\n    return path;\n  }\n  return workspacePath;\n};\nexport type RepoSpec = {\n  repo: string;\n  host: string;\n  owner?: string;\n  organization?: string;\n  workspace?: string;\n  project?: string;\n};\n\nexport const parseRepoUrl = (\n  repoUrl: string,\n  integrations: ScmIntegrationRegistry,\n): RepoSpec => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  const host = parsed.host;\n  const owner = parsed.searchParams.get('owner') ?? undefined;\n  const organization = parsed.searchParams.get('organization') ?? undefined;\n  const workspace = parsed.searchParams.get('workspace') ?? undefined;\n  const project = parsed.searchParams.get('project') ?? undefined;\n\n  const type = integrations.byHost(host)?.type;\n\n  if (!type) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  if (type === 'bitbucket') {\n    if (host === 'bitbucket.org') {\n      if (!workspace) {\n        throw new InputError(\n          `Invalid repo URL passed to publisher: ${repoUrl}, missing workspace`,\n        );\n      }\n    }\n    if (!project) {\n      throw new InputError(\n        `Invalid repo URL passed to publisher: ${repoUrl}, missing project`,\n      );\n    }\n  } else {\n    if (!owner) {\n      throw new InputError(\n        `Invalid repo URL passed to publisher: ${repoUrl}, missing owner`,\n      );\n    }\n  }\n\n  const repo = parsed.searchParams.get('repo');\n  if (!repo) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher: ${repoUrl}, missing repo`,\n    );\n  }\n\n  return { host, owner, repo, organization, workspace, project };\n};\nexport const isExecutable = (fileMode: number) => {\n  const executeBitMask = 0o000111;\n  const res = fileMode & executeBitMask;\n  return res > 0;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { initRepoAndPush } from '../helpers';\nimport { GitRepositoryCreateOptions } from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport { getPersonalAccessTokenHandler, WebApi } from 'azure-devops-node-api';\nimport { getRepoSourceDirectory, parseRepoUrl } from './util';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { Config } from '@backstage/config';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Azure.\n * @public\n */\nexport function createPublishAzureAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    sourcePath?: string;\n    token?: string;\n  }>({\n    id: 'publish:azure',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Azure.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to Azure',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { repoUrl, defaultBranch = 'master' } = ctx.input;\n\n      const { owner, repo, host, organization } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      if (!organization) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing organization`,\n        );\n      }\n\n      const integrationConfig = integrations.azure.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!integrationConfig.config.token && !ctx.input.token) {\n        throw new InputError(`No token provided for Azure Integration ${host}`);\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token!;\n      const authHandler = getPersonalAccessTokenHandler(token);\n\n      const webApi = new WebApi(`https://${host}/${organization}`, authHandler);\n      const client = await webApi.getGitApi();\n      const createOptions: GitRepositoryCreateOptions = { name: repo };\n      const returnedRepo = await client.createRepository(createOptions, owner);\n\n      if (!returnedRepo) {\n        throw new InputError(\n          `Unable to create the repository with Organization ${organization}, Project ${owner} and Repo ${repo}.\n          Please make sure that both the Org and Project are typed corrected and exist.`,\n        );\n      }\n      const remoteUrl = returnedRepo.remoteUrl;\n\n      if (!remoteUrl) {\n        throw new InputError(\n          'No remote URL returned from create repository for Azure',\n        );\n      }\n\n      // blam: Repo contents is serialized into the path,\n      // so it's just the base path I think\n      const repoContentsUrl = remoteUrl;\n\n      const gitAuthorInfo = {\n        name: config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        defaultBranch,\n        auth: {\n          username: 'notempty',\n          password: token,\n        },\n        logger: ctx.logger,\n        commitMessage: config.getOptionalString(\n          'scaffolder.defaultCommitMessage',\n        ),\n        gitAuthorInfo,\n      });\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  BitbucketIntegrationConfig,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport fetch, { Response, RequestInit } from 'node-fetch';\nimport { initRepoAndPush } from '../helpers';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { getRepoSourceDirectory, parseRepoUrl } from './util';\nimport { Config } from '@backstage/config';\n\nconst createBitbucketCloudRepository = async (opts: {\n  workspace: string;\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  mainBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    project,\n    repo,\n    description,\n    repoVisibility,\n    mainBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      scm: 'git',\n      description: description,\n      is_private: repoVisibility === 'private',\n      project: { key: project },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  let response: Response;\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'https') {\n      remoteUrl = link.href;\n    }\n  }\n\n  // \"mainbranch.name\" cannot be set neither at create nor update of the repo\n  // the first pushed branch will be set as \"main branch\" then\n  const repoContentsUrl = `${r.links.html.href}/src/${mainBranch}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst createBitbucketServerRepository = async (opts: {\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    project,\n    repo,\n    description,\n    authorization,\n    repoVisibility,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: repo,\n      description: description,\n      public: repoVisibility === 'public',\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${apiBaseUrl}/projects/${project}/repos`, options);\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'http') {\n      remoteUrl = link.href;\n    }\n  }\n\n  const repoContentsUrl = `${r.links.self[0].href}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\nconst getAuthorizationHeader = (config: BitbucketIntegrationConfig) => {\n  if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n\n    return `Basic ${buffer.toString('base64')}`;\n  }\n\n  if (config.token) {\n    return `Bearer ${config.token}`;\n  }\n\n  throw new Error(\n    `Authorization has not been provided for Bitbucket. Please add either username + appPassword or token to the Integrations config`,\n  );\n};\n\nconst performEnableLFS = async (opts: {\n  authorization: string;\n  host: string;\n  project: string;\n  repo: string;\n}) => {\n  const { authorization, host, project, repo } = opts;\n\n  const options: RequestInit = {\n    method: 'PUT',\n    headers: {\n      Authorization: authorization,\n    },\n  };\n\n  const { ok, status, statusText } = await fetch(\n    `https://${host}/rest/git-lfs/admin/projects/${project}/repos/${repo}/enabled`,\n    options,\n  );\n\n  if (!ok)\n    throw new Error(\n      `Failed to enable LFS in the repository, ${status}: ${statusText}`,\n    );\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket.\n * @public\n */\nexport function createPublishBitbucketAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    repoVisibility?: 'private' | 'public';\n    sourcePath?: string;\n    enableLFS?: boolean;\n    token?: string;\n  }>({\n    id: 'publish:bitbucket',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            type: 'string',\n            enum: ['private', 'public'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          enableLFS: {\n            title: 'Enable LFS?',\n            description:\n              'Enable LFS for the repository. Only available for hosted Bitbucket.',\n            type: 'boolean',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to BitBucket',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        repoVisibility = 'private',\n        enableLFS = false,\n      } = ctx.input;\n\n      const { workspace, project, repo, host } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      // Workspace is only required for bitbucket cloud\n      if (host === 'bitbucket.org') {\n        if (!workspace) {\n          throw new InputError(\n            `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n          );\n        }\n      }\n\n      // Project is required for both bitbucket cloud and bitbucket server\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucket.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token\n          ? {\n              host: integrationConfig.config.host,\n              apiBaseUrl: integrationConfig.config.apiBaseUrl,\n              token: ctx.input.token,\n            }\n          : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const createMethod =\n        host === 'bitbucket.org'\n          ? createBitbucketCloudRepository\n          : createBitbucketServerRepository;\n\n      const { remoteUrl, repoContentsUrl } = await createMethod({\n        authorization,\n        workspace: workspace || '',\n        project,\n        repo,\n        repoVisibility,\n        mainBranch: defaultBranch,\n        description,\n        apiBaseUrl,\n      });\n\n      const gitAuthorInfo = {\n        name: config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      let auth;\n\n      if (ctx.input.token) {\n        auth = {\n          username: 'x-token-auth',\n          password: ctx.input.token,\n        };\n      } else {\n        auth = {\n          username: integrationConfig.config.username\n            ? integrationConfig.config.username\n            : 'x-token-auth',\n          password: integrationConfig.config.appPassword\n            ? integrationConfig.config.appPassword\n            : integrationConfig.config.token ?? '',\n        };\n      }\n\n      await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: config.getOptionalString(\n          'scaffolder.defaultCommitMessage',\n        ),\n        gitAuthorInfo,\n      });\n\n      if (enableLFS && host !== 'bitbucket.org') {\n        await performEnableLFS({ authorization, host, project, repo });\n      }\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { dirname } from 'path';\nimport { InputError } from '@backstage/errors';\nimport { createTemplateAction } from '../../createTemplateAction';\n\n/**\n * This task is useful for local development and testing of both the scaffolder\n * and scaffolder templates.\n *\n * @remarks\n *\n * This action is not installed by default and should not be installed in\n * production, as it writes the files to the local filesystem of the scaffolder.\n *\n * @public\n */\nexport function createPublishFileAction() {\n  return createTemplateAction<{ path: string }>({\n    id: 'publish:file',\n    description: 'Writes contents of the workspace to a local directory',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['path'],\n        properties: {\n          path: {\n            title: 'Path to a directory where the output will be written',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { path } = ctx.input;\n\n      const exists = await fs.pathExists(path);\n      if (exists) {\n        throw new InputError('Output path already exists');\n      }\n      await fs.ensureDir(dirname(path));\n      await fs.copy(ctx.workspacePath, path);\n    },\n  });\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { InputError } from '@backstage/errors';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { OctokitOptions } from '@octokit/core/dist-types/types';\nimport { parseRepoUrl } from '../publish/util';\n\nconst DEFAULT_TIMEOUT_MS = 60_000;\n\nexport async function getOctokitOptions(options: {\n  integrations: ScmIntegrationRegistry;\n  credentialsProvider?: GithubCredentialsProvider;\n  token?: string;\n  repoUrl: string;\n}): Promise<OctokitOptions> {\n  const { integrations, credentialsProvider, repoUrl, token } = options;\n  const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n  const requestOptions = {\n    // set timeout to 60 seconds\n    timeout: DEFAULT_TIMEOUT_MS,\n  };\n\n  if (!owner) {\n    throw new InputError(`No owner provided for repo ${repoUrl}`);\n  }\n\n  const integrationConfig = integrations.github.byHost(host)?.config;\n\n  if (!integrationConfig) {\n    throw new InputError(`No integration for host ${host}`);\n  }\n\n  // short circuit the `githubCredentialsProvider` if there is a token provided by the caller already\n  if (token) {\n    return {\n      auth: token,\n      baseUrl: integrationConfig.apiBaseUrl,\n      previews: ['nebula-preview'],\n      request: requestOptions,\n    };\n  }\n\n  const githubCredentialsProvider =\n    credentialsProvider ??\n    DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n\n  // TODO(blam): Consider changing this API to take host and repo instead of repoUrl, as we end up parsing in this function\n  // and then parsing in the `getCredentials` function too the other side\n  const { token: credentialProviderToken } =\n    await githubCredentialsProvider.getCredentials({\n      url: `https://${host}/${encodeURIComponent(owner)}/${encodeURIComponent(\n        repo,\n      )}`,\n    });\n\n  if (!credentialProviderToken) {\n    throw new InputError(\n      `No token available for host: ${host}, with owner ${owner}, and repo ${repo}`,\n    );\n  }\n\n  return {\n    auth: credentialProviderToken,\n    baseUrl: integrationConfig.apiBaseUrl,\n    previews: ['nebula-preview'],\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  enableBranchProtectionOnDefaultRepoBranch,\n  initRepoAndPush,\n} from '../helpers';\nimport { getRepoSourceDirectory, parseRepoUrl } from './util';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { Config } from '@backstage/config';\nimport { assertError, InputError } from '@backstage/errors';\nimport { getOctokitOptions } from '../github/helpers';\nimport { Octokit } from 'octokit';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitHub.\n *\n * @public\n */\nexport function createPublishGithubAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, config, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    access?: string;\n    defaultBranch?: string;\n    deleteBranchOnMerge?: boolean;\n    allowRebaseMerge?: boolean;\n    allowSquashMerge?: boolean;\n    allowMergeCommit?: boolean;\n    sourcePath?: string;\n    requireCodeOwnerReviews?: boolean;\n    repoVisibility?: 'private' | 'internal' | 'public';\n    collaborators?: Array<{\n      username: string;\n      access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n    }>;\n    token?: string;\n    topics?: string[];\n  }>({\n    id: 'publish:github',\n    description:\n      'Initializes a git repository of contents in workspace and publishes it to GitHub.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          description: {\n            title: 'Repository Description',\n            type: 'string',\n          },\n          access: {\n            title: 'Repository Access',\n            description: `Sets an admin collaborator on the repository. Can either be a user reference different from 'owner' in 'repoUrl' or team reference, eg. 'org/team-name'`,\n            type: 'string',\n          },\n          requireCodeOwnerReviews: {\n            title: 'Require CODEOWNER Reviews?',\n            description:\n              'Require an approved review in PR including files with a designated Code Owner',\n            type: 'boolean',\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            type: 'string',\n            enum: ['private', 'public', 'internal'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          deleteBranchOnMerge: {\n            title: 'Delete Branch On Merge',\n            type: 'boolean',\n            description: `Delete the branch after merging the PR. The default value is 'false'`,\n          },\n          allowMergeCommit: {\n            title: 'Allow Merge Commits',\n            type: 'boolean',\n            description: `Allow merge commits. The default value is 'true'`,\n          },\n          allowSquashMerge: {\n            title: 'Allow Squash Merges',\n            type: 'boolean',\n            description: `Allow squash merges. The default value is 'true'`,\n          },\n          allowRebaseMerge: {\n            title: 'Allow Rebase Merges',\n            type: 'boolean',\n            description: `Allow rebase merges. The default value is 'true'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          collaborators: {\n            title: 'Collaborators',\n            description: 'Provide additional users with permissions',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['username', 'access'],\n              properties: {\n                access: {\n                  type: 'string',\n                  description: 'The type of access for the user',\n                  enum: ['push', 'pull', 'admin', 'maintain', 'triage'],\n                },\n                username: {\n                  type: 'string',\n                  description: 'The username or group',\n                },\n              },\n            },\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n          topics: {\n            title: 'Topics',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        access,\n        requireCodeOwnerReviews = false,\n        repoVisibility = 'private',\n        defaultBranch = 'master',\n        deleteBranchOnMerge = false,\n        allowMergeCommit = true,\n        allowSquashMerge = true,\n        allowRebaseMerge = true,\n        collaborators,\n        topics,\n        token: providedToken,\n      } = ctx.input;\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl,\n      });\n\n      const client = new Octokit(octokitOptions);\n\n      const user = await client.rest.users.getByUsername({\n        username: owner,\n      });\n\n      const repoCreationPromise =\n        user.data.type === 'Organization'\n          ? client.rest.repos.createInOrg({\n              name: repo,\n              org: owner,\n              private: repoVisibility === 'private',\n              visibility: repoVisibility,\n              description: description,\n              delete_branch_on_merge: deleteBranchOnMerge,\n              allow_merge_commit: allowMergeCommit,\n              allow_squash_merge: allowSquashMerge,\n              allow_rebase_merge: allowRebaseMerge,\n            })\n          : client.rest.repos.createForAuthenticatedUser({\n              name: repo,\n              private: repoVisibility === 'private',\n              description: description,\n              delete_branch_on_merge: deleteBranchOnMerge,\n              allow_merge_commit: allowMergeCommit,\n              allow_squash_merge: allowSquashMerge,\n              allow_rebase_merge: allowRebaseMerge,\n            });\n\n      const { data: newRepo } = await repoCreationPromise;\n      if (access?.startsWith(`${owner}/`)) {\n        const [, team] = access.split('/');\n        await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n          org: owner,\n          team_slug: team,\n          owner,\n          repo,\n          permission: 'admin',\n        });\n        // No need to add access if it's the person who owns the personal account\n      } else if (access && access !== owner) {\n        await client.rest.repos.addCollaborator({\n          owner,\n          repo,\n          username: access,\n          permission: 'admin',\n        });\n      }\n\n      if (collaborators) {\n        for (const {\n          access: permission,\n          username: team_slug,\n        } of collaborators) {\n          try {\n            await client.rest.teams.addOrUpdateRepoPermissionsInOrg({\n              org: owner,\n              team_slug,\n              owner,\n              repo,\n              permission,\n            });\n          } catch (e) {\n            assertError(e);\n            ctx.logger.warn(\n              `Skipping ${permission} access for ${team_slug}, ${e.message}`,\n            );\n          }\n        }\n      }\n\n      if (topics) {\n        try {\n          await client.rest.repos.replaceAllTopics({\n            owner,\n            repo,\n            names: topics.map(t => t.toLowerCase()),\n          });\n        } catch (e) {\n          assertError(e);\n          ctx.logger.warn(`Skipping topics ${topics.join(' ')}, ${e.message}`);\n        }\n      }\n\n      const remoteUrl = newRepo.clone_url;\n      const repoContentsUrl = `${newRepo.html_url}/blob/${defaultBranch}`;\n\n      const gitAuthorInfo = {\n        name: config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl,\n        defaultBranch,\n        auth: {\n          username: 'x-access-token',\n          password: octokitOptions.auth,\n        },\n        logger: ctx.logger,\n        commitMessage: config.getOptionalString(\n          'scaffolder.defaultCommitMessage',\n        ),\n        gitAuthorInfo,\n      });\n\n      try {\n        await enableBranchProtectionOnDefaultRepoBranch({\n          owner,\n          client,\n          repoName: newRepo.name,\n          logger: ctx.logger,\n          defaultBranch,\n          requireCodeOwnerReviews,\n        });\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Skipping: default branch protection on '${newRepo.name}', ${e.message}`,\n        );\n      }\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { parseRepoUrl, isExecutable } from './util';\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { zipObject } from 'lodash';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { Octokit } from 'octokit';\nimport { InputError, CustomErrorBase } from '@backstage/errors';\nimport { createPullRequest } from 'octokit-plugin-create-pull-request';\nimport globby from 'globby';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { getOctokitOptions } from '../github/helpers';\n\nexport type Encoding = 'utf-8' | 'base64';\n\nclass GithubResponseError extends CustomErrorBase {}\n\n/** @public */\nexport interface OctokitWithPullRequestPluginClient {\n  createPullRequest(options: createPullRequest.Options): Promise<{\n    data: {\n      html_url: string;\n      number: number;\n    };\n  } | null>;\n}\n\n/**\n * The options passed to the client factory function.\n * @public\n */\nexport type CreateGithubPullRequestClientFactoryInput = {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n  host: string;\n  owner: string;\n  repo: string;\n  token?: string;\n};\n\nexport const defaultClientFactory = async ({\n  integrations,\n  githubCredentialsProvider,\n  owner,\n  repo,\n  host = 'github.com',\n  token: providedToken,\n}: CreateGithubPullRequestClientFactoryInput): Promise<OctokitWithPullRequestPluginClient> => {\n  const [encodedHost, encodedOwner, encodedRepo] = [host, owner, repo].map(\n    encodeURIComponent,\n  );\n\n  const octokitOptions = await getOctokitOptions({\n    integrations,\n    credentialsProvider: githubCredentialsProvider,\n    repoUrl: `${encodedHost}?owner=${encodedOwner}&repo=${encodedRepo}`,\n    token: providedToken,\n  });\n\n  const OctokitPR = Octokit.plugin(createPullRequest);\n  return new OctokitPR(octokitOptions);\n};\n\n/**\n * The options passed to {@link createPublishGithubPullRequestAction} method\n * @public\n */\nexport interface CreateGithubPullRequestActionOptions {\n  /**\n   * An instance of {@link @backstage/integration#ScmIntegrationRegistry} that will be used in the action.\n   */\n  integrations: ScmIntegrationRegistry;\n  /**\n   * An instance of {@link @backstage/integration#GithubCredentialsProvider} that will be used to get credentials for the action.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n  /**\n   * A method to return the Octokit client with the Pull Request Plugin.\n   */\n  clientFactory?: (\n    input: CreateGithubPullRequestClientFactoryInput,\n  ) => Promise<OctokitWithPullRequestPluginClient>;\n}\n\n/**\n * Creates a Github Pull Request action.\n * @public\n */\nexport const createPublishGithubPullRequestAction = ({\n  integrations,\n  githubCredentialsProvider,\n  clientFactory = defaultClientFactory,\n}: CreateGithubPullRequestActionOptions) => {\n  return createTemplateAction<{\n    title: string;\n    branchName: string;\n    description: string;\n    repoUrl: string;\n    targetPath?: string;\n    sourcePath?: string;\n    token?: string;\n  }>({\n    id: 'publish:github:pull-request',\n    schema: {\n      input: {\n        required: ['repoUrl', 'title', 'description', 'branchName'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          branchName: {\n            type: 'string',\n            title: 'Branch Name',\n            description: 'The name for the branch',\n          },\n          title: {\n            type: 'string',\n            title: 'Pull Request Name',\n            description: 'The name for the pull request',\n          },\n          description: {\n            type: 'string',\n            title: 'Pull Request Description',\n            description: 'The description of the pull request',\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n      output: {\n        required: ['remoteUrl'],\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            type: 'string',\n            title: 'Pull Request URL',\n            description: 'Link to the pull request in Github',\n          },\n          pullRequestNumber: {\n            type: 'number',\n            title: 'Pull Request Number',\n            description: 'The pull request number',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branchName,\n        title,\n        description,\n        targetPath,\n        sourcePath,\n        token: providedToken,\n      } = ctx.input;\n\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const client = await clientFactory({\n        integrations,\n        githubCredentialsProvider,\n        host,\n        owner,\n        repo,\n        token: providedToken,\n      });\n\n      const fileRoot = sourcePath\n        ? resolveSafeChildPath(ctx.workspacePath, sourcePath)\n        : ctx.workspacePath;\n\n      const localFilePaths = await globby(['./**', './**/.*', '!.git'], {\n        cwd: fileRoot,\n        gitignore: true,\n        dot: true,\n      });\n\n      const fileContents = await Promise.all(\n        localFilePaths.map(filePath => {\n          const absPath = resolveSafeChildPath(fileRoot, filePath);\n          const base64EncodedContent = fs\n            .readFileSync(absPath)\n            .toString('base64');\n          const fileStat = fs.statSync(absPath);\n          // See the properties of tree items\n          // in https://docs.github.com/en/rest/reference/git#trees\n          const githubTreeItemMode = isExecutable(fileStat.mode)\n            ? '100755'\n            : '100644';\n          // Always use base64 encoding to avoid doubling a binary file in size\n          // due to interpreting a binary file as utf-8 and sending github\n          // the utf-8 encoded content.\n          //\n          // For example, the original gradle-wrapper.jar is 57.8k in https://github.com/kennethzfeng/pull-request-test/pull/5/files.\n          // Its size could be doubled to 98.3K (See https://github.com/kennethzfeng/pull-request-test/pull/4/files)\n          const encoding: Encoding = 'base64';\n          return {\n            encoding: encoding,\n            content: base64EncodedContent,\n            mode: githubTreeItemMode,\n          };\n        }),\n      );\n\n      const repoFilePaths = localFilePaths.map(repoFilePath => {\n        return targetPath ? `${targetPath}/${repoFilePath}` : repoFilePath;\n      });\n\n      const changes = [\n        {\n          files: zipObject(repoFilePaths, fileContents),\n          commit: title,\n        },\n      ];\n\n      try {\n        const response = await client.createPullRequest({\n          owner,\n          repo,\n          title,\n          changes,\n          body: description,\n          head: branchName,\n        });\n\n        if (!response) {\n          throw new GithubResponseError('null response from Github');\n        }\n\n        ctx.output('remoteUrl', response.data.html_url);\n        ctx.output('pullRequestNumber', response.data.number);\n      } catch (e) {\n        throw new GithubResponseError('Pull request creation failed', e);\n      }\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { Gitlab } from '@gitbeaker/node';\nimport { initRepoAndPush } from '../helpers';\nimport { getRepoSourceDirectory, parseRepoUrl } from './util';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { Config } from '@backstage/config';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitLab.\n *\n * @public\n */\nexport function createPublishGitlabAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    defaultBranch?: string;\n    repoVisibility?: 'private' | 'internal' | 'public';\n    sourcePath?: string;\n    token?: string;\n  }>({\n    id: 'publish:gitlab',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to GitLab.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            type: 'string',\n            enum: ['private', 'public', 'internal'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        repoVisibility = 'private',\n        defaultBranch = 'master',\n      } = ctx.input;\n\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const integrationConfig = integrations.gitlab.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!integrationConfig.config.token && !ctx.input.token) {\n        throw new InputError(`No token available for host ${host}`);\n      }\n\n      const token = ctx.input.token || integrationConfig.config.token!;\n      const tokenType = ctx.input.token ? 'oauthToken' : 'token';\n\n      const client = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        [tokenType]: token,\n      });\n\n      let { id: targetNamespace } = (await client.Namespaces.show(owner)) as {\n        id: number;\n      };\n\n      if (!targetNamespace) {\n        const { id } = (await client.Users.current()) as {\n          id: number;\n        };\n        targetNamespace = id;\n      }\n\n      const { http_url_to_repo } = await client.Projects.create({\n        namespace_id: targetNamespace,\n        name: repo,\n        visibility: repoVisibility,\n      });\n\n      const remoteUrl = (http_url_to_repo as string).replace(/\\.git$/, '');\n      const repoContentsUrl = `${remoteUrl}/-/blob/${defaultBranch}`;\n\n      const gitAuthorInfo = {\n        name: config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl: http_url_to_repo as string,\n        defaultBranch,\n        auth: {\n          username: 'oauth2',\n          password: token,\n        },\n        logger: ctx.logger,\n        commitMessage: config.getOptionalString(\n          'scaffolder.defaultCommitMessage',\n        ),\n        gitAuthorInfo,\n      });\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { readFile } from 'fs-extra';\nimport { Gitlab } from '@gitbeaker/node';\nimport globby from 'globby';\nimport { Types } from '@gitbeaker/core';\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { parseRepoUrl } from './util';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\n\n/**\n * Create a new action that creates a gitlab merge request.\n *\n * @public\n */\nexport const createPublishGitlabMergeRequestAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    projectid: string;\n    repoUrl: string;\n    title: string;\n    description: string;\n    branchName: string;\n    targetPath: string;\n    token?: string;\n  }>({\n    id: 'publish:gitlab:merge-request',\n    schema: {\n      input: {\n        required: ['projectid', 'repoUrl', 'targetPath', 'branchName'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            type: 'string',\n            title: 'Repository Location',\n            description: `Accepts the format 'gitlab.com/group_name/project_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          projectid: {\n            type: 'string',\n            title: 'projectid',\n            description: 'Project ID/Name(slug) of the Gitlab Project',\n          },\n          title: {\n            type: 'string',\n            title: 'Merge Request Name',\n            description: 'The name for the merge request',\n          },\n          description: {\n            type: 'string',\n            title: 'Merge Request Description',\n            description: 'The description of the merge request',\n          },\n          branchName: {\n            type: 'string',\n            title: 'Destination Branch name',\n            description: 'The description of the merge request',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          projectid: {\n            title: 'Gitlab Project id/Name(slug)',\n            type: 'string',\n          },\n          mergeRequestURL: {\n            title: 'MergeRequest(MR) URL',\n            type: 'string',\n            description: 'Link to the merge request in GitLab',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const repoUrl = ctx.input.repoUrl;\n      const { host } = parseRepoUrl(repoUrl, integrations);\n      const integrationConfig = integrations.gitlab.byHost(host);\n\n      const actions: Types.CommitAction[] = [];\n\n      const destinationBranch = ctx.input.branchName;\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!integrationConfig.config.token && !ctx.input.token) {\n        throw new InputError(`No token available for host ${host}`);\n      }\n\n      const token = ctx.input.token ?? integrationConfig.config.token!;\n      const tokenType = ctx.input.token ? 'oauthToken' : 'token';\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        [tokenType]: token,\n      });\n\n      const fileRoot = ctx.workspacePath;\n      const localFilePaths = await globby([`${ctx.input.targetPath}/**`], {\n        cwd: fileRoot,\n        gitignore: true,\n        dot: true,\n      });\n\n      const fileContents = await Promise.all(\n        localFilePaths.map(p => readFile(resolveSafeChildPath(fileRoot, p))),\n      );\n\n      const repoFilePaths = localFilePaths.map(repoFilePath => {\n        return repoFilePath;\n      });\n\n      for (let i = 0; i < repoFilePaths.length; i++) {\n        actions.push({\n          action: 'create',\n          filePath: repoFilePaths[i],\n          content: fileContents[i].toString(),\n        });\n      }\n\n      const projects = await api.Projects.show(ctx.input.projectid);\n\n      const { default_branch: defaultBranch } = projects;\n\n      try {\n        await api.Branches.create(\n          ctx.input.projectid,\n          destinationBranch,\n          String(defaultBranch),\n        );\n      } catch (e) {\n        throw new InputError(`The branch creation failed ${e}`);\n      }\n\n      try {\n        await api.Commits.create(\n          ctx.input.projectid,\n          destinationBranch,\n          ctx.input.title,\n          actions,\n        );\n      } catch (e) {\n        throw new InputError(\n          `Committing the changes to ${destinationBranch} failed ${e}`,\n        );\n      }\n\n      try {\n        const mergeRequestUrl = await api.MergeRequests.create(\n          ctx.input.projectid,\n          destinationBranch,\n          String(defaultBranch),\n          ctx.input.title,\n          { description: ctx.input.description },\n        ).then((mergeRequest: { web_url: string }) => {\n          return mergeRequest.web_url;\n        });\n        ctx.output('projectid', ctx.input.projectid);\n        ctx.output('mergeRequestUrl', mergeRequestUrl);\n      } catch (e) {\n        throw new InputError(`Merge request creation failed${e}`);\n      }\n    },\n  });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { parseRepoUrl } from '../publish/util';\nimport { getOctokitOptions } from './helpers';\n\n/**\n * Creates a new action that dispatches a GitHub Action workflow for a given branch or tag.\n * @public\n */\nexport function createGithubActionsDispatchAction(options: {\n  integrations: ScmIntegrations;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    workflowId: string;\n    branchOrTagName: string;\n    workflowInputs?: { [key: string]: string };\n    token?: string;\n  }>({\n    id: 'github:actions:dispatch',\n    description:\n      'Dispatches a GitHub Action workflow for a given branch or tag',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'workflowId', 'branchOrTagName'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          workflowId: {\n            title: 'Workflow ID',\n            description: 'The GitHub Action Workflow filename',\n            type: 'string',\n          },\n          branchOrTagName: {\n            title: 'Branch or Tag name',\n            description:\n              'The git branch or tag name used to dispatch the workflow',\n            type: 'string',\n          },\n          workflowInputs: {\n            title: 'Workflow Inputs',\n            description:\n              'Inputs keys and values to send to GitHub Action configured on the workflow file. The maximum number of properties is 10. ',\n            type: 'object',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        workflowId,\n        branchOrTagName,\n        workflowInputs,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(\n        `Dispatching workflow ${workflowId} for repo ${repoUrl} on ${branchOrTagName}`,\n      );\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          repoUrl,\n          credentialsProvider: githubCredentialsProvider,\n          token: providedToken,\n        }),\n      );\n\n      await client.rest.actions.createWorkflowDispatch({\n        owner,\n        repo,\n        workflow_id: workflowId,\n        ref: branchOrTagName,\n        inputs: workflowInputs,\n      });\n\n      ctx.logger.info(`Workflow ${workflowId} dispatched successfully`);\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { emitterEventNames } from '@octokit/webhooks';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { parseRepoUrl } from '../publish/util';\n\n/**\n * Creates new action that creates a webhook for a repository on GitHub.\n * @public\n */\nexport function createGithubWebhookAction(options: {\n  integrations: ScmIntegrationRegistry;\n  defaultWebhookSecret?: string;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, defaultWebhookSecret, githubCredentialsProvider } =\n    options;\n\n  const eventNames = emitterEventNames.filter(event => !event.includes('.'));\n\n  return createTemplateAction<{\n    repoUrl: string;\n    webhookUrl: string;\n    webhookSecret?: string;\n    events?: string[];\n    active?: boolean;\n    contentType?: 'form' | 'json';\n    insecureSsl?: boolean;\n    token?: string;\n  }>({\n    id: 'github:webhook',\n    description: 'Creates webhook for a repository on GitHub.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'webhookUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          webhookUrl: {\n            title: 'Webhook URL',\n            description: 'The URL to which the payloads will be delivered',\n            type: 'string',\n          },\n          webhookSecret: {\n            title: 'Webhook Secret',\n            description:\n              'Webhook secret value. The default can be provided internally in action creation',\n            type: 'string',\n          },\n          events: {\n            title: 'Triggering Events',\n            description:\n              'Determines what events the hook is triggered for. Default: push',\n            type: 'array',\n            oneOf: [\n              {\n                items: {\n                  type: 'string',\n                  enum: eventNames,\n                },\n              },\n              {\n                items: {\n                  type: 'string',\n                  const: '*',\n                },\n              },\n            ],\n          },\n          active: {\n            title: 'Active',\n            type: 'boolean',\n            description: `Determines if notifications are sent when the webhook is triggered. Default: true`,\n          },\n          contentType: {\n            title: 'Content Type',\n            type: 'string',\n            enum: ['form', 'json'],\n            description: `The media type used to serialize the payloads. The default is 'form'`,\n          },\n          insecureSsl: {\n            title: 'Insecure SSL',\n            type: 'boolean',\n            description: `Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Default 'false'`,\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        webhookUrl,\n        webhookSecret = defaultWebhookSecret,\n        events = ['push'],\n        active = true,\n        contentType = 'form',\n        insecureSsl = false,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(`Creating webhook ${webhookUrl} for repo ${repoUrl}`);\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          credentialsProvider: githubCredentialsProvider,\n          repoUrl: repoUrl,\n          token: providedToken,\n        }),\n      );\n\n      try {\n        const insecure_ssl = insecureSsl ? '1' : '0';\n        await client.rest.repos.createWebhook({\n          owner,\n          repo,\n          config: {\n            url: webhookUrl,\n            content_type: contentType,\n            secret: webhookSecret,\n            insecure_ssl,\n          },\n          events,\n          active,\n        });\n        ctx.logger.info(`Webhook '${webhookUrl}' created successfully`);\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: create webhook '${webhookUrl}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { createTemplateAction } from '../../createTemplateAction';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { parseRepoUrl } from '../publish/util';\n\n/**\n * Adds labels to a pull request or issue on GitHub\n * @public\n */\nexport function createGithubIssuesLabelAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    number: number;\n    labels: string[];\n    token?: string;\n  }>({\n    id: 'github:issues:label',\n    description: 'Adds labels to a pull request or issue on GitHub.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'number', 'labels'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          number: {\n            title: 'Pull Request or issue number',\n            description: 'The pull request or issue number to add labels to',\n            type: 'number',\n          },\n          labels: {\n            title: 'Labels',\n            description: 'The labels to add to the pull request or issue',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { repoUrl, number, labels, token: providedToken } = ctx.input;\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n      ctx.logger.info(`Adding labels to ${number} issue on repo ${repo}`);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          credentialsProvider: githubCredentialsProvider,\n          repoUrl: repoUrl,\n          token: providedToken,\n        }),\n      );\n\n      try {\n        await client.rest.issues.addLabels({\n          owner,\n          repo,\n          issue_number: number,\n          labels,\n        });\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: adding labels to issue: '${number}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { JsonObject } from '@backstage/types';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n  DefaultGithubCredentialsProvider,\n} from '@backstage/integration';\nimport { Config } from '@backstage/config';\nimport {\n  createCatalogWriteAction,\n  createCatalogRegisterAction,\n} from './catalog';\n\nimport { createDebugLogAction } from './debug';\nimport { createFetchPlainAction, createFetchTemplateAction } from './fetch';\nimport {\n  createFilesystemDeleteAction,\n  createFilesystemRenameAction,\n} from './filesystem';\nimport {\n  createPublishAzureAction,\n  createPublishBitbucketAction,\n  createPublishGithubAction,\n  createPublishGithubPullRequestAction,\n  createPublishGitlabAction,\n  createPublishGitlabMergeRequestAction,\n} from './publish';\nimport {\n  createGithubActionsDispatchAction,\n  createGithubWebhookAction,\n  createGithubIssuesLabelAction,\n} from './github';\nimport { TemplateFilter } from '../../../lib';\nimport { TemplateAction } from '../types';\n\n/**\n * The options passed to {@link createBuiltinActions}\n * @public\n */\nexport interface CreateBuiltInActionsOptions {\n  /**\n   * The {@link @backstage/backend-common#UrlReader} interface that will be used in the default actions.\n   */\n  reader: UrlReader;\n  /**\n   * The {@link @backstage/integrations#ScmIntegrations} that will be used in the default actions.\n   */\n  integrations: ScmIntegrations;\n  /**\n   * The {@link @backstage/catalog-client#CatalogApi} that will be used in the default actions.\n   */\n  catalogClient: CatalogApi;\n  /**\n   * The {@link @backstage/config#Config} that will be used in the default actions.\n   */\n  config: Config;\n  /**\n   * Additional custom filters that will be passed to the nunjucks template engine for use in\n   * Template Manifests and also template skeleton files when using `fetch:template`.\n   */\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n}\n\n/**\n * A function to generate create a list of default actions that the scaffolder provides.\n * Is called internally in the default setup, but can be used when adding your own actions or overriding the default ones\n *\n * @public\n * @returns A list of actions that can be used in the scaffolder\n */\nexport const createBuiltinActions = (\n  options: CreateBuiltInActionsOptions,\n): TemplateAction<JsonObject>[] => {\n  const {\n    reader,\n    integrations,\n    catalogClient,\n    config,\n    additionalTemplateFilters,\n  } = options;\n\n  const githubCredentialsProvider: GithubCredentialsProvider =\n    DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n\n  const actions = [\n    createFetchPlainAction({\n      reader,\n      integrations,\n    }),\n    createFetchTemplateAction({\n      integrations,\n      reader,\n      additionalTemplateFilters,\n    }),\n    createPublishGithubAction({\n      integrations,\n      config,\n      githubCredentialsProvider,\n    }),\n    createPublishGithubPullRequestAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createPublishGitlabAction({\n      integrations,\n      config,\n    }),\n    createPublishGitlabMergeRequestAction({\n      integrations,\n    }),\n    createPublishBitbucketAction({\n      integrations,\n      config,\n    }),\n    createPublishAzureAction({\n      integrations,\n      config,\n    }),\n    createDebugLogAction(),\n    createCatalogRegisterAction({ catalogClient, integrations }),\n    createCatalogWriteAction(),\n    createFilesystemDeleteAction(),\n    createFilesystemRenameAction(),\n    createGithubActionsDispatchAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubWebhookAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubIssuesLabelAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n  ];\n\n  return actions as TemplateAction<JsonObject>[];\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { TemplateAction } from './types';\n\n/**\n * Registry of all registered template actions.\n * @public\n */\nexport class TemplateActionRegistry {\n  private readonly actions = new Map<string, TemplateAction<any>>();\n\n  register<TInput extends JsonObject>(action: TemplateAction<TInput>) {\n    if (this.actions.has(action.id)) {\n      throw new ConflictError(\n        `Template action with ID '${action.id}' has already been registered`,\n      );\n    }\n    this.actions.set(action.id, action);\n  }\n\n  get(actionId: string): TemplateAction<JsonObject> {\n    const action = this.actions.get(actionId);\n    if (!action) {\n      throw new NotFoundError(\n        `Template action with ID '${actionId}' is not registered.`,\n      );\n    }\n    return action;\n  }\n\n  list(): TemplateAction<JsonObject>[] {\n    return [...this.actions.values()];\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport {\n  SerializedTaskEvent,\n  SerializedTask,\n  TaskStatus,\n  TaskEventType,\n  TaskStore,\n  TaskStoreEmitOptions,\n  TaskStoreListEventsOptions,\n  TaskStoreCreateTaskOptions,\n  TaskStoreCreateTaskResult,\n} from './types';\nimport { DateTime } from 'luxon';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-scaffolder-backend',\n  'migrations',\n);\n\nexport type RawDbTaskRow = {\n  id: string;\n  spec: string;\n  status: TaskStatus;\n  last_heartbeat_at?: string;\n  created_at: string;\n  secrets?: string | null;\n};\n\nexport type RawDbTaskEventRow = {\n  id: number;\n  task_id: string;\n  body: string;\n  event_type: TaskEventType;\n  created_at: string;\n};\n\n/**\n * DatabaseTaskStore\n *\n * @public\n */\nexport type DatabaseTaskStoreOptions = {\n  database: Knex;\n};\n\n/**\n * DatabaseTaskStore\n *\n * @public\n */\nexport class DatabaseTaskStore implements TaskStore {\n  private readonly db: Knex;\n\n  static async create(\n    options: DatabaseTaskStoreOptions,\n  ): Promise<DatabaseTaskStore> {\n    await options.database.migrate.latest({\n      directory: migrationsDir,\n    });\n    return new DatabaseTaskStore(options);\n  }\n\n  private constructor(options: DatabaseTaskStoreOptions) {\n    this.db = options.database;\n  }\n\n  async getTask(taskId: string): Promise<SerializedTask> {\n    const [result] = await this.db<RawDbTaskRow>('tasks')\n      .where({ id: taskId })\n      .select();\n    if (!result) {\n      throw new NotFoundError(`No task with id '${taskId}' found`);\n    }\n    try {\n      const spec = JSON.parse(result.spec);\n      const secrets = result.secrets ? JSON.parse(result.secrets) : undefined;\n      return {\n        id: result.id,\n        spec,\n        status: result.status,\n        lastHeartbeatAt: result.last_heartbeat_at,\n        createdAt: result.created_at,\n        secrets,\n      };\n    } catch (error) {\n      throw new Error(`Failed to parse spec of task '${taskId}', ${error}`);\n    }\n  }\n\n  async createTask(\n    options: TaskStoreCreateTaskOptions,\n  ): Promise<TaskStoreCreateTaskResult> {\n    const taskId = uuid();\n    await this.db<RawDbTaskRow>('tasks').insert({\n      id: taskId,\n      spec: JSON.stringify(options.spec),\n      secrets: options.secrets ? JSON.stringify(options.secrets) : undefined,\n      status: 'open',\n    });\n    return { taskId };\n  }\n\n  async claimTask(): Promise<SerializedTask | undefined> {\n    return this.db.transaction(async tx => {\n      const [task] = await tx<RawDbTaskRow>('tasks')\n        .where({\n          status: 'open',\n        })\n        .limit(1)\n        .select();\n\n      if (!task) {\n        return undefined;\n      }\n\n      const updateCount = await tx<RawDbTaskRow>('tasks')\n        .where({ id: task.id, status: 'open' })\n        .update({\n          status: 'processing',\n          last_heartbeat_at: this.db.fn.now(),\n          // remove the secrets when moving moving to processing state.\n          secrets: null,\n        });\n\n      if (updateCount < 1) {\n        return undefined;\n      }\n\n      try {\n        const spec = JSON.parse(task.spec);\n        const secrets = task.secrets ? JSON.parse(task.secrets) : undefined;\n        return {\n          id: task.id,\n          spec,\n          status: 'processing',\n          lastHeartbeatAt: task.last_heartbeat_at,\n          createdAt: task.created_at,\n          secrets,\n        };\n      } catch (error) {\n        throw new Error(`Failed to parse spec of task '${task.id}', ${error}`);\n      }\n    });\n  }\n\n  async heartbeatTask(taskId: string): Promise<void> {\n    const updateCount = await this.db<RawDbTaskRow>('tasks')\n      .where({ id: taskId, status: 'processing' })\n      .update({\n        last_heartbeat_at: this.db.fn.now(),\n      });\n    if (updateCount === 0) {\n      throw new ConflictError(`No running task with taskId ${taskId} found`);\n    }\n  }\n\n  async listStaleTasks({ timeoutS }: { timeoutS: number }): Promise<{\n    tasks: { taskId: string }[];\n  }> {\n    const rawRows = await this.db<RawDbTaskRow>('tasks')\n      .where('status', 'processing')\n      .andWhere(\n        'last_heartbeat_at',\n        '<=',\n        this.db.client.config.client.includes('sqlite3')\n          ? this.db.raw(`datetime('now', ?)`, [`-${timeoutS} seconds`])\n          : this.db.raw(`dateadd('second', ?, ?)`, [\n              `-${timeoutS}`,\n              this.db.fn.now(),\n            ]),\n      );\n    const tasks = rawRows.map(row => ({\n      taskId: row.id,\n    }));\n    return { tasks };\n  }\n\n  async completeTask({\n    taskId,\n    status,\n    eventBody,\n  }: {\n    taskId: string;\n    status: TaskStatus;\n    eventBody: JsonObject;\n  }): Promise<void> {\n    let oldStatus: string;\n    if (status === 'failed' || status === 'completed') {\n      oldStatus = 'processing';\n    } else {\n      throw new Error(\n        `Invalid status update of run '${taskId}' to status '${status}'`,\n      );\n    }\n    await this.db.transaction(async tx => {\n      const [task] = await tx<RawDbTaskRow>('tasks')\n        .where({\n          id: taskId,\n        })\n        .limit(1)\n        .select();\n\n      if (!task) {\n        throw new Error(`No task with taskId ${taskId} found`);\n      }\n      if (task.status !== oldStatus) {\n        throw new ConflictError(\n          `Refusing to update status of run '${taskId}' to status '${status}' ` +\n            `as it is currently '${task.status}', expected '${oldStatus}'`,\n        );\n      }\n      const updateCount = await tx<RawDbTaskRow>('tasks')\n        .where({\n          id: taskId,\n          status: oldStatus,\n        })\n        .update({\n          status,\n        });\n\n      if (updateCount !== 1) {\n        throw new ConflictError(\n          `Failed to update status to '${status}' for taskId ${taskId}`,\n        );\n      }\n\n      await tx<RawDbTaskEventRow>('task_events').insert({\n        task_id: taskId,\n        event_type: 'completion',\n        body: JSON.stringify(eventBody),\n      });\n    });\n  }\n\n  async emitLogEvent(\n    options: TaskStoreEmitOptions<{ message: string } & JsonObject>,\n  ): Promise<void> {\n    const { taskId, body } = options;\n    const serializedBody = JSON.stringify(body);\n    await this.db<RawDbTaskEventRow>('task_events').insert({\n      task_id: taskId,\n      event_type: 'log',\n      body: serializedBody,\n    });\n  }\n\n  async listEvents({\n    taskId,\n    after,\n  }: TaskStoreListEventsOptions): Promise<{ events: SerializedTaskEvent[] }> {\n    const rawEvents = await this.db<RawDbTaskEventRow>('task_events')\n      .where({\n        task_id: taskId,\n      })\n      .andWhere(builder => {\n        if (typeof after === 'number') {\n          builder.where('id', '>', after).orWhere('event_type', 'completion');\n        }\n      })\n      .orderBy('id')\n      .select();\n\n    const events = rawEvents.map(event => {\n      try {\n        const body = JSON.parse(event.body) as JsonObject;\n        return {\n          id: Number(event.id),\n          taskId,\n          body,\n          type: event.event_type,\n          createdAt:\n            typeof event.created_at === 'string'\n              ? DateTime.fromSQL(event.created_at, { zone: 'UTC' }).toISO()\n              : event.created_at,\n        };\n      } catch (error) {\n        throw new Error(\n          `Failed to parse event body from event taskId=${taskId} id=${event.id}, ${error}`,\n        );\n      }\n    });\n    return { events };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonObject, Observable } from '@backstage/types';\nimport ObservableImpl from 'zen-observable';\nimport { TaskSpec } from '@backstage/plugin-scaffolder-common';\nimport { Logger } from 'winston';\nimport {\n  TaskCompletionState,\n  TaskContext,\n  TaskSecrets,\n  TaskStore,\n  TaskBroker,\n  SerializedTaskEvent,\n  SerializedTask,\n} from './types';\nimport { TaskBrokerDispatchOptions } from '.';\n\n/**\n * TaskManager\n *\n * @public\n */\nexport class TaskManager implements TaskContext {\n  private isDone = false;\n\n  private heartbeatTimeoutId?: ReturnType<typeof setInterval>;\n\n  static create(task: CurrentClaimedTask, storage: TaskStore, logger: Logger) {\n    const agent = new TaskManager(task, storage, logger);\n    agent.startTimeout();\n    return agent;\n  }\n\n  // Runs heartbeat internally\n  private constructor(\n    private readonly task: CurrentClaimedTask,\n    private readonly storage: TaskStore,\n    private readonly logger: Logger,\n  ) {}\n\n  get spec() {\n    return this.task.spec;\n  }\n\n  get secrets() {\n    return this.task.secrets;\n  }\n\n  async getWorkspaceName() {\n    return this.task.taskId;\n  }\n\n  get done() {\n    return this.isDone;\n  }\n\n  async emitLog(message: string, logMetadata?: JsonObject): Promise<void> {\n    await this.storage.emitLogEvent({\n      taskId: this.task.taskId,\n      body: { message, ...logMetadata },\n    });\n  }\n\n  async complete(\n    result: TaskCompletionState,\n    metadata?: JsonObject,\n  ): Promise<void> {\n    await this.storage.completeTask({\n      taskId: this.task.taskId,\n      status: result === 'failed' ? 'failed' : 'completed',\n      eventBody: {\n        message: `Run completed with status: ${result}`,\n        ...metadata,\n      },\n    });\n    this.isDone = true;\n    if (this.heartbeatTimeoutId) {\n      clearTimeout(this.heartbeatTimeoutId);\n    }\n  }\n\n  private startTimeout() {\n    this.heartbeatTimeoutId = setTimeout(async () => {\n      try {\n        await this.storage.heartbeatTask(this.task.taskId);\n        this.startTimeout();\n      } catch (error) {\n        this.isDone = true;\n\n        this.logger.error(\n          `Heartbeat for task ${this.task.taskId} failed`,\n          error,\n        );\n      }\n    }, 1000);\n  }\n}\n\n/**\n * Stores the state of the current claimed task passed to the TaskContext\n *\n * @public\n */\nexport interface CurrentClaimedTask {\n  /**\n   * The TaskSpec of the current claimed task.\n   */\n  spec: TaskSpec;\n  /**\n   * The uuid of the current claimed task.\n   */\n  taskId: string;\n  /**\n   * The secrets that are stored with the task.\n   */\n  secrets?: TaskSecrets;\n}\n\nfunction defer() {\n  let resolve = () => {};\n  const promise = new Promise<void>(_resolve => {\n    resolve = _resolve;\n  });\n  return { promise, resolve };\n}\n\nexport class StorageTaskBroker implements TaskBroker {\n  constructor(\n    private readonly storage: TaskStore,\n    private readonly logger: Logger,\n  ) {}\n  private deferredDispatch = defer();\n\n  /**\n   * {@inheritdoc TaskBroker.claim}\n   */\n  async claim(): Promise<TaskContext> {\n    for (;;) {\n      const pendingTask = await this.storage.claimTask();\n      if (pendingTask) {\n        return TaskManager.create(\n          {\n            taskId: pendingTask.id,\n            spec: pendingTask.spec,\n            secrets: pendingTask.secrets,\n          },\n          this.storage,\n          this.logger,\n        );\n      }\n\n      await this.waitForDispatch();\n    }\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.dispatch}\n   */\n  async dispatch(\n    options: TaskBrokerDispatchOptions,\n  ): Promise<{ taskId: string }> {\n    const taskRow = await this.storage.createTask(options);\n    this.signalDispatch();\n    return {\n      taskId: taskRow.taskId,\n    };\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.get}\n   */\n  async get(taskId: string): Promise<SerializedTask> {\n    return this.storage.getTask(taskId);\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.event$}\n   */\n  event$(options: {\n    taskId: string;\n    after?: number;\n  }): Observable<{ events: SerializedTaskEvent[] }> {\n    return new ObservableImpl(observer => {\n      const { taskId } = options;\n\n      let after = options.after;\n      let cancelled = false;\n\n      (async () => {\n        while (!cancelled) {\n          const result = await this.storage.listEvents({ taskId, after });\n          const { events } = result;\n          if (events.length) {\n            after = events[events.length - 1].id;\n            observer.next(result);\n          }\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      })();\n\n      return () => {\n        cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.vacuumTasks}\n   */\n  async vacuumTasks(options: { timeoutS: number }): Promise<void> {\n    const { tasks } = await this.storage.listStaleTasks(options);\n    await Promise.all(\n      tasks.map(async task => {\n        try {\n          await this.storage.completeTask({\n            taskId: task.taskId,\n            status: 'failed',\n            eventBody: {\n              message:\n                'The task was cancelled because the task worker lost connection to the task broker',\n            },\n          });\n        } catch (error) {\n          this.logger.warn(`Failed to cancel task '${task.taskId}', ${error}`);\n        }\n      }),\n    );\n  }\n\n  private waitForDispatch() {\n    return this.deferredDispatch.promise;\n  }\n\n  private signalDispatch() {\n    this.deferredDispatch.resolve();\n    this.deferredDispatch = defer();\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isArray } from 'lodash';\n\n/**\n * Returns true if the input is not `false`, `undefined`, `null`, `\"\"`, `0`, or\n * `[]`. This behavior is based on the behavior of handlebars, see\n * https://handlebarsjs.com/guide/builtin-helpers.html#if\n */\nexport function isTruthy(value: any): boolean {\n  return isArray(value) ? value.length > 0 : !!value;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrations } from '@backstage/integration';\nimport { TaskContext, WorkflowResponse, WorkflowRunner } from './types';\nimport * as winston from 'winston';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport nunjucks from 'nunjucks';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { InputError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { isTruthy } from './helper';\nimport { validate as validateJsonSchema } from 'jsonschema';\nimport { parseRepoUrl } from '../actions/builtin/publish/util';\nimport { TemplateActionRegistry } from '../actions';\nimport {\n  TemplateFilter,\n  SecureTemplater,\n  SecureTemplateRenderer,\n} from '../../lib/templating/SecureTemplater';\nimport {\n  TaskSpec,\n  TaskSpecV1beta3,\n  TaskStep,\n} from '@backstage/plugin-scaffolder-common';\n\ntype NunjucksWorkflowRunnerOptions = {\n  workingDirectory: string;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  logger: winston.Logger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n};\n\ntype TemplateContext = {\n  parameters: JsonObject;\n  steps: {\n    [stepName: string]: { output: { [outputName: string]: JsonValue } };\n  };\n  secrets?: Record<string, string>;\n};\n\nconst isValidTaskSpec = (taskSpec: TaskSpec): taskSpec is TaskSpecV1beta3 => {\n  return taskSpec.apiVersion === 'scaffolder.backstage.io/v1beta3';\n};\n\nconst createStepLogger = ({\n  task,\n  step,\n}: {\n  task: TaskContext;\n  step: TaskStep;\n}) => {\n  const metadata = { stepId: step.id };\n  const taskLogger = winston.createLogger({\n    level: process.env.LOG_LEVEL || 'info',\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.timestamp(),\n      winston.format.simple(),\n    ),\n    defaultMeta: {},\n  });\n\n  const streamLogger = new PassThrough();\n  streamLogger.on('data', async data => {\n    const message = data.toString().trim();\n    if (message?.length > 1) {\n      await task.emitLog(message, metadata);\n    }\n  });\n\n  taskLogger.add(new winston.transports.Stream({ stream: streamLogger }));\n\n  return { taskLogger, streamLogger };\n};\n\nexport class NunjucksWorkflowRunner implements WorkflowRunner {\n  constructor(private readonly options: NunjucksWorkflowRunnerOptions) {}\n\n  private isSingleTemplateString(input: string) {\n    const { parser, nodes } = nunjucks as unknown as {\n      parser: {\n        parse(\n          template: string,\n          ctx: object,\n          options: nunjucks.ConfigureOptions,\n        ): { children: { children?: unknown[] }[] };\n      };\n      nodes: { TemplateData: Function };\n    };\n\n    const parsed = parser.parse(\n      input,\n      {},\n      {\n        autoescape: false,\n        tags: {\n          variableStart: '${{',\n          variableEnd: '}}',\n        },\n      },\n    );\n\n    return (\n      parsed.children.length === 1 &&\n      !(parsed.children[0]?.children?.[0] instanceof nodes.TemplateData)\n    );\n  }\n\n  private render<T>(\n    input: T,\n    context: TemplateContext,\n    renderTemplate: SecureTemplateRenderer,\n  ): T {\n    return JSON.parse(JSON.stringify(input), (_key, value) => {\n      try {\n        if (typeof value === 'string') {\n          try {\n            if (this.isSingleTemplateString(value)) {\n              // Lets convert ${{ parameters.bob }} to ${{ (parameters.bob) | dump }} so we can keep the input type\n              const wrappedDumped = value.replace(\n                /\\${{(.+)}}/g,\n                '${{ ( $1 ) | dump }}',\n              );\n\n              // Run the templating\n              const templated = renderTemplate(wrappedDumped, context);\n\n              // If there's an empty string returned, then it's undefined\n              if (templated === '') {\n                return undefined;\n              }\n\n              // Reparse the dumped string\n              return JSON.parse(templated);\n            }\n          } catch (ex) {\n            this.options.logger.error(\n              `Failed to parse template string: ${value} with error ${ex.message}`,\n            );\n          }\n\n          // Fallback to default behaviour\n          const templated = renderTemplate(value, context);\n\n          if (templated === '') {\n            return undefined;\n          }\n\n          return templated;\n        }\n      } catch {\n        return value;\n      }\n      return value;\n    });\n  }\n\n  async execute(task: TaskContext): Promise<WorkflowResponse> {\n    if (!isValidTaskSpec(task.spec)) {\n      throw new InputError(\n        'Wrong template version executed with the workflow engine',\n      );\n    }\n    const workspacePath = path.join(\n      this.options.workingDirectory,\n      await task.getWorkspaceName(),\n    );\n\n    const { integrations } = this.options;\n    const renderTemplate = await SecureTemplater.loadRenderer({\n      // TODO(blam): let's work out how we can deprecate this.\n      // We shouldn't really need to be exposing these now we can deal with\n      // objects in the params block.\n      // Maybe we can expose a new RepoUrlPicker with secrets for V3 that provides an object already.\n      parseRepoUrl(url: string) {\n        return parseRepoUrl(url, integrations);\n      },\n      additionalTemplateFilters: this.options.additionalTemplateFilters,\n    });\n\n    try {\n      await fs.ensureDir(workspacePath);\n      await task.emitLog(\n        `Starting up task with ${task.spec.steps.length} steps`,\n      );\n\n      const context: TemplateContext = {\n        parameters: task.spec.parameters,\n        steps: {},\n      };\n\n      for (const step of task.spec.steps) {\n        try {\n          if (step.if) {\n            const ifResult = await this.render(\n              step.if,\n              context,\n              renderTemplate,\n            );\n            if (!isTruthy(ifResult)) {\n              await task.emitLog(\n                `Skipping step ${step.id} because it's if condition was false`,\n                { stepId: step.id, status: 'skipped' },\n              );\n              continue;\n            }\n          }\n\n          await task.emitLog(`Beginning step ${step.name}`, {\n            stepId: step.id,\n            status: 'processing',\n          });\n\n          const action = this.options.actionRegistry.get(step.action);\n          const { taskLogger, streamLogger } = createStepLogger({ task, step });\n\n          // Secrets are only passed when templating the input to actions for security reasons\n          const input =\n            (step.input &&\n              this.render(\n                step.input,\n                { ...context, secrets: task.secrets ?? {} },\n                renderTemplate,\n              )) ??\n            {};\n\n          if (action.schema?.input) {\n            const validateResult = validateJsonSchema(\n              input,\n              action.schema.input,\n            );\n            if (!validateResult.valid) {\n              const errors = validateResult.errors.join(', ');\n              throw new InputError(\n                `Invalid input passed to action ${action.id}, ${errors}`,\n              );\n            }\n          }\n\n          const tmpDirs = new Array<string>();\n          const stepOutput: { [outputName: string]: JsonValue } = {};\n\n          await action.handler({\n            input,\n            secrets: task.secrets ?? {},\n            logger: taskLogger,\n            logStream: streamLogger,\n            workspacePath,\n            createTemporaryDirectory: async () => {\n              const tmpDir = await fs.mkdtemp(\n                `${workspacePath}_step-${step.id}-`,\n              );\n              tmpDirs.push(tmpDir);\n              return tmpDir;\n            },\n            output(name: string, value: JsonValue) {\n              stepOutput[name] = value;\n            },\n            templateInfo: task.spec.templateInfo,\n          });\n\n          // Remove all temporary directories that were created when executing the action\n          for (const tmpDir of tmpDirs) {\n            await fs.remove(tmpDir);\n          }\n\n          context.steps[step.id] = { output: stepOutput };\n\n          await task.emitLog(`Finished step ${step.name}`, {\n            stepId: step.id,\n            status: 'completed',\n          });\n        } catch (err) {\n          await task.emitLog(String(err.stack), {\n            stepId: step.id,\n            status: 'failed',\n          });\n          throw err;\n        }\n      }\n\n      const output = this.render(task.spec.output, context, renderTemplate);\n\n      return { output };\n    } finally {\n      if (workspacePath) {\n        await fs.remove(workspacePath);\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskContext, TaskBroker, WorkflowRunner } from './types';\nimport { NunjucksWorkflowRunner } from './NunjucksWorkflowRunner';\nimport { Logger } from 'winston';\nimport { TemplateActionRegistry } from '../actions';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { assertError } from '@backstage/errors';\nimport { TemplateFilter } from '../../lib/templating/SecureTemplater';\n\n/**\n * TaskWorkerOptions\n *\n * @public\n */\nexport type TaskWorkerOptions = {\n  taskBroker: TaskBroker;\n  runners: {\n    workflowRunner: WorkflowRunner;\n  };\n};\n\n/**\n * CreateWorkerOptions\n *\n * @public\n */\nexport type CreateWorkerOptions = {\n  taskBroker: TaskBroker;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  workingDirectory: string;\n  logger: Logger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n};\n\n/**\n * TaskWorker\n *\n * @public\n */\nexport class TaskWorker {\n  private constructor(private readonly options: TaskWorkerOptions) {}\n\n  static async create(options: CreateWorkerOptions): Promise<TaskWorker> {\n    const {\n      taskBroker,\n      logger,\n      actionRegistry,\n      integrations,\n      workingDirectory,\n      additionalTemplateFilters,\n    } = options;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      actionRegistry,\n      integrations,\n      logger,\n      workingDirectory,\n      additionalTemplateFilters,\n    });\n\n    return new TaskWorker({\n      taskBroker: taskBroker,\n      runners: { workflowRunner },\n    });\n  }\n\n  start() {\n    (async () => {\n      for (;;) {\n        const task = await this.options.taskBroker.claim();\n        await this.runOneTask(task);\n      }\n    })();\n  }\n\n  async runOneTask(task: TaskContext) {\n    try {\n      if (task.spec.apiVersion !== 'scaffolder.backstage.io/v1beta3') {\n        throw new Error(\n          `Unsupported Template apiVersion ${task.spec.apiVersion}`,\n        );\n      }\n\n      const { output } = await this.options.runners.workflowRunner.execute(\n        task,\n      );\n\n      await task.complete('completed', { output });\n    } catch (error) {\n      assertError(error);\n      await task.complete('failed', {\n        error: { name: error.name, message: error.message },\n      });\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  Entity,\n  ANNOTATION_LOCATION,\n  parseLocationRef,\n  ANNOTATION_SOURCE_LOCATION,\n  CompoundEntityRef,\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, InputError, NotFoundError } from '@backstage/errors';\nimport { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport { Logger } from 'winston';\n\nexport async function getWorkingDirectory(\n  config: Config,\n  logger: Logger,\n): Promise<string> {\n  if (!config.has('backend.workingDirectory')) {\n    return os.tmpdir();\n  }\n\n  const workingDirectory = config.getString('backend.workingDirectory');\n  try {\n    // Check if working directory exists and is writable\n    await fs.access(workingDirectory, fs.constants.F_OK | fs.constants.W_OK);\n    logger.info(`using working directory: ${workingDirectory}`);\n  } catch (err) {\n    assertError(err);\n    logger.error(\n      `working directory ${workingDirectory} ${\n        err.code === 'ENOENT' ? 'does not exist' : 'is not writable'\n      }`,\n    );\n    throw err;\n  }\n  return workingDirectory;\n}\n\n/**\n * Gets the base URL of the entity location that points to the source location\n * of the entity description within a repo. If there is not source location\n * or if it has an invalid type, undefined will be returned instead.\n *\n * For file locations this will return a `file://` URL.\n */\nexport function getEntityBaseUrl(entity: Entity): string | undefined {\n  let location = entity.metadata.annotations?.[ANNOTATION_SOURCE_LOCATION];\n  if (!location) {\n    location = entity.metadata.annotations?.[ANNOTATION_LOCATION];\n  }\n  if (!location) {\n    return undefined;\n  }\n\n  const { type, target } = parseLocationRef(location);\n  if (type === 'url') {\n    return target;\n  } else if (type === 'file') {\n    return `file://${target}`;\n  }\n\n  // Only url and file location are handled, as we otherwise don't know if\n  // what the url is pointing to makes sense to use as a baseUrl\n  return undefined;\n}\n\n/**\n * Will use the provided CatalogApi to go find the given template entity with an additional token.\n * Returns the matching template, or throws a NotFoundError if no such template existed.\n */\nexport async function findTemplate(options: {\n  entityRef: CompoundEntityRef;\n  token?: string;\n  catalogApi: CatalogApi;\n}): Promise<TemplateEntityV1beta3> {\n  const { entityRef, token, catalogApi } = options;\n\n  if (entityRef.namespace.toLocaleLowerCase('en-US') !== DEFAULT_NAMESPACE) {\n    throw new InputError(\n      `Invalid namespace, only '${DEFAULT_NAMESPACE}' namespace is supported`,\n    );\n  }\n  if (entityRef.kind.toLocaleLowerCase('en-US') !== 'template') {\n    throw new InputError(`Invalid kind, only 'Template' kind is supported`);\n  }\n\n  const template = await catalogApi.getEntityByRef(entityRef, { token });\n  if (!template) {\n    throw new NotFoundError(\n      `Template ${stringifyEntityRef(entityRef)} not found`,\n    );\n  }\n\n  return template as TemplateEntityV1beta3;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PluginDatabaseManager, UrlReader } from '@backstage/backend-common';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport {\n  TemplateEntityV1beta3,\n  TaskSpec,\n} from '@backstage/plugin-scaffolder-common';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { validate } from 'jsonschema';\nimport { Logger } from 'winston';\nimport { TemplateFilter } from '../lib';\nimport {\n  createBuiltinActions,\n  DatabaseTaskStore,\n  TaskBroker,\n  TaskWorker,\n  TemplateAction,\n  TemplateActionRegistry,\n} from '../scaffolder';\nimport { StorageTaskBroker } from '../scaffolder/tasks/StorageTaskBroker';\nimport { getEntityBaseUrl, getWorkingDirectory, findTemplate } from './helpers';\n\n/**\n * RouterOptions\n *\n * @public\n */\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n  reader: UrlReader;\n  database: PluginDatabaseManager;\n  catalogClient: CatalogApi;\n  actions?: TemplateAction<any>[];\n  taskWorkers?: number;\n  taskBroker?: TaskBroker;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n}\n\nfunction isSupportedTemplate(entity: TemplateEntityV1beta3) {\n  return entity.apiVersion === 'scaffolder.backstage.io/v1beta3';\n}\n\n/**\n * A method to create a router for the scaffolder backend plugin.\n * @public\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n  router.use(express.json());\n\n  const {\n    logger: parentLogger,\n    config,\n    reader,\n    database,\n    catalogClient,\n    actions,\n    taskWorkers,\n    additionalTemplateFilters,\n  } = options;\n\n  const logger = parentLogger.child({ plugin: 'scaffolder' });\n  const workingDirectory = await getWorkingDirectory(config, logger);\n  const integrations = ScmIntegrations.fromConfig(config);\n  let taskBroker: TaskBroker;\n\n  if (!options.taskBroker) {\n    const databaseTaskStore = await DatabaseTaskStore.create({\n      database: await database.getClient(),\n    });\n    taskBroker = new StorageTaskBroker(databaseTaskStore, logger);\n  } else {\n    taskBroker = options.taskBroker;\n  }\n\n  const actionRegistry = new TemplateActionRegistry();\n\n  const workers = [];\n  for (let i = 0; i < (taskWorkers || 1); i++) {\n    const worker = await TaskWorker.create({\n      taskBroker,\n      actionRegistry,\n      integrations,\n      logger,\n      workingDirectory,\n      additionalTemplateFilters,\n    });\n    workers.push(worker);\n  }\n\n  const actionsToRegister = Array.isArray(actions)\n    ? actions\n    : createBuiltinActions({\n        integrations,\n        catalogClient,\n        reader,\n        config,\n        additionalTemplateFilters,\n      });\n\n  actionsToRegister.forEach(action => actionRegistry.register(action));\n  workers.forEach(worker => worker.start());\n\n  router\n    .get(\n      '/v2/templates/:namespace/:kind/:name/parameter-schema',\n      async (req, res) => {\n        const { namespace, kind, name } = req.params;\n        const template = await findTemplate({\n          catalogApi: catalogClient,\n          entityRef: { kind, namespace, name },\n          token: getBearerToken(req.headers.authorization),\n        });\n        if (isSupportedTemplate(template)) {\n          const parameters = [template.spec.parameters ?? []].flat();\n          res.json({\n            title: template.metadata.title ?? template.metadata.name,\n            steps: parameters.map(schema => ({\n              title: schema.title ?? 'Fill in template parameters',\n              schema,\n            })),\n          });\n        } else {\n          throw new InputError(\n            `Unsupported apiVersion field in schema entity, ${\n              (template as Entity).apiVersion\n            }`,\n          );\n        }\n      },\n    )\n    .get('/v2/actions', async (_req, res) => {\n      const actionsList = actionRegistry.list().map(action => {\n        return {\n          id: action.id,\n          description: action.description,\n          schema: action.schema,\n        };\n      });\n      res.json(actionsList);\n    })\n    .post('/v2/tasks', async (req, res) => {\n      const templateRef: string = req.body.templateRef;\n      const { kind, namespace, name } = parseEntityRef(templateRef, {\n        defaultKind: 'template',\n      });\n      const values = req.body.values;\n      const token = getBearerToken(req.headers.authorization);\n      const template = await findTemplate({\n        catalogApi: catalogClient,\n        entityRef: { kind, namespace, name },\n        token: getBearerToken(req.headers.authorization),\n      });\n\n      if (!isSupportedTemplate(template)) {\n        throw new InputError(\n          `Unsupported apiVersion field in schema entity, ${\n            (template as Entity).apiVersion\n          }`,\n        );\n      }\n\n      for (const parameters of [template.spec.parameters ?? []].flat()) {\n        const result = validate(values, parameters);\n        if (!result.valid) {\n          res.status(400).json({ errors: result.errors });\n          return;\n        }\n      }\n\n      const baseUrl = getEntityBaseUrl(template);\n\n      const taskSpec: TaskSpec = {\n        apiVersion: template.apiVersion,\n        steps: template.spec.steps.map((step, index) => ({\n          ...step,\n          id: step.id ?? `step-${index + 1}`,\n          name: step.name ?? step.action,\n        })),\n        output: template.spec.output ?? {},\n        parameters: values,\n        templateInfo: {\n          entityRef: stringifyEntityRef({\n            kind,\n            namespace,\n            name: template.metadata?.name,\n          }),\n          baseUrl,\n        },\n      };\n\n      const result = await taskBroker.dispatch({\n        spec: taskSpec,\n        secrets: {\n          ...req.body.secrets,\n          backstageToken: token,\n        },\n      });\n\n      res.status(201).json({ id: result.taskId });\n    })\n    .get('/v2/tasks/:taskId', async (req, res) => {\n      const { taskId } = req.params;\n      const task = await taskBroker.get(taskId);\n      if (!task) {\n        throw new NotFoundError(`Task with id ${taskId} does not exist`);\n      }\n      // Do not disclose secrets\n      delete task.secrets;\n      res.status(200).json(task);\n    })\n    .get('/v2/tasks/:taskId/eventstream', async (req, res) => {\n      const { taskId } = req.params;\n      const after =\n        req.query.after !== undefined ? Number(req.query.after) : undefined;\n\n      logger.debug(`Event stream observing taskId '${taskId}' opened`);\n\n      // Mandatory headers and http status to keep connection open\n      res.writeHead(200, {\n        Connection: 'keep-alive',\n        'Cache-Control': 'no-cache',\n        'Content-Type': 'text/event-stream',\n      });\n\n      // After client opens connection send all events as string\n      const subscription = taskBroker.event$({ taskId, after }).subscribe({\n        error: error => {\n          logger.error(\n            `Received error from event stream when observing taskId '${taskId}', ${error}`,\n          );\n        },\n        next: ({ events }) => {\n          let shouldUnsubscribe = false;\n          for (const event of events) {\n            res.write(\n              `event: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`,\n            );\n            if (event.type === 'completion') {\n              shouldUnsubscribe = true;\n            }\n          }\n          // res.flush() is only available with the compression middleware\n          res.flush?.();\n          if (shouldUnsubscribe) subscription.unsubscribe();\n        },\n      });\n\n      // When client closes connection we update the clients list\n      // avoiding the disconnected one\n      req.on('close', () => {\n        subscription.unsubscribe();\n        logger.debug(`Event stream observing taskId '${taskId}' closed`);\n      });\n    })\n    .get('/v2/tasks/:taskId/events', async (req, res) => {\n      const { taskId } = req.params;\n      const after = Number(req.query.after) || undefined;\n\n      // cancel the request after 30 seconds. this aligns with the recommendations of RFC 6202.\n      const timeout = setTimeout(() => {\n        res.json([]);\n      }, 30_000);\n\n      // Get all known events after an id (always includes the completion event) and return the first callback\n      const subscription = taskBroker.event$({ taskId, after }).subscribe({\n        error: error => {\n          logger.error(\n            `Received error from event stream when observing taskId '${taskId}', ${error}`,\n          );\n        },\n        next: ({ events }) => {\n          clearTimeout(timeout);\n          subscription.unsubscribe();\n          res.json(events);\n        },\n      });\n\n      // When client closes connection we update the clients list\n      // avoiding the disconnected one\n      req.on('close', () => {\n        subscription.unsubscribe();\n        clearTimeout(timeout);\n      });\n    });\n\n  const app = express();\n  app.set('logger', logger);\n  app.use('/', router);\n\n  return app;\n}\n\nfunction getBearerToken(header?: string): string | undefined {\n  return header?.match(/Bearer\\s+(\\S+)/i)?.[1];\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  getCompoundEntityRef,\n  parseEntityRef,\n  RELATION_OWNED_BY,\n  RELATION_OWNER_OF,\n} from '@backstage/catalog-model';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport {\n  TemplateEntityV1beta3,\n  templateEntityV1beta3Validator,\n} from '@backstage/plugin-scaffolder-common';\n\n/** @public */\nexport class ScaffolderEntitiesProcessor implements CatalogProcessor {\n  getProcessorName(): string {\n    return 'ScaffolderEntitiesProcessor';\n  }\n\n  private readonly validators = [templateEntityV1beta3Validator];\n\n  async validateEntityKind(entity: Entity): Promise<boolean> {\n    for (const validator of this.validators) {\n      if (await validator.check(entity)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    _location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const selfRef = getCompoundEntityRef(entity);\n\n    if (\n      entity.apiVersion === 'scaffolder.backstage.io/v1beta3' &&\n      entity.kind === 'Template'\n    ) {\n      const template = entity as TemplateEntityV1beta3;\n\n      const target = template.spec.owner;\n      if (target) {\n        const targetRef = parseEntityRef(target, {\n          defaultKind: 'Group',\n          defaultNamespace: selfRef.namespace,\n        });\n        emit(\n          processingResult.relation({\n            source: selfRef,\n            type: RELATION_OWNED_BY,\n            target: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n          }),\n        );\n        emit(\n          processingResult.relation({\n            source: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n            type: RELATION_OWNER_OF,\n            target: selfRef,\n          }),\n        );\n      }\n    }\n\n    return entity;\n  }\n}\n"],"names":["InputError","stringifyEntityRef","fs","resolveSafeChildPath","yaml","relative","readdir","join","stat","path","VM","resolvePackagePath","globby","extname","isBinaryFile","PassThrough","spawn","Git","assertError","normalizePath","joinPath","isChildPath","getPersonalAccessTokenHandler","WebApi","fetch","dirname","DefaultGithubCredentialsProvider","Octokit","CustomErrorBase","createPullRequest","zipObject","Gitlab","readFile","emitterEventNames","ConflictError","NotFoundError","uuid","DateTime","ObservableImpl","isArray","winston","nunjucks","validateJsonSchema","errors","os","ANNOTATION_SOURCE_LOCATION","ANNOTATION_LOCATION","parseLocationRef","DEFAULT_NAMESPACE","Router","express","ScmIntegrations","parseEntityRef","validate","templateEntityV1beta3Validator","getCompoundEntityRef","processingResult","RELATION_OWNED_BY","RELATION_OWNER_OF"],"mappings":"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"}