{"version":3,"file":"index.cjs.js","sources":["../src/providers/atlassian/strategy.ts","../src/lib/oauth/helpers.ts","../src/lib/oauth/OAuthEnvironmentHandler.ts","../src/lib/flow/authFlowHelpers.ts","../src/providers/prepareBackstageIdentityResponse.ts","../src/lib/oauth/OAuthAdapter.ts","../src/lib/passport/PassportStrategyHelper.ts","../src/lib/catalog/CatalogIdentityClient.ts","../src/lib/catalog/helpers.ts","../src/providers/atlassian/provider.ts","../src/providers/auth0/strategy.ts","../src/providers/auth0/provider.ts","../src/providers/aws-alb/provider.ts","../src/providers/bitbucket/provider.ts","../src/providers/github/provider.ts","../src/providers/gitlab/provider.ts","../src/providers/google/provider.ts","../src/providers/microsoft/provider.ts","../src/providers/oauth2/provider.ts","../src/providers/oauth2-proxy/provider.ts","../src/providers/oidc/provider.ts","../src/providers/okta/provider.ts","../src/providers/onelogin/provider.ts","../src/providers/saml/provider.ts","../src/providers/gcp-iap/types.ts","../src/providers/gcp-iap/helpers.ts","../src/providers/gcp-iap/provider.ts","../src/providers/factories.ts","../src/identity/router.ts","../src/identity/TokenFactory.ts","../src/identity/DatabaseKeyStore.ts","../src/identity/MemoryKeyStore.ts","../src/identity/FirestoreKeyStore.ts","../src/identity/KeyStores.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport OAuth2Strategy, { InternalOAuthError } from 'passport-oauth2';\nimport { Profile } from 'passport';\n\ninterface ProfileResponse {\n  account_id: string;\n  email: string;\n  name: string;\n  picture: string;\n  nickname: string;\n}\n\ninterface AtlassianStrategyOptions {\n  clientID: string;\n  clientSecret: string;\n  callbackURL: string;\n  scope: string;\n}\n\nconst defaultScopes = ['offline_access', 'read:me'];\n\nexport default class AtlassianStrategy extends OAuth2Strategy {\n  private readonly profileURL: string;\n\n  constructor(\n    options: AtlassianStrategyOptions,\n    verify: OAuth2Strategy.VerifyFunction,\n  ) {\n    if (!options.scope) {\n      throw new TypeError('Atlassian requires a scope option');\n    }\n\n    const scopes = options.scope.split(' ');\n\n    const optionsWithURLs = {\n      ...options,\n      authorizationURL: `https://auth.atlassian.com/authorize`,\n      tokenURL: `https://auth.atlassian.com/oauth/token`,\n      scope: Array.from(new Set([...defaultScopes, ...scopes])),\n    };\n\n    super(optionsWithURLs, verify);\n    this.profileURL = 'https://api.atlassian.com/me';\n    this.name = 'atlassian';\n\n    this._oauth2.useAuthorizationHeaderforGET(true);\n  }\n\n  authorizationParams() {\n    return {\n      audience: 'api.atlassian.com',\n      prompt: 'consent',\n    };\n  }\n\n  userProfile(\n    accessToken: string,\n    done: (err?: Error | null, profile?: any) => void,\n  ): void {\n    this._oauth2.get(this.profileURL, accessToken, (err, body) => {\n      if (err) {\n        return done(\n          new InternalOAuthError(\n            'Failed to fetch user profile',\n            err.statusCode,\n          ),\n        );\n      }\n\n      if (!body) {\n        return done(\n          new Error('Failed to fetch user profile, body cannot be empty'),\n        );\n      }\n\n      try {\n        const json = typeof body !== 'string' ? body.toString() : body;\n        const profile = AtlassianStrategy.parse(json);\n        return done(null, profile);\n      } catch (e) {\n        return done(new Error('Failed to parse user profile'));\n      }\n    });\n  }\n\n  static parse(json: string): Profile {\n    const resp = JSON.parse(json) as ProfileResponse;\n\n    return {\n      id: resp.account_id,\n      provider: 'atlassian',\n      username: resp.nickname,\n      displayName: resp.name,\n      emails: [{ value: resp.email }],\n      photos: [{ value: resp.picture }],\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { OAuthState } from './types';\nimport pickBy from 'lodash/pickBy';\nimport { CookieConfigurer } from '../../providers/types';\n\nexport const readState = (stateString: string): OAuthState => {\n  const state = Object.fromEntries(\n    new URLSearchParams(Buffer.from(stateString, 'hex').toString('utf-8')),\n  );\n  if (\n    !state.nonce ||\n    !state.env ||\n    state.nonce?.length === 0 ||\n    state.env?.length === 0\n  ) {\n    throw Error(`Invalid state passed via request`);\n  }\n\n  return state as OAuthState;\n};\n\nexport const encodeState = (state: OAuthState): string => {\n  const stateString = new URLSearchParams(\n    pickBy<string>(state, value => value !== undefined),\n  ).toString();\n\n  return Buffer.from(stateString, 'utf-8').toString('hex');\n};\n\nexport const verifyNonce = (req: express.Request, providerId: string) => {\n  const cookieNonce = req.cookies[`${providerId}-nonce`];\n  const state: OAuthState = readState(req.query.state?.toString() ?? '');\n  const stateNonce = state.nonce;\n\n  if (!cookieNonce) {\n    throw new Error('Auth response is missing cookie nonce');\n  }\n  if (stateNonce.length === 0) {\n    throw new Error('Auth response is missing state nonce');\n  }\n  if (cookieNonce !== stateNonce) {\n    throw new Error('Invalid nonce');\n  }\n};\n\nexport const defaultCookieConfigurer: CookieConfigurer = ({\n  callbackUrl,\n  providerId,\n}) => {\n  const { hostname: domain, pathname, protocol } = new URL(callbackUrl);\n  const secure = protocol === 'https:';\n\n  // If the provider supports callbackUrls, the pathname will\n  // contain the complete path to the frame handler so we need\n  // to slice off the trailing part of the path.\n  const path = pathname.endsWith(`${providerId}/handler/frame`)\n    ? pathname.slice(0, -'/handler/frame'.length)\n    : `${pathname}/${providerId}`;\n\n  return { domain, path, secure };\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { Config } from '@backstage/config';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { readState } from './helpers';\nimport { AuthProviderRouteHandlers } from '../../providers/types';\n\nexport class OAuthEnvironmentHandler implements AuthProviderRouteHandlers {\n  static mapConfig(\n    config: Config,\n    factoryFunc: (envConfig: Config) => AuthProviderRouteHandlers,\n  ) {\n    const envs = config.keys();\n    const handlers = new Map<string, AuthProviderRouteHandlers>();\n\n    for (const env of envs) {\n      const envConfig = config.getConfig(env);\n      const handler = factoryFunc(envConfig);\n      handlers.set(env, handler);\n    }\n\n    return new OAuthEnvironmentHandler(handlers);\n  }\n\n  constructor(\n    private readonly handlers: Map<string, AuthProviderRouteHandlers>,\n  ) {}\n\n  async start(req: express.Request, res: express.Response): Promise<void> {\n    const provider = this.getProviderForEnv(req);\n    await provider.start(req, res);\n  }\n\n  async frameHandler(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> {\n    const provider = this.getProviderForEnv(req);\n    await provider.frameHandler(req, res);\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    const provider = this.getProviderForEnv(req);\n    await provider.refresh?.(req, res);\n  }\n\n  async logout(req: express.Request, res: express.Response): Promise<void> {\n    const provider = this.getProviderForEnv(req);\n    await provider.logout?.(req, res);\n  }\n\n  private getRequestFromEnv(req: express.Request): string | undefined {\n    const reqEnv = req.query.env?.toString();\n    if (reqEnv) {\n      return reqEnv;\n    }\n    const stateParams = req.query.state?.toString();\n    if (!stateParams) {\n      return undefined;\n    }\n    const env = readState(stateParams).env;\n    return env;\n  }\n\n  private getProviderForEnv(req: express.Request): AuthProviderRouteHandlers {\n    const env: string | undefined = this.getRequestFromEnv(req);\n\n    if (!env) {\n      throw new InputError(`Must specify 'env' query to select environment`);\n    }\n\n    const handler = this.handlers.get(env);\n    if (!handler) {\n      throw new NotFoundError(\n        `No configuration available for the '${env}' environment of this provider.`,\n      );\n    }\n\n    return handler;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport crypto from 'crypto';\nimport { WebMessageResponse } from './types';\n\nexport const safelyEncodeURIComponent = (value: string) => {\n  // Note the g at the end of the regex; all occurrences of single quotes must\n  // be replaced, which encodeURIComponent does not do itself by default\n  return encodeURIComponent(value).replace(/'/g, '%27');\n};\n\nexport const postMessageResponse = (\n  res: express.Response,\n  appOrigin: string,\n  response: WebMessageResponse,\n) => {\n  const jsonData = JSON.stringify(response);\n  const base64Data = safelyEncodeURIComponent(jsonData);\n  const base64Origin = safelyEncodeURIComponent(appOrigin);\n\n  // NOTE: It is absolutely imperative that we use the safe encoder above, to\n  // be sure that the js code below does not allow the injection of malicious\n  // data.\n\n  // TODO: Make target app origin configurable globally\n\n  //\n  // postMessage fails silently if the targetOrigin is disallowed.\n  // So 2 postMessages are sent from the popup to the parent window.\n  // First, the origin being used to post the actual authorization response is\n  // shared with the parent window with a postMessage with targetOrigin '*'.\n  // Second, the actual authorization response is sent with the app origin\n  // as the targetOrigin.\n  // If the first message was received but the actual auth response was\n  // never received, the event listener can conclude that targetOrigin\n  // was disallowed, indicating potential misconfiguration.\n  //\n  const script = `\n    var authResponse = decodeURIComponent('${base64Data}');\n    var origin = decodeURIComponent('${base64Origin}');\n    var originInfo = {'type': 'config_info', 'targetOrigin': origin};\n    (window.opener || window.parent).postMessage(originInfo, '*');\n    (window.opener || window.parent).postMessage(JSON.parse(authResponse), origin);\n    setTimeout(() => {\n      window.close();\n    }, 100); // same as the interval of the core-app-api lib/loginPopup.ts (to address race conditions)\n  `;\n  const hash = crypto.createHash('sha256').update(script).digest('base64');\n\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Frame-Options', 'sameorigin');\n  res.setHeader('Content-Security-Policy', `script-src 'sha256-${hash}'`);\n  res.end(`<html><body><script>${script}</script></body></html>`);\n};\n\nexport const ensuresXRequestedWith = (req: express.Request) => {\n  const requiredHeader = req.header('X-Requested-With');\n  if (!requiredHeader || requiredHeader !== 'XMLHttpRequest') {\n    return false;\n  }\n  return true;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  BackstageIdentityResponse,\n  BackstageSignInResult,\n} from '@backstage/plugin-auth-node';\n\nfunction parseJwtPayload(token: string) {\n  const [_header, payload, _signature] = token.split('.');\n  return JSON.parse(Buffer.from(payload, 'base64').toString());\n}\n\n/**\n * Parses a Backstage-issued token and decorates the\n * {@link @backstage/plugin-auth-node#BackstageIdentityResponse} with identity information sourced from the\n * token.\n *\n * @public\n */\nexport function prepareBackstageIdentityResponse(\n  result: BackstageSignInResult,\n): BackstageIdentityResponse {\n  const { sub, ent } = parseJwtPayload(result.token);\n\n  const userEntityRef = stringifyEntityRef(\n    parseEntityRef(sub, {\n      defaultKind: 'user',\n      defaultNamespace: DEFAULT_NAMESPACE,\n    }),\n  );\n  return {\n    ...{\n      // TODO: idToken is for backwards compatibility and can be removed in the future\n      idToken: result.token,\n      ...result,\n    },\n    identity: {\n      type: 'user',\n      userEntityRef,\n      ownershipEntityRefs: ent ?? [],\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express, { CookieOptions } from 'express';\nimport crypto from 'crypto';\nimport { URL } from 'url';\nimport {\n  DEFAULT_NAMESPACE,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  BackstageIdentityResponse,\n  BackstageSignInResult,\n} from '@backstage/plugin-auth-node';\nimport {\n  AuthProviderRouteHandlers,\n  AuthProviderConfig,\n} from '../../providers/types';\nimport {\n  AuthenticationError,\n  InputError,\n  isError,\n  NotAllowedError,\n} from '@backstage/errors';\nimport { TokenIssuer } from '../../identity/types';\nimport { defaultCookieConfigurer, readState, verifyNonce } from './helpers';\nimport { postMessageResponse, ensuresXRequestedWith } from '../flow';\nimport {\n  OAuthHandlers,\n  OAuthStartRequest,\n  OAuthRefreshRequest,\n  OAuthState,\n} from './types';\nimport { prepareBackstageIdentityResponse } from '../../providers/prepareBackstageIdentityResponse';\n\nexport const THOUSAND_DAYS_MS = 1000 * 24 * 60 * 60 * 1000;\nexport const TEN_MINUTES_MS = 600 * 1000;\n\nexport type Options = {\n  providerId: string;\n  secure: boolean;\n  disableRefresh?: boolean;\n  persistScopes?: boolean;\n  cookieDomain: string;\n  cookiePath: string;\n  appOrigin: string;\n  tokenIssuer: TokenIssuer;\n  isOriginAllowed: (origin: string) => boolean;\n  callbackUrl: string;\n};\nexport class OAuthAdapter implements AuthProviderRouteHandlers {\n  static fromConfig(\n    config: AuthProviderConfig,\n    handlers: OAuthHandlers,\n    options: Pick<\n      Options,\n      | 'providerId'\n      | 'persistScopes'\n      | 'disableRefresh'\n      | 'tokenIssuer'\n      | 'callbackUrl'\n    >,\n  ): OAuthAdapter {\n    const { origin: appOrigin } = new URL(config.appUrl);\n\n    const cookieConfigurer = config.cookieConfigurer ?? defaultCookieConfigurer;\n    const cookieConfig = cookieConfigurer({\n      providerId: options.providerId,\n      baseUrl: config.baseUrl,\n      callbackUrl: options.callbackUrl,\n    });\n\n    return new OAuthAdapter(handlers, {\n      ...options,\n      appOrigin,\n      cookieDomain: cookieConfig.domain,\n      cookiePath: cookieConfig.path,\n      secure: cookieConfig.secure,\n      isOriginAllowed: config.isOriginAllowed,\n    });\n  }\n\n  private readonly baseCookieOptions: CookieOptions;\n\n  constructor(\n    private readonly handlers: OAuthHandlers,\n    private readonly options: Options,\n  ) {\n    this.baseCookieOptions = {\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: this.options.secure,\n      path: this.options.cookiePath,\n      domain: this.options.cookieDomain,\n    };\n  }\n\n  async start(req: express.Request, res: express.Response): Promise<void> {\n    // retrieve scopes from request\n    const scope = req.query.scope?.toString() ?? '';\n    const env = req.query.env?.toString();\n    const origin = req.query.origin?.toString();\n\n    if (!env) {\n      throw new InputError('No env provided in request query parameters');\n    }\n\n    const nonce = crypto.randomBytes(16).toString('base64');\n    // set a nonce cookie before redirecting to oauth provider\n    this.setNonceCookie(res, nonce);\n\n    const state: OAuthState = { nonce, env, origin };\n\n    // If scopes are persisted then we pass them through the state so that we\n    // can set the cookie on successful auth\n    if (this.options.persistScopes) {\n      state.scope = scope;\n    }\n    const forwardReq = Object.assign(req, { scope, state });\n\n    const { url, status } = await this.handlers.start(\n      forwardReq as OAuthStartRequest,\n    );\n\n    res.statusCode = status || 302;\n    res.setHeader('Location', url);\n    res.setHeader('Content-Length', '0');\n    res.end();\n  }\n\n  async frameHandler(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> {\n    let appOrigin = this.options.appOrigin;\n\n    try {\n      const state: OAuthState = readState(req.query.state?.toString() ?? '');\n\n      if (state.origin) {\n        try {\n          appOrigin = new URL(state.origin).origin;\n        } catch {\n          throw new NotAllowedError('App origin is invalid, failed to parse');\n        }\n        if (!this.options.isOriginAllowed(appOrigin)) {\n          throw new NotAllowedError(`Origin '${appOrigin}' is not allowed`);\n        }\n      }\n\n      // verify nonce cookie and state cookie on callback\n      verifyNonce(req, this.options.providerId);\n\n      const { response, refreshToken } = await this.handlers.handler(req);\n\n      // Store the scope that we have been granted for this session. This is useful if\n      // the provider does not return granted scopes on refresh or if they are normalized.\n      if (this.options.persistScopes && state.scope) {\n        this.setGrantedScopeCookie(res, state.scope);\n        response.providerInfo.scope = state.scope;\n      }\n\n      if (refreshToken && !this.options.disableRefresh) {\n        // set new refresh token\n        this.setRefreshTokenCookie(res, refreshToken);\n      }\n\n      const identity = await this.populateIdentity(response.backstageIdentity);\n\n      // post message back to popup if successful\n      return postMessageResponse(res, appOrigin, {\n        type: 'authorization_response',\n        response: { ...response, backstageIdentity: identity },\n      });\n    } catch (error) {\n      const { name, message } = isError(error)\n        ? error\n        : new Error('Encountered invalid error'); // Being a bit safe and not forwarding the bad value\n      // post error message back to popup if failure\n      return postMessageResponse(res, appOrigin, {\n        type: 'authorization_response',\n        error: { name, message },\n      });\n    }\n  }\n\n  async logout(req: express.Request, res: express.Response): Promise<void> {\n    if (!ensuresXRequestedWith(req)) {\n      throw new AuthenticationError('Invalid X-Requested-With header');\n    }\n\n    // remove refresh token cookie if it is set\n    this.removeRefreshTokenCookie(res);\n\n    res.status(200).end();\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    if (!ensuresXRequestedWith(req)) {\n      throw new AuthenticationError('Invalid X-Requested-With header');\n    }\n\n    if (!this.handlers.refresh || this.options.disableRefresh) {\n      throw new InputError(\n        `Refresh token is not supported for provider ${this.options.providerId}`,\n      );\n    }\n\n    try {\n      const refreshToken =\n        req.cookies[`${this.options.providerId}-refresh-token`];\n\n      // throw error if refresh token is missing in the request\n      if (!refreshToken) {\n        throw new InputError('Missing session cookie');\n      }\n\n      let scope = req.query.scope?.toString() ?? '';\n      if (this.options.persistScopes) {\n        scope = this.getGrantedScopeFromCookie(req);\n      }\n      const forwardReq = Object.assign(req, { scope, refreshToken });\n\n      // get new access_token\n      const { response, refreshToken: newRefreshToken } =\n        await this.handlers.refresh(forwardReq as OAuthRefreshRequest);\n\n      const backstageIdentity = await this.populateIdentity(\n        response.backstageIdentity,\n      );\n\n      if (newRefreshToken && newRefreshToken !== refreshToken) {\n        this.setRefreshTokenCookie(res, newRefreshToken);\n      }\n\n      res.status(200).json({ ...response, backstageIdentity });\n    } catch (error) {\n      throw new AuthenticationError('Refresh failed', error);\n    }\n  }\n\n  /**\n   * If the response from the OAuth provider includes a Backstage identity, we\n   * make sure it's populated with all the information we can derive from the user ID.\n   */\n  private async populateIdentity(\n    identity?: BackstageSignInResult,\n  ): Promise<BackstageIdentityResponse | undefined> {\n    if (!identity) {\n      return undefined;\n    }\n\n    if (identity.token) {\n      return prepareBackstageIdentityResponse(identity);\n    }\n\n    const userEntityRef = stringifyEntityRef(\n      parseEntityRef(identity.id, {\n        defaultKind: 'user',\n        defaultNamespace: DEFAULT_NAMESPACE,\n      }),\n    );\n    const token = await this.options.tokenIssuer.issueToken({\n      claims: { sub: userEntityRef },\n    });\n\n    return prepareBackstageIdentityResponse({ ...identity, token });\n  }\n\n  private setNonceCookie = (res: express.Response, nonce: string) => {\n    res.cookie(`${this.options.providerId}-nonce`, nonce, {\n      maxAge: TEN_MINUTES_MS,\n      ...this.baseCookieOptions,\n      path: `${this.options.cookiePath}/handler`,\n    });\n  };\n\n  private setGrantedScopeCookie = (res: express.Response, scope: string) => {\n    res.cookie(`${this.options.providerId}-granted-scope`, scope, {\n      maxAge: THOUSAND_DAYS_MS,\n      ...this.baseCookieOptions,\n    });\n  };\n\n  private getGrantedScopeFromCookie = (req: express.Request) => {\n    return req.cookies[`${this.options.providerId}-granted-scope`];\n  };\n\n  private setRefreshTokenCookie = (\n    res: express.Response,\n    refreshToken: string,\n  ) => {\n    res.cookie(`${this.options.providerId}-refresh-token`, refreshToken, {\n      maxAge: THOUSAND_DAYS_MS,\n      ...this.baseCookieOptions,\n    });\n  };\n\n  private removeRefreshTokenCookie = (res: express.Response) => {\n    res.cookie(`${this.options.providerId}-refresh-token`, '', {\n      maxAge: 0,\n      ...this.baseCookieOptions,\n    });\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport from 'passport';\nimport jwtDecoder from 'jwt-decode';\nimport { InternalOAuthError } from 'passport-oauth2';\n\nimport { PassportProfile } from './types';\nimport { ProfileInfo, RedirectInfo } from '../../providers/types';\n\nexport type PassportDoneCallback<Res, Private = never> = (\n  err?: Error,\n  response?: Res,\n  privateInfo?: Private,\n) => void;\n\nexport const makeProfileInfo = (\n  profile: PassportProfile,\n  idToken?: string,\n): ProfileInfo => {\n  let email: string | undefined = undefined;\n  if (profile.emails && profile.emails.length > 0) {\n    const [firstEmail] = profile.emails;\n    email = firstEmail.value;\n  }\n\n  let picture: string | undefined = undefined;\n  if (profile.avatarUrl) {\n    picture = profile.avatarUrl;\n  } else if (profile.photos && profile.photos.length > 0) {\n    const [firstPhoto] = profile.photos;\n    picture = firstPhoto.value;\n  }\n\n  let displayName: string | undefined =\n    profile.displayName ?? profile.username ?? profile.id;\n\n  if ((!email || !picture || !displayName) && idToken) {\n    try {\n      const decoded: Record<string, string> = jwtDecoder(idToken);\n      if (!email && decoded.email) {\n        email = decoded.email;\n      }\n      if (!picture && decoded.picture) {\n        picture = decoded.picture;\n      }\n      if (!displayName && decoded.name) {\n        displayName = decoded.name;\n      }\n    } catch (e) {\n      throw new Error(`Failed to parse id token and get profile info, ${e}`);\n    }\n  }\n\n  return {\n    email,\n    picture,\n    displayName,\n  };\n};\n\nexport const executeRedirectStrategy = async (\n  req: express.Request,\n  providerStrategy: passport.Strategy,\n  options: Record<string, string>,\n): Promise<RedirectInfo> => {\n  return new Promise(resolve => {\n    const strategy = Object.create(providerStrategy);\n    strategy.redirect = (url: string, status?: number) => {\n      resolve({ url, status: status ?? undefined });\n    };\n\n    strategy.authenticate(req, { ...options });\n  });\n};\n\nexport const executeFrameHandlerStrategy = async <Result, PrivateInfo = never>(\n  req: express.Request,\n  providerStrategy: passport.Strategy,\n) => {\n  return new Promise<{ result: Result; privateInfo: PrivateInfo }>(\n    (resolve, reject) => {\n      const strategy = Object.create(providerStrategy);\n      strategy.success = (result: any, privateInfo: any) => {\n        resolve({ result, privateInfo });\n      };\n      strategy.fail = (\n        info: { type: 'success' | 'error'; message?: string },\n        // _status: number,\n      ) => {\n        reject(new Error(`Authentication rejected, ${info.message ?? ''}`));\n      };\n      strategy.error = (error: InternalOAuthError) => {\n        let message = `Authentication failed, ${error.message}`;\n\n        if (error.oauthError?.data) {\n          try {\n            const errorData = JSON.parse(error.oauthError.data);\n\n            if (errorData.message) {\n              message += ` - ${errorData.message}`;\n            }\n          } catch (parseError) {\n            message += ` - ${error.oauthError}`;\n          }\n        }\n\n        reject(new Error(message));\n      };\n      strategy.redirect = () => {\n        reject(new Error('Unexpected redirect'));\n      };\n      strategy.authenticate(req, {});\n    },\n  );\n};\n\ntype RefreshTokenResponse = {\n  /**\n   * An access token issued for the signed in user.\n   */\n  accessToken: string;\n  /**\n   * Optionally, the server can issue a new Refresh Token for the user\n   */\n  refreshToken?: string;\n  params: any;\n};\n\nexport const executeRefreshTokenStrategy = async (\n  providerStrategy: passport.Strategy,\n  refreshToken: string,\n  scope: string,\n): Promise<RefreshTokenResponse> => {\n  return new Promise((resolve, reject) => {\n    const anyStrategy = providerStrategy as any;\n    const OAuth2 = anyStrategy._oauth2.constructor;\n    const oauth2 = new OAuth2(\n      anyStrategy._oauth2._clientId,\n      anyStrategy._oauth2._clientSecret,\n      anyStrategy._oauth2._baseSite,\n      anyStrategy._oauth2._authorizeUrl,\n      anyStrategy._refreshURL || anyStrategy._oauth2._accessTokenUrl,\n      anyStrategy._oauth2._customHeaders,\n    );\n\n    oauth2.getOAuthAccessToken(\n      refreshToken,\n      {\n        scope,\n        grant_type: 'refresh_token',\n      },\n      (\n        err: Error | null,\n        accessToken: string,\n        newRefreshToken: string,\n        params: any,\n      ) => {\n        if (err) {\n          reject(new Error(`Failed to refresh access token ${err.toString()}`));\n        }\n        if (!accessToken) {\n          reject(\n            new Error(\n              `Failed to refresh access token, no access token received`,\n            ),\n          );\n        }\n\n        resolve({\n          accessToken,\n          refreshToken: newRefreshToken,\n          params,\n        });\n      },\n    );\n  });\n};\n\ntype ProviderStrategy = {\n  userProfile(accessToken: string, callback: Function): void;\n};\n\nexport const executeFetchUserProfileStrategy = async (\n  providerStrategy: passport.Strategy,\n  accessToken: string,\n): Promise<PassportProfile> => {\n  return new Promise((resolve, reject) => {\n    const anyStrategy = providerStrategy as unknown as ProviderStrategy;\n    anyStrategy.userProfile(\n      accessToken,\n      (error: Error, rawProfile: PassportProfile) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(rawProfile);\n        }\n      },\n    );\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  CompoundEntityRef,\n  parseEntityRef,\n  RELATION_MEMBER_OF,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { TokenManager } from '@backstage/backend-common';\n\ntype UserQuery = {\n  annotations: Record<string, string>;\n};\n\ntype MemberClaimQuery = {\n  entityRefs: string[];\n  logger?: Logger;\n};\n\n/**\n * A catalog client tailored for reading out identity data from the catalog.\n */\nexport class CatalogIdentityClient {\n  private readonly catalogApi: CatalogApi;\n  private readonly tokenManager: TokenManager;\n\n  constructor(options: { catalogApi: CatalogApi; tokenManager: TokenManager }) {\n    this.catalogApi = options.catalogApi;\n    this.tokenManager = options.tokenManager;\n  }\n\n  /**\n   * Looks up a single user using a query.\n   *\n   * Throws a NotFoundError or ConflictError if 0 or multiple users are found.\n   */\n  async findUser(query: UserQuery): Promise<UserEntity> {\n    const filter: Record<string, string> = {\n      kind: 'user',\n    };\n    for (const [key, value] of Object.entries(query.annotations)) {\n      filter[`metadata.annotations.${key}`] = value;\n    }\n\n    const { token } = await this.tokenManager.getToken();\n    const { items } = await this.catalogApi.getEntities({ filter }, { token });\n\n    if (items.length !== 1) {\n      if (items.length > 1) {\n        throw new ConflictError('User lookup resulted in multiple matches');\n      } else {\n        throw new NotFoundError('User not found');\n      }\n    }\n\n    return items[0] as UserEntity;\n  }\n\n  /**\n   * Resolve additional entity claims from the catalog, using the passed-in entity names. Designed\n   * to be used within a `signInResolver` where additional entity claims might be provided, but\n   * group membership and transient group membership lean on imported catalog relations.\n   *\n   * Returns a superset of the entity names that can be passed directly to `issueToken` as `ent`.\n   */\n  async resolveCatalogMembership(query: MemberClaimQuery): Promise<string[]> {\n    const { entityRefs, logger } = query;\n    const resolvedEntityRefs = entityRefs\n      .map((ref: string) => {\n        try {\n          const parsedRef = parseEntityRef(ref.toLocaleLowerCase('en-US'), {\n            defaultKind: 'user',\n            defaultNamespace: 'default',\n          });\n          return parsedRef;\n        } catch {\n          logger?.warn(`Failed to parse entityRef from ${ref}, ignoring`);\n          return null;\n        }\n      })\n      .filter((ref): ref is CompoundEntityRef => ref !== null);\n\n    const filter = resolvedEntityRefs.map(ref => ({\n      kind: ref.kind,\n      'metadata.namespace': ref.namespace,\n      'metadata.name': ref.name,\n    }));\n    const { token } = await this.tokenManager.getToken();\n    const entities = await this.catalogApi\n      .getEntities({ filter }, { token })\n      .then(r => r.items);\n\n    if (entityRefs.length !== entities.length) {\n      const foundEntityNames = entities.map(stringifyEntityRef);\n      const missingEntityNames = resolvedEntityRefs\n        .map(stringifyEntityRef)\n        .filter(s => !foundEntityNames.includes(s));\n      logger?.debug(`Entities not found for refs ${missingEntityNames.join()}`);\n    }\n\n    const memberOf = entities.flatMap(\n      e =>\n        e!.relations\n          ?.filter(r => r.type === RELATION_MEMBER_OF)\n          .map(r => r.targetRef) ?? [],\n    );\n\n    const newEntityRefs = [\n      ...new Set(resolvedEntityRefs.map(stringifyEntityRef).concat(memberOf)),\n    ];\n\n    logger?.debug(`Found catalog membership: ${newEntityRefs.join()}`);\n    return newEntityRefs;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RELATION_MEMBER_OF,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { TokenParams } from '../../identity';\n\nexport function getEntityClaims(entity: UserEntity): TokenParams['claims'] {\n  const userRef = stringifyEntityRef(entity);\n\n  const membershipRefs =\n    entity.relations\n      ?.filter(\n        r => r.type === RELATION_MEMBER_OF && r.targetRef.startsWith('group:'),\n      )\n      .map(r => r.targetRef) ?? [];\n\n  return {\n    sub: userRef,\n    ent: [userRef, ...membershipRefs],\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AtlassianStrategy from './strategy';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport passport from 'passport';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  AuthProviderFactory,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport express from 'express';\nimport { TokenIssuer } from '../../identity';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { Logger } from 'winston';\n\nexport type AtlassianAuthProviderOptions = OAuthProviderOptions & {\n  scopes: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport const atlassianDefaultAuthHandler: AuthHandler<OAuthResult> = async ({\n  fullProfile,\n  params,\n}) => ({\n  profile: makeProfileInfo(fullProfile, params.id_token),\n});\n\nexport class AtlassianAuthProvider implements OAuthHandlers {\n  private readonly _strategy: AtlassianStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: AtlassianAuthProviderOptions) {\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this.tokenIssuer = options.tokenIssuer;\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n\n    this._strategy = new AtlassianStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        scope: options.scopes,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult>,\n      ) => {\n        done(undefined, {\n          fullProfile,\n          accessToken,\n          refreshToken,\n          params,\n        });\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result } = await executeFrameHandlerStrategy<OAuthResult>(\n      req,\n      this._strategy,\n    );\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: result.refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult): Promise<OAuthResponse> {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, params, refreshToken } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n}\n\nexport type AtlassianProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    resolver: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createAtlassianProvider = (\n  options?: AtlassianProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const scopes = envConfig.getString('scopes');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> =\n        options?.authHandler ?? atlassianDefaultAuthHandler;\n\n      const provider = new AtlassianAuthProvider({\n        clientId,\n        clientSecret,\n        scopes,\n        callbackUrl,\n        authHandler,\n        signInResolver: options?.signIn?.resolver,\n        catalogIdentityClient,\n        logger,\n        tokenIssuer,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport OAuth2Strategy from 'passport-oauth2';\n\nexport interface Auth0StrategyOptionsWithRequest {\n  clientID: string;\n  clientSecret: string;\n  callbackURL: string;\n  domain: string;\n  passReqToCallback: true;\n}\n\nexport default class Auth0Strategy extends OAuth2Strategy {\n  constructor(\n    options: Auth0StrategyOptionsWithRequest,\n    verify: OAuth2Strategy.VerifyFunctionWithRequest,\n  ) {\n    const optionsWithURLs = {\n      ...options,\n      authorizationURL: `https://${options.domain}/authorize`,\n      tokenURL: `https://${options.domain}/oauth/token`,\n      userInfoURL: `https://${options.domain}/userinfo`,\n      apiUrl: `https://${options.domain}/api`,\n    };\n    super(optionsWithURLs, verify);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport from 'passport';\nimport Auth0Strategy from './strategy';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n  OAuthResult,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  RedirectInfo,\n  AuthProviderFactory,\n  AuthHandler,\n  SignInResolver,\n} from '../types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { TokenIssuer } from '../../identity';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type Auth0AuthProviderOptions = OAuthProviderOptions & {\n  domain: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class Auth0AuthProvider implements OAuthHandlers {\n  private readonly _strategy: Auth0Strategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Auth0AuthProviderOptions) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this._strategy = new Auth0Strategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        domain: options.domain,\n        passReqToCallback: false as true,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            accessToken,\n            refreshToken,\n            params,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nconst defaultSignInResolver: SignInResolver<OAuthResult> = async info => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Profile does not contain an email');\n  }\n\n  const id = profile.email.split('@')[0];\n\n  return { id, token: '' };\n};\n\n/** @public */\nexport type Auth0ProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<OAuthResult>;\n  };\n};\n\n/** @public */\nexport const createAuth0Provider = (\n  options?: Auth0ProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const domain = envConfig.getString('domain');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolver = options?.signIn?.resolver ?? defaultSignInResolver;\n\n      const provider = new Auth0AuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        domain,\n        authHandler,\n        signInResolver,\n        tokenIssuer,\n        catalogIdentityClient,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: true,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthHandler,\n  AuthProviderFactory,\n  AuthProviderRouteHandlers,\n  AuthResponse,\n  SignInResolver,\n} from '../types';\nimport express from 'express';\nimport fetch from 'node-fetch';\nimport * as crypto from 'crypto';\nimport { KeyObject } from 'crypto';\nimport { Logger } from 'winston';\nimport NodeCache from 'node-cache';\nimport { JWT } from 'jose';\nimport { TokenIssuer } from '../../identity/types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { Profile as PassportProfile } from 'passport';\nimport { makeProfileInfo } from '../../lib/passport';\nimport { AuthenticationError } from '@backstage/errors';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\n\nexport const ALB_JWT_HEADER = 'x-amzn-oidc-data';\nexport const ALB_ACCESS_TOKEN_HEADER = 'x-amzn-oidc-accesstoken';\n\ntype Options = {\n  region: string;\n  issuer?: string;\n  logger: Logger;\n  authHandler: AuthHandler<AwsAlbResult>;\n  signInResolver: SignInResolver<AwsAlbResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n};\n\nexport const getJWTHeaders = (input: string): AwsAlbHeaders => {\n  const encoded = input.split('.')[0];\n  return JSON.parse(Buffer.from(encoded, 'base64').toString('utf8'));\n};\n\nexport type AwsAlbHeaders = {\n  alg: string;\n  kid: string;\n  signer: string;\n  iss: string;\n  client: string;\n  exp: number;\n};\n\nexport type AwsAlbClaims = {\n  sub: string;\n  name: string;\n  family_name: string;\n  given_name: string;\n  picture: string;\n  email: string;\n  exp: number;\n  iss: string;\n};\n\nexport type AwsAlbResult = {\n  fullProfile: PassportProfile;\n  expiresInSeconds?: number;\n  accessToken: string;\n};\n\nexport type AwsAlbProviderInfo = {\n  /**\n   * An access token issued for the signed in user.\n   */\n  accessToken: string;\n  /**\n   * Expiry of the access token in seconds.\n   */\n  expiresInSeconds?: number;\n};\n\nexport type AwsAlbResponse = AuthResponse<AwsAlbProviderInfo>;\n\nexport class AwsAlbAuthProvider implements AuthProviderRouteHandlers {\n  private readonly region: string;\n  private readonly issuer?: string;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n  private readonly keyCache: NodeCache;\n  private readonly authHandler: AuthHandler<AwsAlbResult>;\n  private readonly signInResolver: SignInResolver<AwsAlbResult>;\n\n  constructor(options: Options) {\n    this.region = options.region;\n    this.issuer = options.issuer;\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this.keyCache = new NodeCache({ stdTTL: 3600 });\n  }\n\n  frameHandler(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    try {\n      const result = await this.getResult(req);\n      const response = await this.handleResult(result);\n      res.json(response);\n    } catch (e) {\n      this.logger.error('Exception occurred during AWS ALB token refresh', e);\n      res.status(401);\n      res.end();\n    }\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  private async getResult(req: express.Request): Promise<AwsAlbResult> {\n    const jwt = req.header(ALB_JWT_HEADER);\n    const accessToken = req.header(ALB_ACCESS_TOKEN_HEADER);\n\n    if (jwt === undefined) {\n      throw new AuthenticationError(\n        `Missing ALB OIDC header: ${ALB_JWT_HEADER}`,\n      );\n    }\n\n    if (accessToken === undefined) {\n      throw new AuthenticationError(\n        `Missing ALB OIDC header: ${ALB_ACCESS_TOKEN_HEADER}`,\n      );\n    }\n\n    try {\n      const headers = getJWTHeaders(jwt);\n      const key = await this.getKey(headers.kid);\n      const claims = JWT.verify(jwt, key) as AwsAlbClaims;\n\n      if (this.issuer && claims.iss !== this.issuer) {\n        throw new AuthenticationError('Issuer mismatch on JWT token');\n      }\n\n      const fullProfile: PassportProfile = {\n        provider: 'unknown',\n        id: claims.sub,\n        displayName: claims.name,\n        username: claims.email.split('@')[0].toLowerCase(),\n        name: {\n          familyName: claims.family_name,\n          givenName: claims.given_name,\n        },\n        emails: [{ value: claims.email.toLowerCase() }],\n        photos: [{ value: claims.picture }],\n      };\n\n      return {\n        fullProfile,\n        expiresInSeconds: claims.exp,\n        accessToken,\n      };\n    } catch (e) {\n      throw new Error(`Exception occurred during JWT processing: ${e}`);\n    }\n  }\n\n  private async handleResult(result: AwsAlbResult): Promise<AwsAlbResponse> {\n    const context = {\n      tokenIssuer: this.tokenIssuer,\n      catalogIdentityClient: this.catalogIdentityClient,\n      logger: this.logger,\n    };\n    const { profile } = await this.authHandler(result, context);\n    const backstageIdentity = await this.signInResolver(\n      {\n        result,\n        profile,\n      },\n      context,\n    );\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n        expiresInSeconds: result.expiresInSeconds,\n      },\n      backstageIdentity: prepareBackstageIdentityResponse(backstageIdentity),\n      profile,\n    };\n  }\n\n  async getKey(keyId: string): Promise<KeyObject> {\n    const optionalCacheKey = this.keyCache.get<KeyObject>(keyId);\n    if (optionalCacheKey) {\n      return crypto.createPublicKey(optionalCacheKey);\n    }\n    const keyText: string = await fetch(\n      `https://public-keys.auth.elb.${this.region}.amazonaws.com/${keyId}`,\n    ).then(response => response.text());\n    const keyValue = crypto.createPublicKey(keyText);\n    this.keyCache.set(keyId, keyValue.export({ format: 'pem', type: 'spki' }));\n    return keyValue;\n  }\n}\n\nexport type AwsAlbProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<AwsAlbResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<AwsAlbResult>;\n  };\n};\n\nexport const createAwsAlbProvider = (\n  options?: AwsAlbProviderOptions,\n): AuthProviderFactory => {\n  return ({ config, tokenIssuer, catalogApi, logger, tokenManager }) => {\n    const region = config.getString('region');\n    const issuer = config.getOptionalString('iss');\n\n    if (options?.signIn.resolver === undefined) {\n      throw new Error(\n        'SignInResolver is required to use this authentication provider',\n      );\n    }\n\n    const catalogIdentityClient = new CatalogIdentityClient({\n      catalogApi,\n      tokenManager,\n    });\n\n    const authHandler: AuthHandler<AwsAlbResult> = options?.authHandler\n      ? options.authHandler\n      : async ({ fullProfile }) => ({\n          profile: makeProfileInfo(fullProfile),\n        });\n\n    const signInResolver = options?.signIn.resolver;\n\n    return new AwsAlbAuthProvider({\n      region,\n      issuer,\n      signInResolver,\n      authHandler,\n      tokenIssuer,\n      catalogIdentityClient,\n      logger,\n    });\n  };\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport passport, { Profile as PassportProfile } from 'passport';\nimport { Strategy as BitbucketStrategy } from 'passport-bitbucket-oauth2';\nimport { TokenIssuer } from '../../identity/types';\nimport { CatalogIdentityClient, getEntityClaims } from '../../lib/catalog';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderFactory,\n  AuthHandler,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\ntype Options = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<BitbucketOAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport type BitbucketOAuthResult = {\n  fullProfile: BitbucketPassportProfile;\n  params: {\n    id_token?: string;\n    scope: string;\n    expires_in: number;\n  };\n  accessToken: string;\n  refreshToken?: string;\n};\n\nexport type BitbucketPassportProfile = PassportProfile & {\n  id?: string;\n  displayName?: string;\n  username?: string;\n  avatarUrl?: string;\n  _json?: {\n    links?: {\n      avatar?: {\n        href?: string;\n      };\n    };\n  };\n};\n\nexport class BitbucketAuthProvider implements OAuthHandlers {\n  private readonly _strategy: BitbucketStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this._strategy = new BitbucketStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        // We need passReqToCallback set to false to get params, but there's\n        // no matching type signature for that, so instead behold this beauty\n        passReqToCallback: false as true,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            params,\n            accessToken,\n            refreshToken,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: BitbucketOAuthResult) {\n    result.fullProfile.avatarUrl =\n      result.fullProfile._json!.links!.avatar!.href;\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nexport const bitbucketUsernameSignInResolver: SignInResolver<\n  BitbucketOAuthResult\n> = async (info, ctx) => {\n  const { result } = info;\n\n  if (!result.fullProfile.username) {\n    throw new Error('Bitbucket profile contained no Username');\n  }\n\n  const entity = await ctx.catalogIdentityClient.findUser({\n    annotations: {\n      'bitbucket.org/username': result.fullProfile.username,\n    },\n  });\n\n  const claims = getEntityClaims(entity);\n  const token = await ctx.tokenIssuer.issueToken({ claims });\n\n  return { id: entity.metadata.name, entity, token };\n};\n\nexport const bitbucketUserIdSignInResolver: SignInResolver<\n  BitbucketOAuthResult\n> = async (info, ctx) => {\n  const { result } = info;\n\n  if (!result.fullProfile.id) {\n    throw new Error('Bitbucket profile contained no User ID');\n  }\n\n  const entity = await ctx.catalogIdentityClient.findUser({\n    annotations: {\n      'bitbucket.org/user-id': result.fullProfile.id,\n    },\n  });\n\n  const claims = getEntityClaims(entity);\n  const token = await ctx.tokenIssuer.issueToken({ claims });\n\n  return { id: entity.metadata.name, entity, token };\n};\n\nexport type BitbucketProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createBitbucketProvider = (\n  options?: BitbucketProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<BitbucketOAuthResult> =\n        options?.authHandler\n          ? options.authHandler\n          : async ({ fullProfile, params }) => ({\n              profile: makeProfileInfo(fullProfile, params.id_token),\n            });\n\n      const provider = new BitbucketAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        signInResolver: options?.signIn?.resolver,\n        authHandler,\n        tokenIssuer,\n        catalogIdentityClient,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport { Logger } from 'winston';\nimport { Profile as PassportProfile } from 'passport';\nimport { Strategy as GithubStrategy } from 'passport-github2';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  RedirectInfo,\n  AuthProviderFactory,\n  AuthHandler,\n  SignInResolver,\n  StateEncoder,\n} from '../types';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n} from '../../lib/oauth';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { TokenIssuer } from '../../identity';\n\nconst ACCESS_TOKEN_PREFIX = 'access-token.';\n\n// TODO(Rugvip): Auth providers need a way to access this in a less hardcoded way\nconst BACKSTAGE_SESSION_EXPIRATION = 3600;\n\ntype PrivateInfo = {\n  refreshToken?: string;\n};\n\nexport type GithubOAuthResult = {\n  fullProfile: PassportProfile;\n  params: {\n    scope: string;\n    expires_in?: string;\n    refresh_token_expires_in?: string;\n  };\n  accessToken: string;\n  refreshToken?: string;\n};\n\nexport type GithubAuthProviderOptions = OAuthProviderOptions & {\n  tokenUrl?: string;\n  userProfileUrl?: string;\n  authorizationUrl?: string;\n  signInResolver?: SignInResolver<GithubOAuthResult>;\n  authHandler: AuthHandler<GithubOAuthResult>;\n  stateEncoder: StateEncoder;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class GithubAuthProvider implements OAuthHandlers {\n  private readonly _strategy: GithubStrategy;\n  private readonly signInResolver?: SignInResolver<GithubOAuthResult>;\n  private readonly authHandler: AuthHandler<GithubOAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n  private readonly stateEncoder: StateEncoder;\n\n  constructor(options: GithubAuthProviderOptions) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.stateEncoder = options.stateEncoder;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this._strategy = new GithubStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        tokenURL: options.tokenUrl,\n        userProfileURL: options.userProfileUrl,\n        authorizationURL: options.authorizationUrl,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: any,\n        done: PassportDoneCallback<GithubOAuthResult, PrivateInfo>,\n      ) => {\n        done(undefined, { fullProfile, params, accessToken }, { refreshToken });\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      scope: req.scope,\n      state: (await this.stateEncoder(req)).encodedState,\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      GithubOAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    let refreshToken = privateInfo.refreshToken;\n\n    // If we do not have a real refresh token and we have a non-expiring\n    // access token, then we use that as our refresh token.\n    if (!refreshToken && !result.params.expires_in) {\n      refreshToken = ACCESS_TOKEN_PREFIX + result.accessToken;\n    }\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    // We've enable persisting scope in the OAuth provider, so scope here will\n    // be whatever was stored in the cookie\n    const { scope, refreshToken } = req;\n\n    // This is the OAuth App flow. A non-expiring access token is stored in the\n    // refresh token cookie. We use that token to fetch the user profile and\n    // refresh the Backstage session when needed.\n    if (refreshToken?.startsWith(ACCESS_TOKEN_PREFIX)) {\n      const accessToken = refreshToken.slice(ACCESS_TOKEN_PREFIX.length);\n\n      const fullProfile = await executeFetchUserProfileStrategy(\n        this._strategy,\n        accessToken,\n      ).catch(error => {\n        if (error.oauthError?.statusCode === 401) {\n          throw new Error('Invalid access token');\n        }\n        throw error;\n      });\n\n      return {\n        response: await this.handleResult({\n          fullProfile,\n          params: { scope },\n          accessToken,\n        }),\n        refreshToken,\n      };\n    }\n\n    // This is the App flow, which is close to a standard OAuth refresh flow. It has a\n    // pretty long session expiration, and it also ignores the requested scope, instead\n    // just allowing access to whatever is configured as part of the app installation.\n    const result = await executeRefreshTokenStrategy(\n      this._strategy,\n      refreshToken,\n      scope,\n    );\n    return {\n      response: await this.handleResult({\n        fullProfile: await executeFetchUserProfileStrategy(\n          this._strategy,\n          result.accessToken,\n        ),\n        params: { ...result.params, scope },\n        accessToken: result.accessToken,\n      }),\n      refreshToken: result.refreshToken,\n    };\n  }\n\n  private async handleResult(result: GithubOAuthResult) {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const expiresInStr = result.params.expires_in;\n    let expiresInSeconds =\n      expiresInStr === undefined ? undefined : Number(expiresInStr);\n\n    let backstageIdentity = undefined;\n\n    if (this.signInResolver) {\n      backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n\n      // GitHub sessions last longer than Backstage sessions, so if we're using\n      // GitHub for sign-in, then we need to expire the sessions earlier\n      if (expiresInSeconds) {\n        expiresInSeconds = Math.min(\n          expiresInSeconds,\n          BACKSTAGE_SESSION_EXPIRATION,\n        );\n      } else {\n        expiresInSeconds = BACKSTAGE_SESSION_EXPIRATION;\n      }\n    }\n\n    return {\n      backstageIdentity,\n      providerInfo: {\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds,\n      },\n      profile,\n    };\n  }\n}\n\nexport const githubDefaultSignInResolver: SignInResolver<\n  GithubOAuthResult\n> = async (info, ctx) => {\n  const { fullProfile } = info.result;\n\n  const userId = fullProfile.username || fullProfile.id;\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\nexport type GithubProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<GithubOAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver?: SignInResolver<GithubOAuthResult>;\n  };\n\n  /**\n   * The state encoder used to encode the 'state' parameter on the OAuth request.\n   *\n   * It should return a string that takes the state params (from the request), url encodes the params\n   * and finally base64 encodes them.\n   *\n   * Providing your own stateEncoder will allow you to add addition parameters to the state field.\n   *\n   * It is typed as follows:\n   *   `export type StateEncoder = (input: OAuthState) => Promise<{encodedState: string}>;`\n   *\n   * Note: the stateEncoder must encode a 'nonce' value and an 'env' value. Without this, the OAuth flow will fail\n   * (These two values will be set by the req.state by default)\n   *\n   * For more information, please see the helper module in ../../oauth/helpers #readState\n   */\n  stateEncoder?: StateEncoder;\n};\n\nexport const createGithubProvider = (\n  options?: GithubProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const enterpriseInstanceUrl = envConfig.getOptionalString(\n        'enterpriseInstanceUrl',\n      );\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const authorizationUrl = enterpriseInstanceUrl\n        ? `${enterpriseInstanceUrl}/login/oauth/authorize`\n        : undefined;\n      const tokenUrl = enterpriseInstanceUrl\n        ? `${enterpriseInstanceUrl}/login/oauth/access_token`\n        : undefined;\n      const userProfileUrl = enterpriseInstanceUrl\n        ? `${enterpriseInstanceUrl}/api/v3/user`\n        : undefined;\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<GithubOAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile }) => ({\n            profile: makeProfileInfo(fullProfile),\n          });\n\n      const signInResolverFn =\n        options?.signIn?.resolver ?? githubDefaultSignInResolver;\n\n      const signInResolver: SignInResolver<GithubOAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const stateEncoder: StateEncoder =\n        options?.stateEncoder ??\n        (async (req: OAuthStartRequest): Promise<{ encodedState: string }> => {\n          return { encodedState: encodeState(req.state) };\n        });\n\n      const provider = new GithubAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        tokenUrl,\n        userProfileUrl,\n        authorizationUrl,\n        signInResolver,\n        authHandler,\n        tokenIssuer,\n        catalogIdentityClient,\n        stateEncoder,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        persistScopes: true,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport { Strategy as GitlabStrategy } from 'passport-gitlab2';\nimport { Logger } from 'winston';\nimport {\n  executeRedirectStrategy,\n  executeFrameHandlerStrategy,\n  executeRefreshTokenStrategy,\n  executeFetchUserProfileStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  RedirectInfo,\n  AuthProviderFactory,\n  SignInResolver,\n  AuthHandler,\n} from '../types';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  OAuthRefreshRequest,\n  encodeState,\n  OAuthResult,\n} from '../../lib/oauth';\nimport { TokenIssuer } from '../../identity';\nimport { CatalogIdentityClient } from '../../lib/catalog';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type GitlabAuthProviderOptions = OAuthProviderOptions & {\n  baseUrl: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport const gitlabDefaultSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile, result } = info;\n\n  let id = result.fullProfile.id;\n\n  if (profile.email) {\n    id = profile.email.split('@')[0];\n  }\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: id,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id, token };\n};\n\nexport const gitlabDefaultAuthHandler: AuthHandler<OAuthResult> = async ({\n  fullProfile,\n  params,\n}) => ({\n  profile: makeProfileInfo(fullProfile, params.id_token),\n});\n\nexport class GitlabAuthProvider implements OAuthHandlers {\n  private readonly _strategy: GitlabStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: GitlabAuthProviderOptions) {\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this.tokenIssuer = options.tokenIssuer;\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n\n    this._strategy = new GitlabStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        baseURL: options.baseUrl,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: any,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          { fullProfile, params, accessToken },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult): Promise<OAuthResponse> {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nexport type GitlabProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  /**\n   * Maps an auth result to a Backstage identity for the user.\n   *\n   * Set to `'email'` to use the default email-based sign in resolver, which will search\n   * the catalog for a single user entity that has a matching `microsoft.com/email` annotation.\n   */\n  signIn?: {\n    resolver?: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createGitlabProvider = (\n  options?: GitlabProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const audience = envConfig.getOptionalString('audience');\n      const baseUrl = audience || 'https://gitlab.com';\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> =\n        options?.authHandler ?? gitlabDefaultAuthHandler;\n\n      const signInResolverFn =\n        options?.signIn?.resolver ?? gitlabDefaultSignInResolver;\n\n      const signInResolver: SignInResolver<OAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new GitlabAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        baseUrl,\n        authHandler,\n        signInResolver,\n        catalogIdentityClient,\n        logger,\n        tokenIssuer,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { TokenIssuer } from '../../identity/types';\nimport { CatalogIdentityClient, getEntityClaims } from '../../lib/catalog';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderFactory,\n  AuthHandler,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\ntype Options = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class GoogleAuthProvider implements OAuthHandlers {\n  private readonly _strategy: GoogleStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this._strategy = new GoogleStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        // We need passReqToCallback set to false to get params, but there's\n        // no matching type signature for that, so instead behold this beauty\n        passReqToCallback: false as true,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            params,\n            accessToken,\n            refreshToken,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nexport const googleEmailSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Google profile contained no email');\n  }\n\n  const entity = await ctx.catalogIdentityClient.findUser({\n    annotations: {\n      'google.com/email': profile.email,\n    },\n  });\n\n  const claims = getEntityClaims(entity);\n  const token = await ctx.tokenIssuer.issueToken({ claims });\n\n  return { id: entity.metadata.name, entity, token };\n};\n\nconst googleDefaultSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Google profile contained no email');\n  }\n\n  let userId: string;\n  try {\n    const entity = await ctx.catalogIdentityClient.findUser({\n      annotations: {\n        'google.com/email': profile.email,\n      },\n    });\n    userId = entity.metadata.name;\n  } catch (error) {\n    ctx.logger.warn(\n      `Failed to look up user, ${error}, falling back to allowing login based on email pattern, this will probably break in the future`,\n    );\n    userId = profile.email.split('@')[0];\n  }\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\nexport type GoogleProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver?: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createGoogleProvider = (\n  options?: GoogleProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolverFn =\n        options?.signIn?.resolver ?? googleDefaultSignInResolver;\n\n      const signInResolver: SignInResolver<OAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new GoogleAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        signInResolver,\n        authHandler,\n        tokenIssuer,\n        catalogIdentityClient,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport passport from 'passport';\nimport { Strategy as MicrosoftStrategy } from 'passport-microsoft';\nimport { TokenIssuer } from '../../identity/types';\nimport { CatalogIdentityClient, getEntityClaims } from '../../lib/catalog';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderFactory,\n  AuthHandler,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { Logger } from 'winston';\nimport fetch from 'node-fetch';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\ntype Options = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n  authorizationUrl?: string;\n  tokenUrl?: string;\n};\n\nexport class MicrosoftAuthProvider implements OAuthHandlers {\n  private readonly _strategy: MicrosoftStrategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.logger = options.logger;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n\n    this._strategy = new MicrosoftStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        authorizationURL: options.authorizationUrl,\n        tokenURL: options.tokenUrl,\n        passReqToCallback: false as true,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(undefined, { fullProfile, accessToken, params }, { refreshToken });\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const photo = await this.getUserPhoto(result.accessToken);\n    result.fullProfile.photos = photo ? [{ value: photo }] : undefined;\n\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n\n  private getUserPhoto(accessToken: string): Promise<string | undefined> {\n    return new Promise(resolve => {\n      fetch('https://graph.microsoft.com/v1.0/me/photos/48x48/$value', {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          const imageUrl = `data:image/jpeg;base64,${Buffer.from(\n            arrayBuffer,\n          ).toString('base64')}`;\n          resolve(imageUrl);\n        })\n        .catch(error => {\n          this.logger.warn(\n            `Could not retrieve user profile photo from Microsoft Graph API: ${error}`,\n          );\n          // User profile photo is optional, ignore errors and resolve undefined\n          resolve(undefined);\n        });\n    });\n  }\n}\n\nexport const microsoftEmailSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Microsoft profile contained no email');\n  }\n\n  const entity = await ctx.catalogIdentityClient.findUser({\n    annotations: {\n      'microsoft.com/email': profile.email,\n    },\n  });\n\n  const claims = getEntityClaims(entity);\n  const token = await ctx.tokenIssuer.issueToken({ claims });\n\n  return { id: entity.metadata.name, entity, token };\n};\n\nexport const microsoftDefaultSignInResolver: SignInResolver<\n  OAuthResult\n> = async (info, ctx) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Profile contained no email');\n  }\n\n  const userId = profile.email.split('@')[0];\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\nexport type MicrosoftProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver?: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createMicrosoftProvider = (\n  options?: MicrosoftProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const tenantId = envConfig.getString('tenantId');\n\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n      const authorizationUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize`;\n      const tokenUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolverFn =\n        options?.signIn?.resolver ?? microsoftDefaultSignInResolver;\n\n      const signInResolver: SignInResolver<OAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new MicrosoftAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        authorizationUrl,\n        tokenUrl,\n        authHandler,\n        signInResolver,\n        catalogIdentityClient,\n        logger,\n        tokenIssuer,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport passport from 'passport';\nimport { Strategy as OAuth2Strategy } from 'passport-oauth2';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthResult,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFetchUserProfileStrategy,\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  AuthProviderFactory,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { TokenIssuer } from '../../identity';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type OAuth2AuthProviderOptions = OAuthProviderOptions & {\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  authorizationUrl: string;\n  tokenUrl: string;\n  scope?: string;\n  logger: Logger;\n  includeBasicAuth?: boolean;\n};\n\nexport class OAuth2AuthProvider implements OAuthHandlers {\n  private readonly _strategy: OAuth2Strategy;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: OAuth2AuthProviderOptions) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n\n    this._strategy = new OAuth2Strategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        authorizationURL: options.authorizationUrl,\n        tokenURL: options.tokenUrl,\n        passReqToCallback: false as true,\n        scope: options.scope,\n        customHeaders: options.includeBasicAuth\n          ? {\n              Authorization: `Basic ${this.encodeClientCredentials(\n                options.clientId,\n                options.clientSecret,\n              )}`,\n            }\n          : undefined,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            fullProfile,\n            accessToken,\n            refreshToken,\n            params,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const refreshTokenResponse = await executeRefreshTokenStrategy(\n      this._strategy,\n      req.refreshToken,\n      req.scope,\n    );\n    const { accessToken, params, refreshToken } = refreshTokenResponse;\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n\n  encodeClientCredentials(clientID: string, clientSecret: string): string {\n    return Buffer.from(`${clientID}:${clientSecret}`).toString('base64');\n  }\n}\n\nexport const oAuth2DefaultSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Profile contained no email');\n  }\n\n  const userId = profile.email.split('@')[0];\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\nexport type OAuth2ProviderOptions = {\n  authHandler?: AuthHandler<OAuthResult>;\n\n  signIn?: {\n    resolver?: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createOAuth2Provider = (\n  options?: OAuth2ProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n      const authorizationUrl = envConfig.getString('authorizationUrl');\n      const tokenUrl = envConfig.getString('tokenUrl');\n      const scope = envConfig.getOptionalString('scope');\n      const includeBasicAuth = envConfig.getOptionalBoolean('includeBasicAuth');\n      const disableRefresh =\n        envConfig.getOptionalBoolean('disableRefresh') ?? false;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolverFn =\n        options?.signIn?.resolver ?? oAuth2DefaultSignInResolver;\n\n      const signInResolver: SignInResolver<OAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new OAuth2AuthProvider({\n        clientId,\n        clientSecret,\n        tokenIssuer,\n        catalogIdentityClient,\n        callbackUrl,\n        signInResolver,\n        authHandler,\n        authorizationUrl,\n        tokenUrl,\n        scope,\n        logger,\n        includeBasicAuth,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { Logger } from 'winston';\nimport { AuthenticationError } from '@backstage/errors';\nimport { getBearerTokenFromAuthorizationHeader } from '@backstage/plugin-auth-node';\nimport {\n  AuthHandler,\n  SignInResolver,\n  AuthProviderFactory,\n  AuthProviderRouteHandlers,\n  AuthResponse,\n} from '../types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { JWT } from 'jose';\nimport { TokenIssuer } from '../../identity/types';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\n\nexport const OAUTH2_PROXY_JWT_HEADER = 'X-OAUTH2-PROXY-ID-TOKEN';\n\n/**\n * JWT header extraction result, containing the raw value and the parsed JWT\n * payload.\n *\n * @public\n */\nexport type OAuth2ProxyResult<JWTPayload> = {\n  /**\n   * Parsed and decoded JWT payload.\n   */\n  fullProfile: JWTPayload;\n\n  /**\n   * Raw JWT token\n   */\n  accessToken: string;\n};\n\n/**\n * Options for the oauth2-proxy provider factory\n *\n * @public\n */\nexport type Oauth2ProxyProviderOptions<JWTPayload> = {\n  /**\n   * Configure an auth handler to generate a profile for the user.\n   */\n  authHandler: AuthHandler<OAuth2ProxyResult<JWTPayload>>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<OAuth2ProxyResult<JWTPayload>>;\n  };\n};\n\ninterface Options<JWTPayload> {\n  logger: Logger;\n  signInResolver: SignInResolver<OAuth2ProxyResult<JWTPayload>>;\n  authHandler: AuthHandler<OAuth2ProxyResult<JWTPayload>>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n}\n\nexport class Oauth2ProxyAuthProvider<JWTPayload>\n  implements AuthProviderRouteHandlers\n{\n  private readonly logger: Logger;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly signInResolver: SignInResolver<\n    OAuth2ProxyResult<JWTPayload>\n  >;\n  private readonly authHandler: AuthHandler<OAuth2ProxyResult<JWTPayload>>;\n  private readonly tokenIssuer: TokenIssuer;\n\n  constructor(options: Options<JWTPayload>) {\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this.tokenIssuer = options.tokenIssuer;\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n  }\n\n  frameHandler(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    try {\n      const result = this.getResult(req);\n\n      const response = await this.handleResult(result);\n\n      res.json(response);\n    } catch (e) {\n      this.logger.error(\n        `Exception occurred during ${OAUTH2_PROXY_JWT_HEADER} refresh`,\n        e,\n      );\n      res.status(401);\n      res.end();\n    }\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  private async handleResult(\n    result: OAuth2ProxyResult<JWTPayload>,\n  ): Promise<AuthResponse<{ accessToken: string }>> {\n    const ctx = {\n      logger: this.logger,\n      tokenIssuer: this.tokenIssuer,\n      catalogIdentityClient: this.catalogIdentityClient,\n    };\n\n    const { profile } = await this.authHandler(result, ctx);\n\n    const backstageSignInResult = await this.signInResolver(\n      {\n        result,\n        profile,\n      },\n      ctx,\n    );\n\n    return {\n      providerInfo: {\n        accessToken: result.accessToken,\n      },\n      backstageIdentity: prepareBackstageIdentityResponse(\n        backstageSignInResult,\n      ),\n      profile,\n    };\n  }\n\n  private getResult(req: express.Request): OAuth2ProxyResult<JWTPayload> {\n    const authHeader = req.header(OAUTH2_PROXY_JWT_HEADER);\n    const jwt = getBearerTokenFromAuthorizationHeader(authHeader);\n\n    if (!jwt) {\n      throw new AuthenticationError(\n        `Missing or in incorrect format - Oauth2Proxy OIDC header: ${OAUTH2_PROXY_JWT_HEADER}`,\n      );\n    }\n\n    const decodedJWT = JWT.decode(jwt) as unknown as JWTPayload;\n\n    return {\n      fullProfile: decodedJWT,\n      accessToken: jwt,\n    };\n  }\n}\n\n/**\n * Factory function for oauth2-proxy auth provider\n *\n * @public\n */\nexport const createOauth2ProxyProvider =\n  <JWTPayload>(\n    options: Oauth2ProxyProviderOptions<JWTPayload>,\n  ): AuthProviderFactory =>\n  ({ catalogApi, logger, tokenIssuer, tokenManager }) => {\n    const signInResolver = options.signIn.resolver;\n    const authHandler = options.authHandler;\n    const catalogIdentityClient = new CatalogIdentityClient({\n      catalogApi,\n      tokenManager,\n    });\n    return new Oauth2ProxyAuthProvider<JWTPayload>({\n      logger,\n      signInResolver,\n      authHandler,\n      tokenIssuer,\n      catalogIdentityClient,\n    });\n  };\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport {\n  Client,\n  Issuer,\n  Strategy as OidcStrategy,\n  TokenSet,\n  UserinfoResponse,\n} from 'openid-client';\nimport {\n  encodeState,\n  OAuthAdapter,\n  OAuthEnvironmentHandler,\n  OAuthHandlers,\n  OAuthProviderOptions,\n  OAuthRefreshRequest,\n  OAuthResponse,\n  OAuthStartRequest,\n} from '../../lib/oauth';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthHandler,\n  AuthProviderFactory,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { TokenIssuer } from '../../identity';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken?: string;\n};\n\ntype OidcImpl = {\n  strategy: OidcStrategy<UserinfoResponse, Client>;\n  client: Client;\n};\n\n/**\n * authentication result for the OIDC which includes the token set and user information (a profile response sent by OIDC server)\n * @public\n */\nexport type OidcAuthResult = {\n  tokenset: TokenSet;\n  userinfo: UserinfoResponse;\n};\n\nexport type Options = OAuthProviderOptions & {\n  metadataUrl: string;\n  scope?: string;\n  prompt?: string;\n  tokenSignedResponseAlg?: string;\n  signInResolver?: SignInResolver<OidcAuthResult>;\n  authHandler: AuthHandler<OidcAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class OidcAuthProvider implements OAuthHandlers {\n  private readonly implementation: Promise<OidcImpl>;\n  private readonly scope?: string;\n  private readonly prompt?: string;\n\n  private readonly signInResolver?: SignInResolver<OidcAuthResult>;\n  private readonly authHandler: AuthHandler<OidcAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.implementation = this.setupStrategy(options);\n    this.scope = options.scope;\n    this.prompt = options.prompt;\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    const { strategy } = await this.implementation;\n    const options: Record<string, string> = {\n      scope: req.scope || this.scope || 'openid profile email',\n      state: encodeState(req.state),\n    };\n    const prompt = this.prompt || 'none';\n    if (prompt !== 'auto') {\n      options.prompt = prompt;\n    }\n    return await executeRedirectStrategy(req, strategy, options);\n  }\n\n  async handler(req: express.Request) {\n    const { strategy } = await this.implementation;\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OidcAuthResult,\n      PrivateInfo\n    >(req, strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { client } = await this.implementation;\n    const tokenset = await client.refresh(req.refreshToken);\n    if (!tokenset.access_token) {\n      throw new Error('Refresh failed');\n    }\n    const userinfo = await client.userinfo(tokenset.access_token);\n\n    return {\n      response: await this.handleResult({ tokenset, userinfo }),\n      refreshToken: tokenset.refresh_token,\n    };\n  }\n\n  private async setupStrategy(options: Options): Promise<OidcImpl> {\n    const issuer = await Issuer.discover(options.metadataUrl);\n    const client = new issuer.Client({\n      access_type: 'offline', // this option must be passed to provider to receive a refresh token\n      client_id: options.clientId,\n      client_secret: options.clientSecret,\n      redirect_uris: [options.callbackUrl],\n      response_types: ['code'],\n      id_token_signed_response_alg: options.tokenSignedResponseAlg || 'RS256',\n      scope: options.scope || '',\n    });\n\n    const strategy = new OidcStrategy(\n      {\n        client,\n        passReqToCallback: false as true,\n      },\n      (\n        tokenset: TokenSet,\n        userinfo: UserinfoResponse,\n        done: PassportDoneCallback<OidcAuthResult, PrivateInfo>,\n      ) => {\n        if (typeof done !== 'function') {\n          throw new Error(\n            'OIDC IdP must provide a userinfo_endpoint in the metadata response',\n          );\n        }\n        done(\n          undefined,\n          { tokenset, userinfo },\n          {\n            refreshToken: tokenset.refresh_token,\n          },\n        );\n      },\n    );\n    strategy.error = console.error;\n    return { strategy, client };\n  }\n\n  // Use this function to grab the user profile info from the token\n  // Then populate the profile with it\n  private async handleResult(result: OidcAuthResult): Promise<OAuthResponse> {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.tokenset.id_token,\n        accessToken: result.tokenset.access_token!,\n        scope: result.tokenset.scope!,\n        expiresInSeconds: result.tokenset.expires_in,\n      },\n      profile,\n    };\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nexport const oidcDefaultSignInResolver: SignInResolver<OidcAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Profile contained no email');\n  }\n\n  const userId = profile.email.split('@')[0];\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\n/**\n * OIDC provider callback options. An auth handler and a sign in resolver\n * can be passed while creating a OIDC provider.\n *\n * authHandler : called after sign in was successful, a new object must be returned which includes a profile\n * signInResolver: called after sign in was successful, expects to return a new {@link @backstage/plugin-auth-node#BackstageSignInResult}\n *\n * Both options are optional. There is fallback for authHandler where the default handler expect an e-mail explicitly\n * otherwise it throws an error\n *\n * @public\n */\nexport type OidcProviderOptions = {\n  authHandler?: AuthHandler<OidcAuthResult>;\n\n  signIn?: {\n    resolver?: SignInResolver<OidcAuthResult>;\n  };\n};\n\nexport const createOidcProvider = (\n  options?: OidcProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n      const metadataUrl = envConfig.getString('metadataUrl');\n      const tokenSignedResponseAlg = envConfig.getOptionalString(\n        'tokenSignedResponseAlg',\n      );\n      const scope = envConfig.getOptionalString('scope');\n      const prompt = envConfig.getOptionalString('prompt');\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OidcAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ userinfo }) => ({\n            profile: {\n              displayName: userinfo.name,\n              email: userinfo.email,\n              picture: userinfo.picture,\n            },\n          });\n      const signInResolverFn =\n        options?.signIn?.resolver ?? oidcDefaultSignInResolver;\n      const signInResolver: SignInResolver<OidcAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new OidcAuthProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        tokenSignedResponseAlg,\n        metadataUrl,\n        scope,\n        prompt,\n        signInResolver,\n        authHandler,\n        logger,\n        tokenIssuer,\n        catalogIdentityClient,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n  OAuthResult,\n} from '../../lib/oauth';\nimport { Strategy as OktaStrategy } from 'passport-okta-oauth';\nimport passport from 'passport';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  executeFetchUserProfileStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderFactory,\n  AuthHandler,\n  RedirectInfo,\n  SignInResolver,\n} from '../types';\nimport { StateStore } from 'passport-oauth2';\nimport { CatalogIdentityClient, getEntityClaims } from '../../lib/catalog';\nimport { TokenIssuer } from '../../identity';\nimport { Logger } from 'winston';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type OktaAuthProviderOptions = OAuthProviderOptions & {\n  audience: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class OktaAuthProvider implements OAuthHandlers {\n  private readonly _strategy: any;\n  private readonly _signInResolver?: SignInResolver<OAuthResult>;\n  private readonly _authHandler: AuthHandler<OAuthResult>;\n  private readonly _tokenIssuer: TokenIssuer;\n  private readonly _catalogIdentityClient: CatalogIdentityClient;\n  private readonly _logger: Logger;\n\n  /**\n   * Due to passport-okta-oauth forcing options.state = true,\n   * passport-oauth2 requires express-session to be installed\n   * so that the 'state' parameter of the oauth2 flow can be stored.\n   * This implementation of StateStore matches the NullStore found within\n   * passport-oauth2, which is the StateStore implementation used when options.state = false,\n   * allowing us to avoid using express-session in order to integrate with Okta.\n   */\n  private _store: StateStore = {\n    store(_req: express.Request, cb: any) {\n      cb(null, null);\n    },\n    verify(_req: express.Request, _state: string, cb: any) {\n      cb(null, true);\n    },\n  };\n\n  constructor(options: OktaAuthProviderOptions) {\n    this._signInResolver = options.signInResolver;\n    this._authHandler = options.authHandler;\n    this._tokenIssuer = options.tokenIssuer;\n    this._catalogIdentityClient = options.catalogIdentityClient;\n    this._logger = options.logger;\n\n    this._strategy = new OktaStrategy(\n      {\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        audience: options.audience,\n        passReqToCallback: false as true,\n        store: this._store,\n        response_type: 'code',\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            accessToken,\n            refreshToken,\n            params,\n            fullProfile,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: req.scope,\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const context = {\n      logger: this._logger,\n      catalogIdentityClient: this._catalogIdentityClient,\n      tokenIssuer: this._tokenIssuer,\n    };\n    const { profile } = await this._authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this._signInResolver) {\n      response.backstageIdentity = await this._signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nexport const oktaEmailSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Okta profile contained no email');\n  }\n\n  const entity = await ctx.catalogIdentityClient.findUser({\n    annotations: {\n      'okta.com/email': profile.email,\n    },\n  });\n\n  const claims = getEntityClaims(entity);\n  const token = await ctx.tokenIssuer.issueToken({ claims });\n\n  return { id: entity.metadata.name, entity, token };\n};\n\nexport const oktaDefaultSignInResolver: SignInResolver<OAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('Okta profile contained no email');\n  }\n\n  // TODO(Rugvip): Hardcoded to the local part of the email for now\n  const userId = profile.email.split('@')[0];\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: userId,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id: userId, token };\n};\n\nexport type OktaProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver?: SignInResolver<OAuthResult>;\n  };\n};\n\nexport const createOktaProvider = (\n  _options?: OktaProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const audience = envConfig.getString('audience');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      // This is a safe assumption as `passport-okta-oauth` uses the audience\n      // as the base for building the authorization, token, and user info URLs.\n      // https://github.com/fischerdan/passport-okta-oauth/blob/ea9ac42d/lib/passport-okta-oauth/oauth2.js#L12-L14\n      if (!audience.startsWith('https://')) {\n        throw new Error(\"URL for 'audience' must start with 'https://'.\");\n      }\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = _options?.authHandler\n        ? _options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolverFn =\n        _options?.signIn?.resolver ?? oktaDefaultSignInResolver;\n\n      const signInResolver: SignInResolver<OAuthResult> = info =>\n        signInResolverFn(info, {\n          catalogIdentityClient,\n          tokenIssuer,\n          logger,\n        });\n\n      const provider = new OktaAuthProvider({\n        audience,\n        clientId,\n        clientSecret,\n        callbackUrl,\n        authHandler,\n        signInResolver,\n        tokenIssuer,\n        catalogIdentityClient,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Strategy as OneLoginStrategy } from 'passport-onelogin-oauth';\nimport express from 'express';\nimport {\n  OAuthAdapter,\n  OAuthProviderOptions,\n  OAuthHandlers,\n  OAuthResponse,\n  OAuthEnvironmentHandler,\n  OAuthStartRequest,\n  encodeState,\n  OAuthRefreshRequest,\n  OAuthResult,\n} from '../../lib/oauth';\nimport passport from 'passport';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  executeRefreshTokenStrategy,\n  makeProfileInfo,\n  executeFetchUserProfileStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  RedirectInfo,\n  AuthProviderFactory,\n  AuthHandler,\n  SignInResolver,\n} from '../types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { Logger } from 'winston';\nimport { TokenIssuer } from '../../identity';\n\ntype PrivateInfo = {\n  refreshToken: string;\n};\n\nexport type Options = OAuthProviderOptions & {\n  issuer: string;\n  signInResolver?: SignInResolver<OAuthResult>;\n  authHandler: AuthHandler<OAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n};\n\nexport class OneLoginProvider implements OAuthHandlers {\n  private readonly _strategy: any;\n  private readonly signInResolver?: SignInResolver<OAuthResult>;\n  private readonly authHandler: AuthHandler<OAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this._strategy = new OneLoginStrategy(\n      {\n        issuer: options.issuer,\n        clientID: options.clientId,\n        clientSecret: options.clientSecret,\n        callbackURL: options.callbackUrl,\n        passReqToCallback: false as true,\n      },\n      (\n        accessToken: any,\n        refreshToken: any,\n        params: any,\n        fullProfile: passport.Profile,\n        done: PassportDoneCallback<OAuthResult, PrivateInfo>,\n      ) => {\n        done(\n          undefined,\n          {\n            accessToken,\n            refreshToken,\n            params,\n            fullProfile,\n          },\n          {\n            refreshToken,\n          },\n        );\n      },\n    );\n  }\n  async start(req: OAuthStartRequest): Promise<RedirectInfo> {\n    return await executeRedirectStrategy(req, this._strategy, {\n      accessType: 'offline',\n      prompt: 'consent',\n      scope: 'openid',\n      state: encodeState(req.state),\n    });\n  }\n\n  async handler(req: express.Request) {\n    const { result, privateInfo } = await executeFrameHandlerStrategy<\n      OAuthResult,\n      PrivateInfo\n    >(req, this._strategy);\n\n    return {\n      response: await this.handleResult(result),\n      refreshToken: privateInfo.refreshToken,\n    };\n  }\n\n  async refresh(req: OAuthRefreshRequest) {\n    const { accessToken, refreshToken, params } =\n      await executeRefreshTokenStrategy(\n        this._strategy,\n        req.refreshToken,\n        req.scope,\n      );\n\n    const fullProfile = await executeFetchUserProfileStrategy(\n      this._strategy,\n      accessToken,\n    );\n\n    return {\n      response: await this.handleResult({\n        fullProfile,\n        params,\n        accessToken,\n      }),\n      refreshToken,\n    };\n  }\n\n  private async handleResult(result: OAuthResult) {\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n    const { profile } = await this.authHandler(result, context);\n\n    const response: OAuthResponse = {\n      providerInfo: {\n        idToken: result.params.id_token,\n        accessToken: result.accessToken,\n        scope: result.params.scope,\n        expiresInSeconds: result.params.expires_in,\n      },\n      profile,\n    };\n\n    if (this.signInResolver) {\n      response.backstageIdentity = await this.signInResolver(\n        {\n          result,\n          profile,\n        },\n        context,\n      );\n    }\n\n    return response;\n  }\n}\n\nconst defaultSignInResolver: SignInResolver<OAuthResult> = async info => {\n  const { profile } = info;\n\n  if (!profile.email) {\n    throw new Error('OIDC profile contained no email');\n  }\n\n  const id = profile.email.split('@')[0];\n\n  return { id, token: '' };\n};\n\n/** @public */\nexport type OneLoginProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<OAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<OAuthResult>;\n  };\n};\n\n/** @public */\nexport const createOneLoginProvider = (\n  options?: OneLoginProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) =>\n    OAuthEnvironmentHandler.mapConfig(config, envConfig => {\n      const clientId = envConfig.getString('clientId');\n      const clientSecret = envConfig.getString('clientSecret');\n      const issuer = envConfig.getString('issuer');\n      const customCallbackUrl = envConfig.getOptionalString('callbackUrl');\n      const callbackUrl =\n        customCallbackUrl ||\n        `${globalConfig.baseUrl}/${providerId}/handler/frame`;\n\n      const catalogIdentityClient = new CatalogIdentityClient({\n        catalogApi,\n        tokenManager,\n      });\n\n      const authHandler: AuthHandler<OAuthResult> = options?.authHandler\n        ? options.authHandler\n        : async ({ fullProfile, params }) => ({\n            profile: makeProfileInfo(fullProfile, params.id_token),\n          });\n\n      const signInResolver = options?.signIn?.resolver ?? defaultSignInResolver;\n\n      const provider = new OneLoginProvider({\n        clientId,\n        clientSecret,\n        callbackUrl,\n        issuer,\n        authHandler,\n        signInResolver,\n        tokenIssuer,\n        catalogIdentityClient,\n        logger,\n      });\n\n      return OAuthAdapter.fromConfig(globalConfig, provider, {\n        disableRefresh: false,\n        providerId,\n        tokenIssuer,\n        callbackUrl,\n      });\n    });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport express from 'express';\nimport { SamlConfig } from 'passport-saml/lib/passport-saml/types';\nimport {\n  Strategy as SamlStrategy,\n  Profile as SamlProfile,\n  VerifyWithoutRequest,\n} from 'passport-saml';\nimport {\n  executeFrameHandlerStrategy,\n  executeRedirectStrategy,\n  PassportDoneCallback,\n} from '../../lib/passport';\nimport {\n  AuthProviderRouteHandlers,\n  AuthProviderFactory,\n  AuthHandler,\n  SignInResolver,\n  AuthResponse,\n} from '../types';\nimport { postMessageResponse } from '../../lib/flow';\nimport { TokenIssuer } from '../../identity/types';\nimport { isError } from '@backstage/errors';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { Logger } from 'winston';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\n\n/** @public */\nexport type SamlAuthResult = {\n  fullProfile: any;\n};\n\ntype Options = SamlConfig & {\n  signInResolver?: SignInResolver<SamlAuthResult>;\n  authHandler: AuthHandler<SamlAuthResult>;\n  tokenIssuer: TokenIssuer;\n  catalogIdentityClient: CatalogIdentityClient;\n  logger: Logger;\n  appUrl: string;\n};\n\nexport class SamlAuthProvider implements AuthProviderRouteHandlers {\n  private readonly strategy: SamlStrategy;\n  private readonly signInResolver?: SignInResolver<SamlAuthResult>;\n  private readonly authHandler: AuthHandler<SamlAuthResult>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n  private readonly appUrl: string;\n\n  constructor(options: Options) {\n    this.appUrl = options.appUrl;\n    this.signInResolver = options.signInResolver;\n    this.authHandler = options.authHandler;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n    this.strategy = new SamlStrategy({ ...options }, ((\n      fullProfile: SamlProfile,\n      done: PassportDoneCallback<SamlAuthResult>,\n    ) => {\n      // TODO: There's plenty more validation and profile handling to do here,\n      //       this provider is currently only intended to validate the provider pattern\n      //       for non-oauth auth flows.\n      // TODO: This flow doesn't issue an identity token that can be used to validate\n      //       the identity of the user in other backends, which we need in some form.\n      done(undefined, { fullProfile });\n    }) as VerifyWithoutRequest);\n  }\n\n  async start(req: express.Request, res: express.Response): Promise<void> {\n    const { url } = await executeRedirectStrategy(req, this.strategy, {});\n    res.redirect(url);\n  }\n\n  async frameHandler(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> {\n    try {\n      const context = {\n        logger: this.logger,\n        catalogIdentityClient: this.catalogIdentityClient,\n        tokenIssuer: this.tokenIssuer,\n      };\n\n      const { result } = await executeFrameHandlerStrategy<SamlAuthResult>(\n        req,\n        this.strategy,\n      );\n\n      const { profile } = await this.authHandler(result, context);\n\n      const response: AuthResponse<{}> = {\n        profile,\n        providerInfo: {},\n      };\n\n      if (this.signInResolver) {\n        const signInResponse = await this.signInResolver(\n          {\n            result,\n            profile,\n          },\n          context,\n        );\n\n        response.backstageIdentity =\n          prepareBackstageIdentityResponse(signInResponse);\n      }\n\n      return postMessageResponse(res, this.appUrl, {\n        type: 'authorization_response',\n        response,\n      });\n    } catch (error) {\n      const { name, message } = isError(error)\n        ? error\n        : new Error('Encountered invalid error'); // Being a bit safe and not forwarding the bad value\n      return postMessageResponse(res, this.appUrl, {\n        type: 'authorization_response',\n        error: { name, message },\n      });\n    }\n  }\n\n  async logout(_req: express.Request, res: express.Response): Promise<void> {\n    res.end();\n  }\n}\n\nconst samlDefaultSignInResolver: SignInResolver<SamlAuthResult> = async (\n  info,\n  ctx,\n) => {\n  const id = info.result.fullProfile.nameID;\n\n  const entityRef = stringifyEntityRef({\n    kind: 'User',\n    namespace: DEFAULT_NAMESPACE,\n    name: id,\n  });\n\n  const token = await ctx.tokenIssuer.issueToken({\n    claims: {\n      sub: entityRef,\n      ent: [entityRef],\n    },\n  });\n\n  return { id, token };\n};\n\ntype SignatureAlgorithm = 'sha1' | 'sha256' | 'sha512';\n\n/** @public */\nexport type SamlProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth response\n   * into the profile that will be presented to the user.\n   */\n  authHandler?: AuthHandler<SamlAuthResult>;\n\n  /**\n   * Configure sign-in for this provider, without it the provider can not be used to sign users in.\n   */\n  signIn?: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver?: SignInResolver<SamlAuthResult>;\n  };\n};\n\n/** @public */\nexport const createSamlProvider = (\n  options?: SamlProviderOptions,\n): AuthProviderFactory => {\n  return ({\n    providerId,\n    globalConfig,\n    config,\n    tokenIssuer,\n    tokenManager,\n    catalogApi,\n    logger,\n  }) => {\n    const catalogIdentityClient = new CatalogIdentityClient({\n      catalogApi,\n      tokenManager,\n    });\n\n    const authHandler: AuthHandler<SamlAuthResult> = options?.authHandler\n      ? options.authHandler\n      : async ({ fullProfile }) => ({\n          profile: {\n            email: fullProfile.email,\n            displayName: fullProfile.displayName,\n          },\n        });\n\n    const signInResolverFn =\n      options?.signIn?.resolver ?? samlDefaultSignInResolver;\n\n    const signInResolver: SignInResolver<SamlAuthResult> = info =>\n      signInResolverFn(info, {\n        catalogIdentityClient,\n        tokenIssuer,\n        logger,\n      });\n\n    return new SamlAuthProvider({\n      callbackUrl: `${globalConfig.baseUrl}/${providerId}/handler/frame`,\n      entryPoint: config.getString('entryPoint'),\n      logoutUrl: config.getOptionalString('logoutUrl'),\n      audience: config.getOptionalString('audience'),\n      issuer: config.getString('issuer'),\n      cert: config.getString('cert'),\n      privateKey: config.getOptionalString('privateKey'),\n      authnContext: config.getOptionalStringArray('authnContext'),\n      identifierFormat: config.getOptionalString('identifierFormat'),\n      decryptionPvk: config.getOptionalString('decryptionPvk'),\n      signatureAlgorithm: config.getOptionalString('signatureAlgorithm') as\n        | SignatureAlgorithm\n        | undefined,\n      digestAlgorithm: config.getOptionalString('digestAlgorithm'),\n      acceptedClockSkewMs: config.getOptionalNumber('acceptedClockSkewMs'),\n\n      tokenIssuer,\n      appUrl: globalConfig.appUrl,\n      authHandler,\n      signInResolver,\n      logger,\n      catalogIdentityClient,\n    });\n  };\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport { AuthHandler, AuthResponse, SignInResolver } from '../types';\n\n/**\n * The header name used by the IAP.\n */\nexport const IAP_JWT_HEADER = 'x-goog-iap-jwt-assertion';\n\n/**\n * The data extracted from an IAP token.\n *\n * @public\n */\nexport type GcpIapTokenInfo = {\n  /**\n   * The unique, stable identifier for the user.\n   */\n  sub: string;\n  /**\n   * User email address.\n   */\n  email: string;\n  /**\n   * Other fields.\n   */\n  [key: string]: JsonValue;\n};\n\n/**\n * The result of the initial auth challenge. This is the input to the auth\n * callbacks.\n *\n * @public\n */\nexport type GcpIapResult = {\n  /**\n   * The data extracted from the IAP token header.\n   */\n  iapToken: GcpIapTokenInfo;\n};\n\n/**\n * The provider info to return to the frontend.\n */\nexport type GcpIapProviderInfo = {\n  /**\n   * The data extracted from the IAP token header.\n   */\n  iapToken: GcpIapTokenInfo;\n};\n\n/**\n * The shape of the response to return to callers.\n */\nexport type GcpIapResponse = AuthResponse<GcpIapProviderInfo>;\n\n/**\n * Options for {@link createGcpIapProvider}.\n *\n * @public\n */\nexport type GcpIapProviderOptions = {\n  /**\n   * The profile transformation function used to verify and convert the auth\n   * response into the profile that will be presented to the user. The default\n   * implementation just provides the authenticated email that the IAP\n   * presented.\n   */\n  authHandler?: AuthHandler<GcpIapResult>;\n\n  /**\n   * Configures sign-in for this provider.\n   */\n  signIn: {\n    /**\n     * Maps an auth result to a Backstage identity for the user.\n     */\n    resolver: SignInResolver<GcpIapResult>;\n  };\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationError } from '@backstage/errors';\nimport { OAuth2Client, TokenPayload } from 'google-auth-library';\nimport { AuthHandler } from '../types';\nimport { GcpIapResult, IAP_JWT_HEADER } from './types';\n\nexport function createTokenValidator(\n  audience: string,\n  mockClient?: OAuth2Client,\n): (token: string) => Promise<TokenPayload> {\n  const client = mockClient ?? new OAuth2Client();\n\n  return async function tokenValidator(token) {\n    // TODO(freben): Rate limit the public key reads. It may be sensible to\n    // cache these for some reasonable time rather than asking for the public\n    // keys on every single sign-in. But since the rate of events here is so\n    // slow, I decided to keep it simple for now.\n    const response = await client.getIapPublicKeys();\n    const ticket = await client.verifySignedJwtWithCertsAsync(\n      token,\n      response.pubkeys,\n      audience,\n      ['https://cloud.google.com/iap'],\n    );\n\n    const payload = ticket.getPayload();\n    if (!payload) {\n      throw new TypeError('Token had no payload');\n    }\n\n    return payload;\n  };\n}\n\nexport async function parseRequestToken(\n  jwtToken: unknown,\n  tokenValidator: (token: string) => Promise<TokenPayload>,\n): Promise<GcpIapResult> {\n  if (typeof jwtToken !== 'string' || !jwtToken) {\n    throw new AuthenticationError(\n      `Missing Google IAP header: ${IAP_JWT_HEADER}`,\n    );\n  }\n\n  let payload: TokenPayload;\n  try {\n    payload = await tokenValidator(jwtToken);\n  } catch (e) {\n    throw new AuthenticationError(`Google IAP token verification failed, ${e}`);\n  }\n\n  if (!payload.sub || !payload.email) {\n    throw new AuthenticationError(\n      'Google IAP token payload is missing sub and/or email claim',\n    );\n  }\n\n  return {\n    iapToken: {\n      ...payload,\n      sub: payload.sub,\n      email: payload.email,\n    },\n  };\n}\n\nexport const defaultAuthHandler: AuthHandler<GcpIapResult> = async ({\n  iapToken,\n}) => ({ profile: { email: iapToken.email } });\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport { TokenPayload } from 'google-auth-library';\nimport { Logger } from 'winston';\nimport { TokenIssuer } from '../../identity/types';\nimport { CatalogIdentityClient } from '../../lib/catalog';\nimport { prepareBackstageIdentityResponse } from '../prepareBackstageIdentityResponse';\nimport {\n  AuthHandler,\n  AuthProviderFactory,\n  AuthProviderRouteHandlers,\n  SignInResolver,\n} from '../types';\nimport {\n  createTokenValidator,\n  defaultAuthHandler,\n  parseRequestToken,\n} from './helpers';\nimport {\n  GcpIapProviderOptions,\n  GcpIapResponse,\n  GcpIapResult,\n  IAP_JWT_HEADER,\n} from './types';\n\nexport class GcpIapProvider implements AuthProviderRouteHandlers {\n  private readonly authHandler: AuthHandler<GcpIapResult>;\n  private readonly signInResolver: SignInResolver<GcpIapResult>;\n  private readonly tokenValidator: (token: string) => Promise<TokenPayload>;\n  private readonly tokenIssuer: TokenIssuer;\n  private readonly catalogIdentityClient: CatalogIdentityClient;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    authHandler: AuthHandler<GcpIapResult>;\n    signInResolver: SignInResolver<GcpIapResult>;\n    tokenValidator: (token: string) => Promise<TokenPayload>;\n    tokenIssuer: TokenIssuer;\n    catalogIdentityClient: CatalogIdentityClient;\n    logger: Logger;\n  }) {\n    this.authHandler = options.authHandler;\n    this.signInResolver = options.signInResolver;\n    this.tokenValidator = options.tokenValidator;\n    this.tokenIssuer = options.tokenIssuer;\n    this.catalogIdentityClient = options.catalogIdentityClient;\n    this.logger = options.logger;\n  }\n\n  async start() {}\n\n  async frameHandler() {}\n\n  async refresh(req: express.Request, res: express.Response): Promise<void> {\n    const result = await parseRequestToken(\n      req.header(IAP_JWT_HEADER),\n      this.tokenValidator,\n    );\n    const context = {\n      logger: this.logger,\n      catalogIdentityClient: this.catalogIdentityClient,\n      tokenIssuer: this.tokenIssuer,\n    };\n\n    const { profile } = await this.authHandler(result, context);\n\n    const backstageIdentity = await this.signInResolver(\n      { profile, result },\n      context,\n    );\n\n    const response: GcpIapResponse = {\n      providerInfo: { iapToken: result.iapToken },\n      profile,\n      backstageIdentity: prepareBackstageIdentityResponse(backstageIdentity),\n    };\n\n    res.json(response);\n  }\n}\n\n/**\n * Creates an auth provider for Google Identity-Aware Proxy.\n *\n * @public\n */\nexport function createGcpIapProvider(\n  options: GcpIapProviderOptions,\n): AuthProviderFactory {\n  return ({ config, tokenIssuer, catalogApi, logger, tokenManager }) => {\n    const audience = config.getString('audience');\n\n    const authHandler = options.authHandler ?? defaultAuthHandler;\n    const signInResolver = options.signIn.resolver;\n    const tokenValidator = createTokenValidator(audience);\n\n    const catalogIdentityClient = new CatalogIdentityClient({\n      catalogApi,\n      tokenManager,\n    });\n\n    return new GcpIapProvider({\n      authHandler,\n      signInResolver,\n      tokenValidator,\n      tokenIssuer,\n      catalogIdentityClient,\n      logger,\n    });\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createGithubProvider } from './github';\nimport { createGitlabProvider } from './gitlab';\nimport { createGoogleProvider } from './google';\nimport { createOAuth2Provider } from './oauth2';\nimport { createOidcProvider } from './oidc';\nimport { createOktaProvider } from './okta';\nimport { createSamlProvider } from './saml';\nimport { createAuth0Provider } from './auth0';\nimport { createMicrosoftProvider } from './microsoft';\nimport { createOneLoginProvider } from './onelogin';\nimport { AuthProviderFactory } from './types';\nimport { createAwsAlbProvider } from './aws-alb';\nimport { createBitbucketProvider } from './bitbucket';\nimport { createAtlassianProvider } from './atlassian';\n\nexport const factories: { [providerId: string]: AuthProviderFactory } = {\n  google: createGoogleProvider(),\n  github: createGithubProvider(),\n  gitlab: createGitlabProvider(),\n  saml: createSamlProvider(),\n  okta: createOktaProvider(),\n  auth0: createAuth0Provider(),\n  microsoft: createMicrosoftProvider(),\n  oauth2: createOAuth2Provider(),\n  oidc: createOidcProvider(),\n  onelogin: createOneLoginProvider(),\n  awsalb: createAwsAlbProvider(),\n  bitbucket: createBitbucketProvider(),\n  atlassian: createAtlassianProvider(),\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Router from 'express-promise-router';\nimport { TokenIssuer } from './types';\n\nexport type Options = {\n  baseUrl: string;\n  tokenIssuer: TokenIssuer;\n};\n\nexport function createOidcRouter(options: Options) {\n  const { baseUrl, tokenIssuer } = options;\n\n  const router = Router();\n\n  const config = {\n    issuer: baseUrl,\n    token_endpoint: `${baseUrl}/v1/token`,\n    userinfo_endpoint: `${baseUrl}/v1/userinfo`,\n    jwks_uri: `${baseUrl}/.well-known/jwks.json`,\n    response_types_supported: ['id_token'],\n    subject_types_supported: ['public'],\n    id_token_signing_alg_values_supported: ['RS256'],\n    scopes_supported: ['openid'],\n    token_endpoint_auth_methods_supported: [],\n    claims_supported: ['sub'],\n    grant_types_supported: [],\n  };\n\n  router.get('/.well-known/openid-configuration', (_req, res) => {\n    res.json(config);\n  });\n\n  router.get('/.well-known/jwks.json', async (_req, res) => {\n    const { keys } = await tokenIssuer.listPublicKeys();\n    res.json({ keys });\n  });\n\n  router.get('/v1/token', (_req, res) => {\n    res.status(501).send('Not Implemented');\n  });\n\n  router.get('/v1/userinfo', (_req, res) => {\n    res.status(501).send('Not Implemented');\n  });\n\n  return router;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TokenIssuer, TokenParams, KeyStore, AnyJWK } from './types';\nimport { JSONWebKey, JWK, JWS } from 'jose';\nimport { Logger } from 'winston';\nimport { v4 as uuid } from 'uuid';\nimport { DateTime } from 'luxon';\nimport { parseEntityRef } from '@backstage/catalog-model';\n\nconst MS_IN_S = 1000;\n\ntype Options = {\n  logger: Logger;\n  /** Value of the issuer claim in issued tokens */\n  issuer: string;\n  /** Key store used for storing signing keys */\n  keyStore: KeyStore;\n  /** Expiration time of signing keys in seconds */\n  keyDurationSeconds: number;\n};\n\n/**\n * A token issuer that is able to issue tokens in a distributed system\n * backed by a single database. Tokens are issued using lazily generated\n * signing keys, where each running instance of the auth service uses its own\n * signing key.\n *\n * The public parts of the keys are all stored in the shared key storage,\n * and any of the instances of the auth service will return the full list\n * of public keys that are currently in storage.\n *\n * Signing keys are automatically rotated at the same interval as the token\n * duration. Expired keys are kept in storage until there are no valid tokens\n * in circulation that could have been signed by that key.\n */\nexport class TokenFactory implements TokenIssuer {\n  private readonly issuer: string;\n  private readonly logger: Logger;\n  private readonly keyStore: KeyStore;\n  private readonly keyDurationSeconds: number;\n\n  private keyExpiry?: Date;\n  private privateKeyPromise?: Promise<JSONWebKey>;\n\n  constructor(options: Options) {\n    this.issuer = options.issuer;\n    this.logger = options.logger;\n    this.keyStore = options.keyStore;\n    this.keyDurationSeconds = options.keyDurationSeconds;\n  }\n\n  async issueToken(params: TokenParams): Promise<string> {\n    const key = await this.getKey();\n\n    const iss = this.issuer;\n    const sub = params.claims.sub;\n    const ent = params.claims.ent;\n    const aud = 'backstage';\n    const iat = Math.floor(Date.now() / MS_IN_S);\n    const exp = iat + this.keyDurationSeconds;\n\n    // Validate that the subject claim is a valid EntityRef\n    try {\n      parseEntityRef(sub);\n    } catch (error) {\n      throw new Error(\n        '\"sub\" claim provided by the auth resolver is not a valid EntityRef.',\n      );\n    }\n\n    this.logger.info(`Issuing token for ${sub}, with entities ${ent ?? []}`);\n\n    return JWS.sign({ iss, sub, aud, iat, exp, ent }, key, {\n      alg: key.alg,\n      kid: key.kid,\n    });\n  }\n\n  // This will be called by other services that want to verify ID tokens.\n  // It is important that it returns a list of all public keys that could\n  // have been used to sign tokens that have not yet expired.\n  async listPublicKeys(): Promise<{ keys: AnyJWK[] }> {\n    const { items: keys } = await this.keyStore.listKeys();\n\n    const validKeys = [];\n    const expiredKeys = [];\n\n    for (const key of keys) {\n      // Allow for a grace period of another full key duration before we remove the keys from the database\n      const expireAt = DateTime.fromJSDate(key.createdAt).plus({\n        seconds: 3 * this.keyDurationSeconds,\n      });\n      if (expireAt < DateTime.local()) {\n        expiredKeys.push(key);\n      } else {\n        validKeys.push(key);\n      }\n    }\n\n    // Lazily prune expired keys. This may cause duplicate removals if we have concurrent callers, but w/e\n    if (expiredKeys.length > 0) {\n      const kids = expiredKeys.map(({ key }) => key.kid);\n\n      this.logger.info(`Removing expired signing keys, '${kids.join(\"', '\")}'`);\n\n      // We don't await this, just let it run in the background\n      this.keyStore.removeKeys(kids).catch(error => {\n        this.logger.error(`Failed to remove expired keys, ${error}`);\n      });\n    }\n\n    // NOTE: we're currently only storing public keys, but if we start storing private keys we'd have to convert here\n    return { keys: validKeys.map(({ key }) => key) };\n  }\n\n  private async getKey(): Promise<JSONWebKey> {\n    // Make sure that we only generate one key at a time\n    if (this.privateKeyPromise) {\n      if (\n        this.keyExpiry &&\n        DateTime.fromJSDate(this.keyExpiry) > DateTime.local()\n      ) {\n        return this.privateKeyPromise;\n      }\n      this.logger.info(`Signing key has expired, generating new key`);\n      delete this.privateKeyPromise;\n    }\n\n    this.keyExpiry = DateTime.utc()\n      .plus({\n        seconds: this.keyDurationSeconds,\n      })\n      .toJSDate();\n    const promise = (async () => {\n      // This generates a new signing key to be used to sign tokens until the next key rotation\n      const key = await JWK.generate('EC', 'P-256', {\n        use: 'sig',\n        kid: uuid(),\n        alg: 'ES256',\n      });\n\n      // We're not allowed to use the key until it has been successfully stored\n      // TODO: some token verification implementations aggressively cache the list of keys, and\n      //       don't attempt to fetch new ones even if they encounter an unknown kid. Therefore we\n      //       may want to keep using the existing key for some period of time until we switch to\n      //       the new one. This also needs to be implemented cross-service though, meaning new services\n      //       that boot up need to be able to grab an existing key to use for signing.\n      this.logger.info(`Created new signing key ${key.kid}`);\n      await this.keyStore.addKey(key.toJWK(false) as unknown as AnyJWK);\n\n      // At this point we are allowed to start using the new key\n      return key as JSONWebKey;\n    })();\n\n    this.privateKeyPromise = promise;\n\n    try {\n      // If we fail to generate a new key, we need to clear the state so that\n      // the next caller will try to generate another key.\n      await promise;\n    } catch (error) {\n      this.logger.error(`Failed to generate new signing key, ${error}`);\n      delete this.keyExpiry;\n      delete this.privateKeyPromise;\n    }\n\n    return promise;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { AnyJWK, KeyStore, StoredKey } from './types';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-auth-backend',\n  'migrations',\n);\n\nconst TABLE = 'signing_keys';\n\ntype Row = {\n  created_at: Date; // row.created_at is a string after being returned from the database\n  kid: string;\n  key: string;\n};\n\ntype Options = {\n  database: Knex;\n};\n\nconst parseDate = (date: string | Date) => {\n  const parsedDate =\n    typeof date === 'string'\n      ? DateTime.fromSQL(date, { zone: 'UTC' })\n      : DateTime.fromJSDate(date);\n\n  if (!parsedDate.isValid) {\n    throw new Error(\n      `Failed to parse date, reason: ${parsedDate.invalidReason}, explanation: ${parsedDate.invalidExplanation}`,\n    );\n  }\n\n  return parsedDate.toJSDate();\n};\n\nexport class DatabaseKeyStore implements KeyStore {\n  static async create(options: Options): Promise<DatabaseKeyStore> {\n    const { database } = options;\n\n    await database.migrate.latest({\n      directory: migrationsDir,\n    });\n\n    return new DatabaseKeyStore(options);\n  }\n\n  private readonly database: Knex;\n\n  private constructor(options: Options) {\n    this.database = options.database;\n  }\n\n  async addKey(key: AnyJWK): Promise<void> {\n    await this.database<Row>(TABLE).insert({\n      kid: key.kid,\n      key: JSON.stringify(key),\n    });\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    const rows = await this.database<Row>(TABLE).select();\n\n    return {\n      items: rows.map(row => ({\n        key: JSON.parse(row.key),\n        createdAt: parseDate(row.created_at),\n      })),\n    };\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    await this.database(TABLE).delete().whereIn('kid', kids);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { KeyStore, AnyJWK, StoredKey } from './types';\nimport { DateTime } from 'luxon';\n\nexport class MemoryKeyStore implements KeyStore {\n  private readonly keys = new Map<string, { createdAt: Date; key: string }>();\n\n  async addKey(key: AnyJWK): Promise<void> {\n    this.keys.set(key.kid, {\n      createdAt: DateTime.utc().toJSDate(),\n      key: JSON.stringify(key),\n    });\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    for (const kid of kids) {\n      this.keys.delete(kid);\n    }\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    return {\n      items: Array.from(this.keys).map(([, { createdAt, key: keyStr }]) => ({\n        createdAt,\n        key: JSON.parse(keyStr),\n      })),\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport {\n  DocumentData,\n  Firestore,\n  QuerySnapshot,\n  Settings,\n  WriteResult,\n} from '@google-cloud/firestore';\n\nimport { AnyJWK, KeyStore, StoredKey } from './types';\n\nexport type FirestoreKeyStoreSettings = Settings & Options;\n\ntype Options = {\n  path?: string;\n  timeout?: number;\n};\n\nexport const DEFAULT_TIMEOUT_MS = 10000;\nexport const DEFAULT_DOCUMENT_PATH = 'sessions';\n\nexport class FirestoreKeyStore implements KeyStore {\n  static async create(\n    settings?: FirestoreKeyStoreSettings,\n  ): Promise<FirestoreKeyStore> {\n    const { path, timeout, ...firestoreSettings } = settings ?? {};\n    const database = new Firestore(firestoreSettings);\n\n    return new FirestoreKeyStore(\n      database,\n      path ?? DEFAULT_DOCUMENT_PATH,\n      timeout ?? DEFAULT_TIMEOUT_MS,\n    );\n  }\n\n  private constructor(\n    private readonly database: Firestore,\n    private readonly path: string,\n    private readonly timeout: number,\n  ) {}\n\n  static async verifyConnection(\n    keyStore: FirestoreKeyStore,\n    logger?: Logger,\n  ): Promise<void> {\n    try {\n      await keyStore.verify();\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'development') {\n        throw new Error(\n          `Failed to connect to database: ${(error as Error).message}`,\n        );\n      }\n      logger?.warn(\n        `Failed to connect to database: ${(error as Error).message}`,\n      );\n    }\n  }\n\n  async addKey(key: AnyJWK): Promise<void> {\n    await this.withTimeout<WriteResult>(\n      this.database\n        .collection(this.path)\n        .doc(key.kid)\n        .set({\n          kid: key.kid,\n          key: JSON.stringify(key),\n        }),\n    );\n  }\n\n  async listKeys(): Promise<{ items: StoredKey[] }> {\n    const keys = await this.withTimeout<QuerySnapshot<DocumentData>>(\n      this.database.collection(this.path).get(),\n    );\n\n    return {\n      items: keys.docs.map(key => ({\n        key: key.data() as AnyJWK,\n        createdAt: key.createTime.toDate(),\n      })),\n    };\n  }\n\n  async removeKeys(kids: string[]): Promise<void> {\n    // This is probably really slow, but it's done async in the background\n    for (const kid of kids) {\n      await this.withTimeout<WriteResult>(\n        this.database.collection(this.path).doc(kid).delete(),\n      );\n    }\n\n    /**\n     * This could be achieved with batching but there's a couple of limitations with that:\n     *\n     * - A batched write can contain a maximum of 500 operations\n     *  https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n     *\n     * - The \"in\" operator can combine a maximum of 10 equality clauses\n     *  https://firebase.google.com/docs/firestore/query-data/queries#in_not-in_and_array-contains-any\n     *\n     * Example:\n     *\n     *  const batch = this.database.batch();\n     *  const docs = await this.database\n     *    .collection(this.path)\n     *    .where('kid', 'in', kids)\n     *    .get();\n     *  docs.forEach(doc => {\n     *    batch.delete(doc.ref);\n     *  });\n     *  await batch.commit();\n     *\n     */\n  }\n\n  /**\n   * Helper function to allow us to modify the timeout used when\n   * performing Firestore database operations.\n   *\n   * The reason for this is that it seems that there's no other\n   * practical solution to change the default timeout of 10mins\n   * that Firestore has.\n   *\n   */\n  private async withTimeout<T>(operation: Promise<T>): Promise<T> {\n    const timer = new Promise<never>((_, reject) =>\n      setTimeout(() => {\n        reject(new Error(`Operation timed out after ${this.timeout}ms`));\n      }, this.timeout),\n    );\n    return Promise.race<T>([operation, timer]);\n  }\n\n  /**\n   * Used to verify that the database is reachable.\n   */\n  private async verify(): Promise<void> {\n    await this.withTimeout(this.database.collection(this.path).limit(1).get());\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport { pickBy } from 'lodash';\n\nimport { PluginDatabaseManager } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\n\nimport { DatabaseKeyStore } from './DatabaseKeyStore';\nimport { MemoryKeyStore } from './MemoryKeyStore';\nimport { FirestoreKeyStore } from './FirestoreKeyStore';\nimport { KeyStore } from './types';\n\ntype Options = {\n  logger?: Logger;\n  database?: PluginDatabaseManager;\n};\n\nexport class KeyStores {\n  /**\n   * Looks at the `auth.keyStore` section in the application configuration\n   * and returns a KeyStore store. Defaults to `database`\n   *\n   * @returns a KeyStore store\n   */\n  static async fromConfig(\n    config: Config,\n    options?: Options,\n  ): Promise<KeyStore> {\n    const { logger, database } = options ?? {};\n\n    const ks = config.getOptionalConfig('auth.keyStore');\n    const provider = ks?.getOptionalString('provider') ?? 'database';\n\n    logger?.info(`Configuring \"${provider}\" as KeyStore provider`);\n\n    if (provider === 'database') {\n      if (!database) {\n        throw new Error('This KeyStore provider requires a database');\n      }\n\n      return await DatabaseKeyStore.create({\n        database: await database.getClient(),\n      });\n    }\n\n    if (provider === 'memory') {\n      return new MemoryKeyStore();\n    }\n\n    if (provider === 'firestore') {\n      const settings = ks?.getConfig(provider);\n\n      const keyStore = await FirestoreKeyStore.create(\n        pickBy(\n          {\n            projectId: settings?.getOptionalString('projectId'),\n            keyFilename: settings?.getOptionalString('keyFilename'),\n            host: settings?.getOptionalString('host'),\n            port: settings?.getOptionalNumber('port'),\n            ssl: settings?.getOptionalBoolean('ssl'),\n            path: settings?.getOptionalString('path'),\n            timeout: settings?.getOptionalNumber('timeout'),\n          },\n          value => value !== undefined,\n        ),\n      );\n      await FirestoreKeyStore.verifyConnection(keyStore, logger);\n\n      return keyStore;\n    }\n\n    throw new Error(`Unknown KeyStore provider: ${provider}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport cookieParser from 'cookie-parser';\nimport { Logger } from 'winston';\nimport {\n  defaultAuthProviderFactories,\n  AuthProviderFactory,\n} from '../providers';\nimport {\n  PluginDatabaseManager,\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport { assertError, NotFoundError } from '@backstage/errors';\nimport { CatalogClient } from '@backstage/catalog-client';\nimport { Config } from '@backstage/config';\nimport { createOidcRouter, TokenFactory, KeyStores } from '../identity';\nimport session from 'express-session';\nimport passport from 'passport';\nimport { Minimatch } from 'minimatch';\n\ntype ProviderFactories = { [s: string]: AuthProviderFactory };\n\nexport interface RouterOptions {\n  logger: Logger;\n  database: PluginDatabaseManager;\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  tokenManager: TokenManager;\n  providerFactories?: ProviderFactories;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const {\n    logger,\n    config,\n    discovery,\n    database,\n    tokenManager,\n    providerFactories,\n  } = options;\n  const router = Router();\n\n  const appUrl = config.getString('app.baseUrl');\n  const authUrl = await discovery.getExternalBaseUrl('auth');\n\n  const keyStore = await KeyStores.fromConfig(config, { logger, database });\n  const keyDurationSeconds = 3600;\n\n  const tokenIssuer = new TokenFactory({\n    issuer: authUrl,\n    keyStore,\n    keyDurationSeconds,\n    logger: logger.child({ component: 'token-factory' }),\n  });\n  const catalogApi = new CatalogClient({ discoveryApi: discovery });\n\n  const secret = config.getOptionalString('auth.session.secret');\n  if (secret) {\n    router.use(cookieParser(secret));\n    // TODO: Configure the server-side session storage.  The default MemoryStore is not designed for production\n    const enforceCookieSSL = authUrl.startsWith('https');\n    router.use(\n      session({\n        secret,\n        saveUninitialized: false,\n        resave: false,\n        cookie: { secure: enforceCookieSSL ? 'auto' : false },\n      }),\n    );\n    router.use(passport.initialize());\n    router.use(passport.session());\n  } else {\n    router.use(cookieParser());\n  }\n  router.use(express.urlencoded({ extended: false }));\n  router.use(express.json());\n\n  const allProviderFactories = {\n    ...defaultAuthProviderFactories,\n    ...providerFactories,\n  };\n  const providersConfig = config.getConfig('auth.providers');\n  const configuredProviders = providersConfig.keys();\n\n  const isOriginAllowed = createOriginFilter(config);\n\n  for (const [providerId, providerFactory] of Object.entries(\n    allProviderFactories,\n  )) {\n    if (configuredProviders.includes(providerId)) {\n      logger.info(`Configuring provider, ${providerId}`);\n      try {\n        const provider = providerFactory({\n          providerId,\n          globalConfig: {\n            baseUrl: authUrl,\n            appUrl,\n            isOriginAllowed,\n          },\n          config: providersConfig.getConfig(providerId),\n          logger,\n          tokenManager,\n          tokenIssuer,\n          discovery,\n          catalogApi,\n        });\n\n        const r = Router();\n\n        r.get('/start', provider.start.bind(provider));\n        r.get('/handler/frame', provider.frameHandler.bind(provider));\n        r.post('/handler/frame', provider.frameHandler.bind(provider));\n        if (provider.logout) {\n          r.post('/logout', provider.logout.bind(provider));\n        }\n        if (provider.refresh) {\n          r.get('/refresh', provider.refresh.bind(provider));\n        }\n\n        router.use(`/${providerId}`, r);\n      } catch (e) {\n        assertError(e);\n        if (process.env.NODE_ENV !== 'development') {\n          throw new Error(\n            `Failed to initialize ${providerId} auth provider, ${e.message}`,\n          );\n        }\n\n        logger.warn(`Skipping ${providerId} auth provider, ${e.message}`);\n\n        router.use(`/${providerId}`, () => {\n          // If the user added the provider under auth.providers but the clientId and clientSecret etc. were not found.\n          throw new NotFoundError(\n            `Auth provider registered for '${providerId}' is misconfigured. This could mean the configs under ` +\n              `auth.providers.${providerId} are missing or the environment variables used are not defined. ` +\n              `Check the auth backend plugin logs when the backend starts to see more details.`,\n          );\n        });\n      }\n    } else {\n      router.use(`/${providerId}`, () => {\n        throw new NotFoundError(\n          `No auth provider registered for '${providerId}'`,\n        );\n      });\n    }\n  }\n\n  router.use(\n    createOidcRouter({\n      tokenIssuer,\n      baseUrl: authUrl,\n    }),\n  );\n\n  router.use('/:provider/', req => {\n    const { provider } = req.params;\n    throw new NotFoundError(`Unknown auth provider '${provider}'`);\n  });\n\n  return router;\n}\n\nexport function createOriginFilter(\n  config: Config,\n): (origin: string) => boolean {\n  const appUrl = config.getString('app.baseUrl');\n  const { origin: appOrigin } = new URL(appUrl);\n\n  const allowedOrigins = config.getOptionalStringArray(\n    'auth.experimentalExtraAllowedOrigins',\n  );\n\n  const allowedOriginPatterns =\n    allowedOrigins?.map(\n      pattern => new Minimatch(pattern, { nocase: true, noglobstar: true }),\n    ) ?? [];\n\n  return origin => {\n    if (origin === appOrigin) {\n      return true;\n    }\n    return allowedOriginPatterns.some(pattern => pattern.match(origin));\n  };\n}\n"],"names":["OAuth2Strategy","InternalOAuthError","pickBy","InputError","NotFoundError","crypto","stringifyEntityRef","parseEntityRef","DEFAULT_NAMESPACE","URL","NotAllowedError","isError","AuthenticationError","jwtDecoder","ConflictError","RELATION_MEMBER_OF","defaultSignInResolver","NodeCache","JWT","fetch","BitbucketStrategy","GithubStrategy","GitlabStrategy","GoogleStrategy","MicrosoftStrategy","getBearerTokenFromAuthorizationHeader","Issuer","OidcStrategy","OktaStrategy","OneLoginStrategy","SamlStrategy","OAuth2Client","Router","JWS","DateTime","JWK","uuid","resolvePackagePath","Firestore","CatalogClient","cookieParser","session","passport","express","defaultAuthProviderFactories","assertError","Minimatch"],"mappings":"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"}