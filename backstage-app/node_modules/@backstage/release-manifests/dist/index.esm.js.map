{"version":3,"file":"index.esm.js","sources":["../src/manifest.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\n\nconst VERSIONS_DOMAIN = 'https://versions.backstage.io';\n\n/**\n * Contains mapping between Backstage release and package versions.\n * @public\n */\nexport type ReleaseManifest = {\n  releaseVersion: string;\n  packages: { name: string; version: string }[];\n};\n\n/**\n * Options for {@link getManifestByVersion}.\n * @public\n */\nexport type GetManifestByVersionOptions = {\n  version: string;\n};\n\n/**\n * Returns a release manifest based on supplied version.\n * @public\n */\nexport async function getManifestByVersion(\n  options: GetManifestByVersionOptions,\n): Promise<ReleaseManifest> {\n  const url = `${VERSIONS_DOMAIN}/v1/releases/${encodeURIComponent(\n    options.version,\n  )}/manifest.json`;\n  const response = await fetch(url);\n  if (response.status === 404) {\n    throw new Error(`No release found for ${options.version} version`);\n  }\n  if (response.status !== 200) {\n    throw new Error(\n      `Unexpected response status ${response.status} when fetching release from ${url}.`,\n    );\n  }\n  return await response.json();\n}\n\n/**\n * Options for {@link getManifestByReleaseLine}.\n * @public\n */\nexport type GetManifestByReleaseLineOptions = {\n  releaseLine: string;\n};\n\n/**\n * Returns a release manifest based on supplied release line.\n * @public\n */\nexport async function getManifestByReleaseLine(\n  options: GetManifestByReleaseLineOptions,\n): Promise<ReleaseManifest> {\n  const url = `${VERSIONS_DOMAIN}/v1/tags/${encodeURIComponent(\n    options.releaseLine,\n  )}/manifest.json`;\n  const response = await fetch(url);\n  if (response.status === 404) {\n    throw new Error(`No '${options.releaseLine}' release line found`);\n  }\n  if (response.status !== 200) {\n    throw new Error(\n      `Unexpected response status ${response.status} when fetching release from ${url}.`,\n    );\n  }\n  return await response.json();\n}\n"],"names":[],"mappings":";;AAkBA,MAAM,kBAAkB;oCAwBtB,SAC0B;AAC1B,QAAM,MAAM,GAAG,+BAA+B,mBAC5C,QAAQ;AAEV,QAAM,WAAW,MAAM,MAAM;AAC7B,MAAI,SAAS,WAAW,KAAK;AAC3B,UAAM,IAAI,MAAM,wBAAwB,QAAQ;AAAA;AAElD,MAAI,SAAS,WAAW,KAAK;AAC3B,UAAM,IAAI,MACR,8BAA8B,SAAS,qCAAqC;AAAA;AAGhF,SAAO,MAAM,SAAS;AAAA;wCAgBtB,SAC0B;AAC1B,QAAM,MAAM,GAAG,2BAA2B,mBACxC,QAAQ;AAEV,QAAM,WAAW,MAAM,MAAM;AAC7B,MAAI,SAAS,WAAW,KAAK;AAC3B,UAAM,IAAI,MAAM,OAAO,QAAQ;AAAA;AAEjC,MAAI,SAAS,WAAW,KAAK;AAC3B,UAAM,IAAI,MACR,8BAA8B,SAAS,qCAAqC;AAAA;AAGhF,SAAO,MAAM,SAAS;AAAA;;;;"}