{"version":3,"file":"index.cjs.js","sources":["../src/database/tables.ts","../src/database/migrateBackendTasks.ts","../src/tasks/types.ts","../src/tasks/util.ts","../src/tasks/TaskWorker.ts","../src/tasks/PluginTaskSchedulerImpl.ts","../src/tasks/PluginTaskSchedulerJanitor.ts","../src/tasks/TaskScheduler.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DB_MIGRATIONS_TABLE = 'backstage_backend_tasks__knex_migrations';\nexport const DB_TASKS_TABLE = 'backstage_backend_tasks__tasks';\n\nexport type DbTasksRow = {\n  id: string;\n  settings_json: string;\n  next_run_start_at: Date;\n  current_run_ticket?: string;\n  current_run_started_at?: Date | string;\n  current_run_expires_at?: Date | string;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\nimport { DB_MIGRATIONS_TABLE } from './tables';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/backend-tasks',\n  'migrations',\n);\n\nexport async function migrateBackendTasks(knex: Knex): Promise<void> {\n  await knex.migrate.latest({\n    directory: migrationsDir,\n    tableName: DB_MIGRATIONS_TABLE,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { z } from 'zod';\nimport { CronTime } from 'cron';\n\n/**\n * A function that can be called as a scheduled task.\n *\n * It may optionally accept an abort signal argument. When the signal triggers,\n * processing should abort and return as quickly as possible.\n *\n * @public\n */\nexport type TaskFunction =\n  | ((abortSignal: AbortSignal) => void | Promise<void>)\n  | (() => void | Promise<void>);\n\n/**\n * Options that control the scheduling of a task.\n *\n * @public\n */\nexport interface TaskScheduleDefinition {\n  /**\n   * How often you want the task to run. The system does its best to avoid\n   * overlapping invocations.\n   *\n   * This is a best effort value; under some circumstances there can be\n   * deviations. For example, if the task runtime is longer than the frequency\n   * and the timeout has not been given or not been exceeded yet, the next\n   * invocation of this task will be delayed until after the previous one\n   * finishes.\n   *\n   * This is a required field.\n   */\n  frequency:\n    | {\n        /**\n         * A crontab style string.\n         *\n         * Overview:\n         *\n         * ```\n         *   ┌────────────── second (optional)\n         *   │ ┌──────────── minute\n         *   │ │ ┌────────── hour\n         *   │ │ │ ┌──────── day of month\n         *   │ │ │ │ ┌────── month\n         *   │ │ │ │ │ ┌──── day of week\n         *   │ │ │ │ │ │\n         *   │ │ │ │ │ │\n         *   * * * * * *\n         * ```\n         */\n        cron: string;\n      }\n    | Duration;\n\n  /**\n   * The maximum amount of time that a single task invocation can take, before\n   * it's considered timed out and gets \"released\" such that a new invocation\n   * is permitted to take place (possibly, then, on a different worker).\n   */\n  timeout: Duration;\n\n  /**\n   * The amount of time that should pass before the first invocation happens.\n   *\n   * This can be useful in cold start scenarios to stagger or delay some heavy\n   * compute jobs.\n   *\n   * If no value is given for this field then the first invocation will happen\n   * as soon as possible according to the cadence.\n   */\n  initialDelay?: Duration;\n}\n\n/**\n * Options that apply to the invocation of a given task.\n *\n * @public\n */\nexport interface TaskInvocationDefinition {\n  /**\n   * A unique ID (within the scope of the plugin) for the task.\n   */\n  id: string;\n\n  /**\n   * The actual task function to be invoked regularly.\n   */\n  fn: TaskFunction;\n\n  /**\n   * An abort signal that, when triggered, will stop the recurring execution of\n   * the task.\n   */\n  signal?: AbortSignal;\n}\n\n/**\n * A previously prepared task schedule, ready to be invoked.\n *\n * @public\n */\nexport interface TaskRunner {\n  /**\n   * Takes the schedule and executes an actual task using it.\n   *\n   * @param task - The actual runtime properties of the task\n   */\n  run(task: TaskInvocationDefinition): Promise<void>;\n}\n\n/**\n * Deals with the scheduling of distributed tasks, for a given plugin.\n *\n * @public\n */\nexport interface PluginTaskScheduler {\n  /**\n   * Schedules a task function for coordinated exclusive invocation across\n   * workers. This convenience method performs both the scheduling and\n   * invocation in one go.\n   *\n   * @remarks\n   *\n   * If the task was already scheduled since before by us or by another party,\n   * its options are just overwritten with the given options, and things\n   * continue from there.\n   *\n   * @param task - The task definition\n   */\n  scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void>;\n\n  /**\n   * Creates a scheduled but dormant recurring task, ready to be launched at a\n   * later time.\n   *\n   * @remarks\n   *\n   * This method is useful for pre-creating a schedule in outer code to be\n   * passed into an inner implementation, such that the outer code controls\n   * scheduling while inner code controls implementation.\n   *\n   * @param schedule - The task schedule\n   */\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner;\n}\n\nfunction isValidOptionalDurationString(d: string | undefined): boolean {\n  try {\n    return !d || Duration.fromISO(d).isValid;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidCronFormat(c: string | undefined): boolean {\n  try {\n    if (!c) {\n      return false;\n    }\n    // parse cron format to ensure it's a valid format.\n    // eslint-disable-next-line no-new\n    new CronTime(c);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const taskSettingsV1Schema = z.object({\n  version: z.literal(1),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  recurringAtMostEveryDuration: z\n    .string()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n});\n\n/**\n * The properties that control a scheduled task (version 1).\n */\nexport type TaskSettingsV1 = z.infer<typeof taskSettingsV1Schema>;\n\nexport const taskSettingsV2Schema = z.object({\n  version: z.literal(2),\n  cadence: z\n    .string()\n    .refine(isValidCronFormat, { message: 'Invalid cron' })\n    .or(\n      z.string().refine(isValidOptionalDurationString, {\n        message: 'Invalid duration, expecting ISO Period',\n      }),\n    ),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n});\n\n/**\n * The properties that control a scheduled task (version 2).\n */\nexport type TaskSettingsV2 = z.infer<typeof taskSettingsV2Schema>;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortController, AbortSignal } from 'node-abort-controller';\n\n// Keep the IDs compatible with e.g. Prometheus labels\nexport function validateId(id: string) {\n  if (typeof id !== 'string' || !id.trim()) {\n    throw new InputError(`${id} is not a valid ID, expected non-empty string`);\n  }\n}\n\nexport function dbTime(t: Date | string): DateTime {\n  if (typeof t === 'string') {\n    return DateTime.fromSQL(t);\n  }\n  return DateTime.fromJSDate(t);\n}\n\nexport function nowPlus(duration: Duration | undefined, knex: Knex) {\n  const seconds = duration?.as('seconds') ?? 0;\n  if (!seconds) {\n    return knex.fn.now();\n  }\n  return knex.client.config.client.includes('sqlite3')\n    ? knex.raw(`datetime('now', ?)`, [`${seconds} seconds`])\n    : knex.raw(`now() + interval '${seconds} seconds'`);\n}\n\n/**\n * Sleep for the given duration, but return sooner if the abort signal\n * triggers.\n *\n * @param duration - The amount of time to sleep, at most\n * @param abortSignal - An optional abort signal that short circuits the wait\n */\nexport async function sleep(\n  duration: Duration,\n  abortSignal?: AbortSignal,\n): Promise<void> {\n  if (abortSignal?.aborted) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    let timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\n    const done = () => {\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      abortSignal?.removeEventListener('abort', done);\n      resolve();\n    };\n\n    timeoutHandle = setTimeout(done, duration.as('milliseconds'));\n    abortSignal?.addEventListener('abort', done);\n  });\n}\n\n/**\n * Creates a new AbortController that, in addition to working as a regular\n * standalone controller, also gets aborted if the given parent signal\n * reaches aborted state.\n *\n * @param parent - The \"parent\" signal that can trigger the delegate\n */\nexport function delegateAbortController(parent?: AbortSignal): AbortController {\n  const delegate = new AbortController();\n\n  if (parent) {\n    if (parent.aborted) {\n      delegate.abort();\n    } else {\n      const onParentAborted = () => {\n        delegate.abort();\n      };\n\n      const onChildAborted = () => {\n        parent.removeEventListener('abort', onParentAborted);\n      };\n\n      parent.addEventListener('abort', onParentAborted, { once: true });\n      delegate.signal.addEventListener('abort', onChildAborted, { once: true });\n    }\n  }\n\n  return delegate;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { v4 as uuid } from 'uuid';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { TaskFunction, TaskSettingsV2, taskSettingsV2Schema } from './types';\nimport { delegateAbortController, nowPlus, sleep } from './util';\nimport { CronTime } from 'cron';\n\nconst WORK_CHECK_FREQUENCY = Duration.fromObject({ seconds: 5 });\n\n/**\n * Performs the actual work of a task.\n *\n * @private\n */\nexport class TaskWorker {\n  private readonly taskId: string;\n  private readonly fn: TaskFunction;\n  private readonly knex: Knex;\n  private readonly logger: Logger;\n\n  constructor(taskId: string, fn: TaskFunction, knex: Knex, logger: Logger) {\n    this.taskId = taskId;\n    this.fn = fn;\n    this.knex = knex;\n    this.logger = logger;\n  }\n\n  async start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    try {\n      await this.persistTask(settings);\n    } catch (e) {\n      throw new Error(`Failed to persist task, ${e}`);\n    }\n\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    (async () => {\n      try {\n        while (!options?.signal?.aborted) {\n          const runResult = await this.runOnce(options?.signal);\n          if (runResult.result === 'abort') {\n            break;\n          }\n\n          await sleep(WORK_CHECK_FREQUENCY, options?.signal);\n        }\n        this.logger.info(`Task worker finished: ${this.taskId}`);\n      } catch (e) {\n        this.logger.warn(`Task worker failed unexpectedly, ${e}`);\n      }\n    })();\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion, if ready.\n   *\n   * @returns The outcome of the attempt\n   */\n  async runOnce(\n    signal?: AbortSignal,\n  ): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'failed' }\n    | { result: 'completed' }\n  > {\n    const findResult = await this.findReadyTask();\n    if (\n      findResult.result === 'not-ready-yet' ||\n      findResult.result === 'abort'\n    ) {\n      return findResult;\n    }\n\n    const taskSettings = findResult.settings;\n    const ticket = uuid();\n\n    const claimed = await this.tryClaimTask(ticket, taskSettings);\n    if (!claimed) {\n      return { result: 'not-ready-yet' };\n    }\n\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(taskSettings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n    } catch (e) {\n      await this.tryReleaseTask(ticket, taskSettings);\n      return { result: 'failed' };\n    } finally {\n      clearTimeout(timeoutHandle);\n    }\n\n    await this.tryReleaseTask(ticket, taskSettings);\n    return { result: 'completed' };\n  }\n\n  /**\n   * Perform the initial store of the task info\n   */\n  async persistTask(settings: TaskSettingsV2) {\n    // Perform an initial parse to ensure that we will definitely be able to\n    // read it back again.\n    taskSettingsV2Schema.parse(settings);\n\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let startAt: Knex.Raw;\n    if (settings.initialDelayDuration) {\n      startAt = nowPlus(\n        Duration.fromISO(settings.initialDelayDuration),\n        this.knex,\n      );\n    } else if (isCron) {\n      const time = new CronTime(settings.cadence)\n        .sendAt()\n        .add({ seconds: -1 }) // immediately, if \"* * * * * *\"\n        .toISOString();\n      startAt = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      startAt = this.knex.fn.now();\n    }\n\n    this.logger.debug(`task: ${this.taskId} configured to run at: ${startAt}`);\n\n    // It's OK if the task already exists; if it does, just replace its\n    // settings with the new value and start the loop as usual.\n    await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .insert({\n        id: this.taskId,\n        settings_json: JSON.stringify(settings),\n        next_run_start_at: startAt,\n      })\n      .onConflict('id')\n      .merge(['settings_json']);\n  }\n\n  /**\n   * Check if the task is ready to run\n   */\n  async findReadyTask(): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'ready'; settings: TaskSettingsV2 }\n  > {\n    const [row] = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .select({\n        settingsJson: 'settings_json',\n        ready: this.knex.raw(\n          `CASE\n            WHEN next_run_start_at <= ? AND current_run_ticket IS NULL THEN TRUE\n            ELSE FALSE\n          END`,\n          [this.knex.fn.now()],\n        ),\n      });\n\n    if (!row) {\n      this.logger.info(\n        'No longer able to find task; aborting and assuming that it has been unregistered or expired',\n      );\n      return { result: 'abort' };\n    } else if (!row.ready) {\n      return { result: 'not-ready-yet' };\n    }\n\n    try {\n      const obj = JSON.parse(row.settingsJson);\n      const settings = taskSettingsV2Schema.parse(obj);\n      return { result: 'ready', settings };\n    } catch (e) {\n      this.logger.info(\n        `Task \"${this.taskId}\" is no longer able to parse task settings; aborting and assuming that a ` +\n          `newer version of the task has been issued and being handled by other workers, ${e}`,\n      );\n      return { result: 'abort' };\n    }\n  }\n\n  /**\n   * Attempts to claim a task that's ready for execution, on this worker's\n   * behalf. We should not attempt to perform the work unless the claim really\n   * goes through.\n   *\n   * @param ticket - A globally unique string that changes for each invocation\n   * @param settings - The settings of the task to claim\n   * @returns True if it was successfully claimed\n   */\n  async tryClaimTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const startedAt = this.knex.fn.now();\n    const expiresAt = settings.timeoutAfterDuration\n      ? nowPlus(Duration.fromISO(settings.timeoutAfterDuration), this.knex)\n      : this.knex.raw('null');\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        current_run_ticket: ticket,\n        current_run_started_at: startedAt,\n        current_run_expires_at: expiresAt,\n      });\n\n    return rows === 1;\n  }\n\n  async tryReleaseTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let nextRun: Knex.Raw;\n    if (isCron) {\n      const time = new CronTime(settings.cadence).sendAt().toISOString();\n      this.logger.debug(`task: ${this.taskId} will next occur around ${time}`);\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      const dt = Duration.fromISO(settings.cadence).as('seconds');\n      this.logger.debug(\n        `task: ${this.taskId} will next occur around ${DateTime.now().plus({\n          seconds: dt,\n        })}`,\n      );\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(next_run_start_at, ?)', [`+${dt} seconds`])\n        : this.knex.raw(`next_run_start_at + interval '${dt} seconds'`);\n    }\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .where('current_run_ticket', '=', ticket)\n      .update({\n        next_run_start_at: nextRun,\n        current_run_ticket: this.knex.raw('null'),\n        current_run_started_at: this.knex.raw('null'),\n        current_run_expires_at: this.knex.raw('null'),\n      });\n\n    return rows === 1;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Logger } from 'winston';\nimport { TaskWorker } from './TaskWorker';\nimport {\n  PluginTaskScheduler,\n  TaskInvocationDefinition,\n  TaskRunner,\n  TaskScheduleDefinition,\n} from './types';\nimport { validateId } from './util';\n\n/**\n * Implements the actual task management.\n */\nexport class PluginTaskSchedulerImpl implements PluginTaskScheduler {\n  constructor(\n    private readonly databaseFactory: () => Promise<Knex>,\n    private readonly logger: Logger,\n  ) {}\n\n  async scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void> {\n    validateId(task.id);\n\n    const knex = await this.databaseFactory();\n    const worker = new TaskWorker(task.id, task.fn, knex, this.logger);\n\n    await worker.start(\n      {\n        version: 2,\n        cadence:\n          'cron' in task.frequency\n            ? task.frequency.cron\n            : task.frequency.toISO(),\n        initialDelayDuration: task.initialDelay?.toISO(),\n        timeoutAfterDuration: task.timeout.toISO(),\n      },\n      {\n        signal: task.signal,\n      },\n    );\n  }\n\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { sleep } from './util';\n\n/**\n * Makes sure to auto-expire and clean up things that time out or for other\n * reasons should not be left lingering.\n */\nexport class PluginTaskSchedulerJanitor {\n  private readonly knex: Knex;\n  private readonly waitBetweenRuns: Duration;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    knex: Knex;\n    waitBetweenRuns: Duration;\n    logger: Logger;\n  }) {\n    this.knex = options.knex;\n    this.waitBetweenRuns = options.waitBetweenRuns;\n    this.logger = options.logger;\n  }\n\n  async start(abortSignal?: AbortSignal) {\n    while (!abortSignal?.aborted) {\n      try {\n        await this.runOnce();\n      } catch (e) {\n        this.logger.warn(`Error while performing janitorial tasks, ${e}`);\n      }\n\n      await sleep(this.waitBetweenRuns, abortSignal);\n    }\n  }\n\n  private async runOnce() {\n    // SQLite currently (Oct 1 2021) returns a number for returning()\n    // statements, effectively ignoring them and instead returning the outcome\n    // of the delete() - and knex also emits a warning about that fact, which\n    // is why we avoid that entirely for the sqlite3 family of drivers.\n    // https://github.com/knex/knex/issues/4370\n    // https://github.com/mapbox/node-sqlite3/issues/1453\n\n    const dbNull = this.knex.raw('null');\n\n    const tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('current_run_expires_at', '<', this.knex.fn.now())\n      .update({\n        current_run_ticket: dbNull,\n        current_run_started_at: dbNull,\n        current_run_expires_at: dbNull,\n      })\n      .returning(['id']);\n\n    // sqlite ignores \"returning\", returns number of rows changed instead\n    if (typeof tasks === 'number') {\n      if (tasks > 0) {\n        this.logger.warn(`${tasks} tasks timed out and were lost`);\n      }\n    } else {\n      for (const { id } of tasks) {\n        this.logger.warn(`Task timed out and was lost: ${id}`);\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseManager, getRootLogger } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport { once } from 'lodash';\nimport { Duration } from 'luxon';\nimport { Logger } from 'winston';\nimport { migrateBackendTasks } from '../database/migrateBackendTasks';\nimport { PluginTaskSchedulerImpl } from './PluginTaskSchedulerImpl';\nimport { PluginTaskSchedulerJanitor } from './PluginTaskSchedulerJanitor';\nimport { PluginTaskScheduler } from './types';\n\n/**\n * Deals with the scheduling of distributed tasks.\n *\n * @public\n */\nexport class TaskScheduler {\n  static fromConfig(\n    config: Config,\n    options?: {\n      databaseManager?: DatabaseManager;\n      logger?: Logger;\n    },\n  ): TaskScheduler {\n    const databaseManager =\n      options?.databaseManager ?? DatabaseManager.fromConfig(config);\n    const logger = (options?.logger || getRootLogger()).child({\n      type: 'taskManager',\n    });\n    return new TaskScheduler(databaseManager, logger);\n  }\n\n  constructor(\n    private readonly databaseManager: DatabaseManager,\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Instantiates a task manager instance for the given plugin.\n   *\n   * @param pluginId - The unique ID of the plugin, for example \"catalog\"\n   * @returns A {@link PluginTaskScheduler} instance\n   */\n  forPlugin(pluginId: string): PluginTaskScheduler {\n    const databaseFactory = once(async () => {\n      const knex = await this.databaseManager.forPlugin(pluginId).getClient();\n\n      await migrateBackendTasks(knex);\n\n      const janitor = new PluginTaskSchedulerJanitor({\n        knex,\n        waitBetweenRuns: Duration.fromObject({ minutes: 1 }),\n        logger: this.logger,\n      });\n      janitor.start();\n\n      return knex;\n    });\n\n    return new PluginTaskSchedulerImpl(\n      databaseFactory,\n      this.logger.child({ plugin: pluginId }),\n    );\n  }\n}\n"],"names":["resolvePackagePath","Duration","CronTime","z","InputError","AbortController","uuid","DateTime","DatabaseManager","getRootLogger","once"],"mappings":";;;;;;;;;;;;;AAgBO,MAAM,mBAAsB,GAAA,0CAAA,CAAA;AAC5B,MAAM,cAAiB,GAAA,gCAAA;;ACG9B,MAAM,aAAA,GAAgBA,iCACpB,0BACA,EAAA,YAAA,CAAA,CAAA;AAGF,eAAA,mBAAA,CAA0C,IAA2B,EAAA;AACnE,EAAM,MAAA,IAAA,CAAK,QAAQ,MAAO,CAAA;AAAA,IACxB,SAAW,EAAA,aAAA;AAAA,IACX,SAAW,EAAA,mBAAA;AAAA,GAAA,CAAA,CAAA;AAAA;;AC4If,SAAA,6BAAA,CAAuC,CAAgC,EAAA;AACrE,EAAI,IAAA;AACF,IAAA,OAAO,CAAC,CAAA,IAAKC,cAAS,CAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,OAAA,CAAA;AAAA,GACjC,CAAA,MAAA;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GAAA;AAAA,CAAA;AAIX,SAAA,iBAAA,CAA2B,CAAgC,EAAA;AACzD,EAAI,IAAA;AACF,IAAA,IAAI,CAAC,CAAG,EAAA;AACN,MAAO,OAAA,KAAA,CAAA;AAAA,KAAA;AAIT,IAAA,IAAIC,aAAS,CAAA,CAAA,CAAA,CAAA;AACb,IAAO,OAAA,IAAA,CAAA;AAAA,GACP,CAAA,MAAA;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GAAA;AAAA,CAAA;AAIyBC,MAAE,MAAO,CAAA;AAAA,EAC3C,OAAA,EAASA,MAAE,OAAQ,CAAA,CAAA,CAAA;AAAA,EACnB,oBAAsB,EAAAA,KAAA,CACnB,MACA,EAAA,CAAA,QAAA,EAAA,CACA,OAAO,6BAA+B,EAAA;AAAA,IACrC,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA;AAAA,EAEb,4BAA8B,EAAAA,KAAA,CAC3B,MACA,EAAA,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,IACrC,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA;AAAA,EAEb,oBAAsB,EAAAA,KAAA,CAAE,MAAS,EAAA,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,IACrE,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA;AAAA,CAAA,EAAA;AASA,MAAA,oBAAA,GAAuBA,MAAE,MAAO,CAAA;AAAA,EAC3C,OAAA,EAASA,MAAE,OAAQ,CAAA,CAAA,CAAA;AAAA,EACnB,OAAS,EAAAA,KAAA,CACN,MACA,EAAA,CAAA,MAAA,CAAO,iBAAmB,EAAA,EAAE,OAAS,EAAA,cAAA,EAAA,CAAA,CACrC,EACC,CAAAA,KAAA,CAAE,MAAS,EAAA,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,IAC/C,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA,CAAA;AAAA,EAGf,oBAAsB,EAAAA,KAAA,CAAE,MAAS,EAAA,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,IACrE,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA;AAAA,EAEX,oBAAsB,EAAAA,KAAA,CACnB,MACA,EAAA,CAAA,QAAA,EAAA,CACA,OAAO,6BAA+B,EAAA;AAAA,IACrC,OAAS,EAAA,wCAAA;AAAA,GAAA,CAAA;AAAA,CAAA,CAAA;;AChNR,SAAA,UAAA,CAAoB,EAAY,EAAA;AACrC,EAAA,IAAI,OAAO,EAAA,KAAO,QAAY,IAAA,CAAC,GAAG,IAAQ,EAAA,EAAA;AACxC,IAAM,MAAA,IAAIC,kBAAW,CAAG,EAAA,EAAA,CAAA,6CAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA;AAWrB,SAAA,OAAA,CAAiB,UAAgC,IAAY,EAAA;AAnCpE,EAAA,IAAA,EAAA,CAAA;AAoCE,EAAA,MAAM,OAAU,GAAA,CAAA,EAAA,GAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,EAAG,CAAA,SAAA,CAAA,KAAb,IAA2B,GAAA,EAAA,GAAA,CAAA,CAAA;AAC3C,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAA,OAAO,KAAK,EAAG,CAAA,GAAA,EAAA,CAAA;AAAA,GAAA;AAEjB,EAAA,OAAO,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,SAAS,SACtC,CAAA,GAAA,IAAA,CAAK,GAAI,CAAA,CAAA,kBAAA,CAAA,EAAsB,CAAC,CAAA,EAAG,OACnC,CAAA,QAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAK,IAAI,CAAqB,kBAAA,EAAA,OAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AAAA,CAAA;AAUpC,eAAA,KAAA,CACE,UACA,WACe,EAAA;AACf,EAAA,IAAI,2CAAa,OAAS,EAAA;AACxB,IAAA,OAAA;AAAA,GAAA;AAGF,EAAM,MAAA,IAAI,QAAc,CAAW,OAAA,KAAA;AACjC,IAAA,IAAI,aAA4C,GAAA,KAAA,CAAA,CAAA;AAEhD,IAAA,MAAM,OAAO,MAAM;AACjB,MAAA,IAAI,aAAe,EAAA;AACjB,QAAa,YAAA,CAAA,aAAA,CAAA,CAAA;AAAA,OAAA;AAEf,MAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,oBAAoB,OAAS,EAAA,IAAA,CAAA,CAAA;AAC1C,MAAA,OAAA,EAAA,CAAA;AAAA,KAAA,CAAA;AAGF,IAAgB,aAAA,GAAA,UAAA,CAAW,IAAM,EAAA,QAAA,CAAS,EAAG,CAAA,cAAA,CAAA,CAAA,CAAA;AAC7C,IAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,iBAAiB,OAAS,EAAA,IAAA,CAAA,CAAA;AAAA,GAAA,CAAA,CAAA;AAAA,CAAA;AAWpC,SAAA,uBAAA,CAAiC,MAAuC,EAAA;AAC7E,EAAA,MAAM,WAAW,IAAIC,mCAAA,EAAA,CAAA;AAErB,EAAA,IAAI,MAAQ,EAAA;AACV,IAAA,IAAI,OAAO,OAAS,EAAA;AAClB,MAAS,QAAA,CAAA,KAAA,EAAA,CAAA;AAAA,KACJ,MAAA;AACL,MAAA,MAAM,kBAAkB,MAAM;AAC5B,QAAS,QAAA,CAAA,KAAA,EAAA,CAAA;AAAA,OAAA,CAAA;AAGX,MAAA,MAAM,iBAAiB,MAAM;AAC3B,QAAA,MAAA,CAAO,oBAAoB,OAAS,EAAA,eAAA,CAAA,CAAA;AAAA,OAAA,CAAA;AAGtC,MAAA,MAAA,CAAO,gBAAiB,CAAA,OAAA,EAAS,eAAiB,EAAA,EAAE,IAAM,EAAA,IAAA,EAAA,CAAA,CAAA;AAC1D,MAAA,QAAA,CAAS,MAAO,CAAA,gBAAA,CAAiB,OAAS,EAAA,cAAA,EAAgB,EAAE,IAAM,EAAA,IAAA,EAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAItE,EAAO,OAAA,QAAA,CAAA;AAAA;;AC7ET,MAAM,oBAAuB,GAAAJ,cAAA,CAAS,UAAW,CAAA,EAAE,OAAS,EAAA,CAAA,EAAA,CAAA,CAAA;AAOpC,MAAA,UAAA,CAAA;AAAA,EAMtB,WAAY,CAAA,MAAA,EAAgB,EAAkB,EAAA,IAAA,EAAY,MAAgB,EAAA;AACxE,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;AACV,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAAA,GAAA;AAAA,EAGV,MAAA,KAAA,CAAM,UAA0B,OAAoC,EAAA;AACxE,IAAI,IAAA;AACF,MAAA,MAAM,KAAK,WAAY,CAAA,QAAA,CAAA,CAAA;AAAA,KAAA,CAAA,OAChB,CAAP,EAAA;AACA,MAAM,MAAA,IAAI,MAAM,CAA2B,wBAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAG7C,IAAA,IAAA,CAAK,OAAO,IACV,CAAA,CAAA,sBAAA,EAAyB,IAAK,CAAA,MAAA,CAAA,EAAA,EAAW,KAAK,SAAU,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAG1D,IAAC,CAAY,YAAA;AAzDjB,MAAA,IAAA,EAAA,CAAA;AA0DM,MAAI,IAAA;AACF,QAAA,OAAO,EAAC,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAiB,OAAS,CAAA,EAAA;AAChC,UAAA,MAAM,SAAY,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAC9C,UAAI,IAAA,SAAA,CAAU,WAAW,OAAS,EAAA;AAChC,YAAA,MAAA;AAAA,WAAA;AAGF,UAAM,MAAA,KAAA,CAAM,sBAAsB,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAAA,SAAA;AAE7C,QAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,sBAAA,EAAyB,IAAK,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA,CAAA,OACxC,CAAP,EAAA;AACA,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAoC,iCAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAUrD,QACJ,MAMA,EAAA;AACA,IAAM,MAAA,UAAA,GAAa,MAAM,IAAK,CAAA,aAAA,EAAA,CAAA;AAC9B,IAAA,IACE,UAAW,CAAA,MAAA,KAAW,eACtB,IAAA,UAAA,CAAW,WAAW,OACtB,EAAA;AACA,MAAO,OAAA,UAAA,CAAA;AAAA,KAAA;AAGT,IAAA,MAAM,eAAe,UAAW,CAAA,QAAA,CAAA;AAChC,IAAA,MAAM,MAAS,GAAAK,OAAA,EAAA,CAAA;AAEf,IAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,MAAQ,EAAA,YAAA,CAAA,CAAA;AAChD,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAA,OAAO,EAAE,MAAQ,EAAA,eAAA,EAAA,CAAA;AAAA,KAAA;AAKnB,IAAA,MAAM,sBAAsB,uBAAwB,CAAA,MAAA,CAAA,CAAA;AACpD,IAAM,MAAA,aAAA,GAAgB,WAAW,MAAM;AACrC,MAAoB,mBAAA,CAAA,KAAA,EAAA,CAAA;AAAA,KAAA,EACnBL,cAAS,CAAA,OAAA,CAAQ,YAAa,CAAA,oBAAA,CAAA,CAAsB,EAAG,CAAA,cAAA,CAAA,CAAA,CAAA;AAE1D,IAAI,IAAA;AACF,MAAM,MAAA,IAAA,CAAK,GAAG,mBAAoB,CAAA,MAAA,CAAA,CAAA;AAAA,KAAA,CAAA,OAC3B,CAAP,EAAA;AACA,MAAM,MAAA,IAAA,CAAK,eAAe,MAAQ,EAAA,YAAA,CAAA,CAAA;AAClC,MAAA,OAAO,EAAE,MAAQ,EAAA,QAAA,EAAA,CAAA;AAAA,KACjB,SAAA;AACA,MAAa,YAAA,CAAA,aAAA,CAAA,CAAA;AAAA,KAAA;AAGf,IAAM,MAAA,IAAA,CAAK,eAAe,MAAQ,EAAA,YAAA,CAAA,CAAA;AAClC,IAAA,OAAO,EAAE,MAAQ,EAAA,WAAA,EAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAMb,YAAY,QAA0B,EAAA;AAG1C,IAAA,oBAAA,CAAqB,KAAM,CAAA,QAAA,CAAA,CAAA;AAE3B,IAAA,MAAM,MAAS,GAAA,EAAW,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,OAAA,CAAQ,UAAW,CAAA,GAAA,CAAA,CAAA,CAAA;AAE7C,IAAI,IAAA,OAAA,CAAA;AACJ,IAAA,IAAI,SAAS,oBAAsB,EAAA;AACjC,MAAA,OAAA,GAAU,OACR,CAAAA,cAAA,CAAS,OAAQ,CAAA,QAAA,CAAS,uBAC1B,IAAK,CAAA,IAAA,CAAA,CAAA;AAAA,KAAA,MAAA,IAEE,MAAQ,EAAA;AACjB,MAAM,MAAA,IAAA,GAAO,IAAIC,aAAS,CAAA,QAAA,CAAS,SAChC,MACA,EAAA,CAAA,GAAA,CAAI,EAAE,OAAA,EAAS,CACf,CAAA,EAAA,CAAA,CAAA,WAAA,EAAA,CAAA;AACH,MAAA,OAAA,GAAU,KAAK,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,SAAS,SAC9C,CAAA,GAAA,IAAA,CAAK,IAAK,CAAA,GAAA,CAAI,eAAe,CAAC,IAAA,CAAA,CAAA,GAC9B,KAAK,IAAK,CAAA,GAAA,CAAI,KAAK,CAAC,IAAA,CAAA,CAAA,CAAA;AAAA,KACnB,MAAA;AACL,MAAU,OAAA,GAAA,IAAA,CAAK,KAAK,EAAG,CAAA,GAAA,EAAA,CAAA;AAAA,KAAA;AAGzB,IAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAS,MAAA,EAAA,IAAA,CAAK,MAAgC,CAAA,uBAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAIhE,IAAM,MAAA,IAAA,CAAK,IAAiB,CAAA,cAAA,CAAA,CACzB,MAAO,CAAA;AAAA,MACN,IAAI,IAAK,CAAA,MAAA;AAAA,MACT,aAAA,EAAe,KAAK,SAAU,CAAA,QAAA,CAAA;AAAA,MAC9B,iBAAmB,EAAA,OAAA;AAAA,KAEpB,CAAA,CAAA,UAAA,CAAW,IACX,CAAA,CAAA,KAAA,CAAM,CAAC,eAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAMN,aAIJ,GAAA;AACA,IAAM,MAAA,CAAC,GAAO,CAAA,GAAA,MAAM,IAAK,CAAA,IAAA,CAAiB,cACvC,CAAA,CAAA,KAAA,CAAM,IAAM,EAAA,GAAA,EAAK,IAAK,CAAA,MAAA,CAAA,CACtB,MAAO,CAAA;AAAA,MACN,YAAc,EAAA,eAAA;AAAA,MACd,KAAA,EAAO,IAAK,CAAA,IAAA,CAAK,GACf,CAAA,CAAA;AAAA;AAAA;AAAA,aAIA,CAAA,EAAA,CAAC,IAAK,CAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAIpB,IAAA,IAAI,CAAC,GAAK,EAAA;AACR,MAAA,IAAA,CAAK,OAAO,IACV,CAAA,6FAAA,CAAA,CAAA;AAEF,MAAA,OAAO,EAAE,MAAQ,EAAA,OAAA,EAAA,CAAA;AAAA,KACR,MAAA,IAAA,CAAC,IAAI,KAAO,EAAA;AACrB,MAAA,OAAO,EAAE,MAAQ,EAAA,eAAA,EAAA,CAAA;AAAA,KAAA;AAGnB,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,IAAK,CAAA,KAAA,CAAM,GAAI,CAAA,YAAA,CAAA,CAAA;AAC3B,MAAM,MAAA,QAAA,GAAW,qBAAqB,KAAM,CAAA,GAAA,CAAA,CAAA;AAC5C,MAAO,OAAA,EAAE,QAAQ,OAAS,EAAA,QAAA,EAAA,CAAA;AAAA,KAAA,CAAA,OACnB,CAAP,EAAA;AACA,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CACV,CAAS,MAAA,EAAA,IAAA,CAAK,MACqE,CAAA,uJAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAErF,MAAA,OAAO,EAAE,MAAQ,EAAA,OAAA,EAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAAA,EAaf,MAAA,YAAA,CACJ,QACA,QACkB,EAAA;AAClB,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAA,CAAA;AAC/B,IAAA,MAAM,SAAY,GAAA,QAAA,CAAS,oBACvB,GAAA,OAAA,CAAQD,cAAS,CAAA,OAAA,CAAQ,QAAS,CAAA,oBAAA,CAAA,EAAuB,IAAK,CAAA,IAAA,CAAA,GAC9D,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAA,CAAA;AAElB,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,IAAA,CAAiB,cACtC,CAAA,CAAA,KAAA,CAAM,IAAM,EAAA,GAAA,EAAK,IAAK,CAAA,MAAA,CAAA,CACtB,SAAU,CAAA,oBAAA,CAAA,CACV,MAAO,CAAA;AAAA,MACN,kBAAoB,EAAA,MAAA;AAAA,MACpB,sBAAwB,EAAA,SAAA;AAAA,MACxB,sBAAwB,EAAA,SAAA;AAAA,KAAA,CAAA,CAAA;AAG5B,IAAA,OAAO,IAAS,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAGZ,MAAA,cAAA,CACJ,QACA,QACkB,EAAA;AAClB,IAAA,MAAM,MAAS,GAAA,EAAW,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,OAAA,CAAQ,UAAW,CAAA,GAAA,CAAA,CAAA,CAAA;AAE7C,IAAI,IAAA,OAAA,CAAA;AACJ,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,MAAM,IAAO,GAAA,IAAIC,aAAS,CAAA,QAAA,CAAS,SAAS,MAAS,EAAA,CAAA,WAAA,EAAA,CAAA;AACrD,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAS,MAAA,EAAA,IAAA,CAAK,MAAiC,CAAA,wBAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACjE,MAAA,OAAA,GAAU,KAAK,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,SAAS,SAC9C,CAAA,GAAA,IAAA,CAAK,IAAK,CAAA,GAAA,CAAI,eAAe,CAAC,IAAA,CAAA,CAAA,GAC9B,KAAK,IAAK,CAAA,GAAA,CAAI,KAAK,CAAC,IAAA,CAAA,CAAA,CAAA;AAAA,KACnB,MAAA;AACL,MAAA,MAAM,EAAK,GAAAD,cAAA,CAAS,OAAQ,CAAA,QAAA,CAAS,SAAS,EAAG,CAAA,SAAA,CAAA,CAAA;AACjD,MAAA,IAAA,CAAK,OAAO,KACV,CAAA,CAAA,MAAA,EAAS,KAAK,MAAiC,CAAA,wBAAA,EAAAM,cAAA,CAAS,MAAM,IAAK,CAAA;AAAA,QACjE,OAAS,EAAA,EAAA;AAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAGb,MAAA,OAAA,GAAU,KAAK,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,SAAS,SAC9C,CAAA,GAAA,IAAA,CAAK,IAAK,CAAA,GAAA,CAAI,kCAAkC,CAAC,CAAA,CAAA,EAAI,iBACrD,IAAK,CAAA,IAAA,CAAK,IAAI,CAAiC,8BAAA,EAAA,EAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAGrD,IAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,IAAA,CAAiB,gBACtC,KAAM,CAAA,IAAA,EAAM,GAAK,EAAA,IAAA,CAAK,MACtB,CAAA,CAAA,KAAA,CAAM,oBAAsB,EAAA,GAAA,EAAK,QACjC,MAAO,CAAA;AAAA,MACN,iBAAmB,EAAA,OAAA;AAAA,MACnB,kBAAA,EAAoB,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAA;AAAA,MAClC,sBAAA,EAAwB,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAA;AAAA,MACtC,sBAAA,EAAwB,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAG1C,IAAA,OAAO,IAAS,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACnPgD,MAAA,uBAAA,CAAA;AAAA,EAClE,WAAA,CACmB,iBACA,MACjB,EAAA;AAFiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAGb,aACJ,IACe,EAAA;AAtCnB,IAAA,IAAA,EAAA,CAAA;AAuCI,IAAA,UAAA,CAAW,IAAK,CAAA,EAAA,CAAA,CAAA;AAEhB,IAAM,MAAA,IAAA,GAAO,MAAM,IAAK,CAAA,eAAA,EAAA,CAAA;AACxB,IAAM,MAAA,MAAA,GAAS,IAAI,UAAW,CAAA,IAAA,CAAK,IAAI,IAAK,CAAA,EAAA,EAAI,MAAM,IAAK,CAAA,MAAA,CAAA,CAAA;AAE3D,IAAA,MAAM,OAAO,KACX,CAAA;AAAA,MACE,OAAS,EAAA,CAAA;AAAA,MACT,OAAA,EACE,UAAU,IAAK,CAAA,SAAA,GACX,KAAK,SAAU,CAAA,IAAA,GACf,KAAK,SAAU,CAAA,KAAA,EAAA;AAAA,MACrB,oBAAA,EAAsB,CAAK,EAAA,GAAA,IAAA,CAAA,YAAA,KAAL,IAAmB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,EAAA;AAAA,MACzC,oBAAA,EAAsB,KAAK,OAAQ,CAAA,KAAA,EAAA;AAAA,KAErC,EAAA;AAAA,MACE,QAAQ,IAAK,CAAA,MAAA;AAAA,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAKnB,0BAA0B,QAA8C,EAAA;AACtE,IAAO,OAAA;AAAA,MACL,GAAA,EAAK,OAAM,IAAQ,KAAA;AACjB,QAAM,MAAA,IAAA,CAAK,YAAa,CAAA,EAAA,GAAK,IAAS,EAAA,GAAA,QAAA,EAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KAAA,CAAA;AAAA,GAAA;AAAA;;ACpCN,MAAA,0BAAA,CAAA;AAAA,EAKtC,YAAY,OAIT,EAAA;AACD,IAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAA;AACpB,IAAA,IAAA,CAAK,kBAAkB,OAAQ,CAAA,eAAA,CAAA;AAC/B,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAGlB,MAAM,WAA2B,EAAA;AACrC,IAAO,OAAA,6CAAc,OAAS,CAAA,EAAA;AAC5B,MAAI,IAAA;AACF,QAAA,MAAM,IAAK,CAAA,OAAA,EAAA,CAAA;AAAA,OAAA,CAAA,OACJ,CAAP,EAAA;AACA,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAA4C,yCAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA;AAG/D,MAAM,MAAA,KAAA,CAAM,KAAK,eAAiB,EAAA,WAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAAA,EAAA,MAIxB,OAAU,GAAA;AAQtB,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAA,CAAA;AAE7B,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,IAAA,CAAiB,cACvC,CAAA,CAAA,KAAA,CAAM,wBAA0B,EAAA,GAAA,EAAK,IAAK,CAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAA,CAAA,CAClD,MAAO,CAAA;AAAA,MACN,kBAAoB,EAAA,MAAA;AAAA,MACpB,sBAAwB,EAAA,MAAA;AAAA,MACxB,sBAAwB,EAAA,MAAA;AAAA,KAAA,CAAA,CAEzB,UAAU,CAAC,IAAA,CAAA,CAAA,CAAA;AAGd,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAA,IAAI,QAAQ,CAAG,EAAA;AACb,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAG,EAAA,KAAA,CAAA,8BAAA,CAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KAEjB,MAAA;AACL,MAAW,KAAA,MAAA,EAAE,QAAQ,KAAO,EAAA;AAC1B,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAgC,6BAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KAAA;AAAA,GAAA;AAAA;;ACjD9B,MAAA,aAAA,CAAA;AAAA,EAgBzB,WAAA,CACmB,iBACA,MACjB,EAAA;AAFiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAAA,GAAA;AAAA,EAjBZ,OAAA,UAAA,CACL,QACA,OAIe,EAAA;AAtCnB,IAAA,IAAA,EAAA,CAAA;AAuCI,IAAA,MAAM,eACJ,GAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,eAAT,KAAA,IAAA,GAAA,EAAA,GAA4BC,8BAAgB,UAAW,CAAA,MAAA,CAAA,CAAA;AACzD,IAAA,MAAM,MAAU,GAAA,CAAA,CAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,MAAU,KAAAC,2BAAA,EAAA,EAAiB,KAAM,CAAA;AAAA,MACxD,IAAM,EAAA,aAAA;AAAA,KAAA,CAAA,CAAA;AAER,IAAO,OAAA,IAAI,cAAc,eAAiB,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAc5C,UAAU,QAAuC,EAAA;AAC/C,IAAM,MAAA,eAAA,GAAkBC,YAAK,YAAY;AACvC,MAAA,MAAM,IAAO,GAAA,MAAM,IAAK,CAAA,eAAA,CAAgB,UAAU,QAAU,CAAA,CAAA,SAAA,EAAA,CAAA;AAE5D,MAAA,MAAM,mBAAoB,CAAA,IAAA,CAAA,CAAA;AAE1B,MAAM,MAAA,OAAA,GAAU,IAAI,0BAA2B,CAAA;AAAA,QAC7C,IAAA;AAAA,QACA,eAAiB,EAAAT,cAAA,CAAS,UAAW,CAAA,EAAE,OAAS,EAAA,CAAA,EAAA,CAAA;AAAA,QAChD,QAAQ,IAAK,CAAA,MAAA;AAAA,OAAA,CAAA,CAAA;AAEf,MAAQ,OAAA,CAAA,KAAA,EAAA,CAAA;AAER,MAAO,OAAA,IAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAGT,IAAA,OAAO,IAAI,uBACT,CAAA,eAAA,EACA,KAAK,MAAO,CAAA,KAAA,CAAM,EAAE,MAAQ,EAAA,QAAA,EAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;;;"}