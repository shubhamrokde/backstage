{"version":3,"file":"index.cjs.js","sources":["../src/integration/createConditionFactory.ts","../src/integration/createConditionExports.ts","../src/integration/util.ts","../src/integration/createConditionTransformer.ts","../src/integration/createPermissionIntegrationRouter.ts","../src/integration/createPermissionRule.ts","../src/ServerPermissionClient.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionRule } from '../types';\n\n/**\n * Creates a condition factory function for a given authorization rule and parameter types.\n *\n * @remarks\n *\n * For example, an isEntityOwner rule for catalog entities might take an array of entityRef strings.\n * The rule itself defines _how_ to check a given resource, whereas a condition also includes _what_\n * to verify.\n *\n * Plugin authors should generally use the {@link createConditionExports} in order to efficiently\n * create multiple condition factories. This helper should generally only be used to construct\n * condition factories for third-party rules that aren't part of the backend plugin with which\n * they're intended to integrate.\n *\n * @public\n */\nexport const createConditionFactory =\n  <TParams extends any[]>(rule: PermissionRule<unknown, unknown, TParams>) =>\n  (...params: TParams) => ({\n    rule: rule.name,\n    params,\n  });\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthorizeResult,\n  PermissionCondition,\n  PermissionCriteria,\n} from '@backstage/plugin-permission-common';\nimport { ConditionalPolicyDecision } from '../policy';\nimport { PermissionRule } from '../types';\nimport { createConditionFactory } from './createConditionFactory';\n\n/**\n * A utility type for mapping a single {@link PermissionRule} to its\n * corresponding {@link @backstage/plugin-permission-common#PermissionCondition}.\n *\n * @public\n */\nexport type Condition<TRule> = TRule extends PermissionRule<\n  any,\n  any,\n  infer TParams\n>\n  ? (...params: TParams) => PermissionCondition<TParams>\n  : never;\n\n/**\n * A utility type for mapping {@link PermissionRule}s to their corresponding\n * {@link @backstage/plugin-permission-common#PermissionCondition}s.\n *\n * @public\n */\nexport type Conditions<\n  TRules extends Record<string, PermissionRule<any, any>>,\n> = {\n  [Name in keyof TRules]: Condition<TRules[Name]>;\n};\n\n/**\n * Creates the recommended condition-related exports for a given plugin based on the built-in\n * {@link PermissionRule}s it supports.\n *\n * @remarks\n *\n * The function returns a `conditions` object containing a\n * {@link @backstage/plugin-permission-common#PermissionCondition} factory for each of the\n * supplied {@link PermissionRule}s, along with a `createConditions` function which builds the\n * wrapper object needed to enclose conditions when authoring {@link PermissionPolicy} implementations.\n *\n * Plugin authors should generally call this method with all the built-in {@link PermissionRule}s\n * the plugin supports, and export the resulting `conditions` object and `createConditions`\n * function so that they can be used by {@link PermissionPolicy} authors.\n *\n * @public\n */\nexport const createConditionExports = <\n  TResource,\n  TRules extends Record<string, PermissionRule<TResource, any>>,\n>(options: {\n  pluginId: string;\n  resourceType: string;\n  rules: TRules;\n}): {\n  conditions: Conditions<TRules>;\n  createPolicyDecision: (\n    conditions: PermissionCriteria<PermissionCondition>,\n  ) => ConditionalPolicyDecision;\n} => {\n  const { pluginId, resourceType, rules } = options;\n\n  return {\n    conditions: Object.entries(rules).reduce(\n      (acc, [key, rule]) => ({\n        ...acc,\n        [key]: createConditionFactory(rule),\n      }),\n      {} as Conditions<TRules>,\n    ),\n    createPolicyDecision: (\n      conditions: PermissionCriteria<PermissionCondition>,\n    ) => ({\n      result: AuthorizeResult.CONDITIONAL,\n      pluginId,\n      resourceType,\n      conditions,\n    }),\n  };\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AllOfCriteria,\n  AnyOfCriteria,\n  NotCriteria,\n  PermissionCriteria,\n} from '@backstage/plugin-permission-common';\nimport { PermissionRule } from '../types';\n\n/**\n * Utility function used to parse a PermissionCriteria\n * @param criteria - a PermissionCriteria\n * @alpha\n *\n * @returns `true` if the permission criteria is of type allOf,\n * narrowing down `criteria` to the specific type.\n */\nexport const isAndCriteria = <T>(\n  criteria: PermissionCriteria<T>,\n): criteria is AllOfCriteria<T> =>\n  Object.prototype.hasOwnProperty.call(criteria, 'allOf');\n\n/**\n * Utility function used to parse a PermissionCriteria of type\n * @param criteria - a PermissionCriteria\n * @alpha\n *\n * @returns `true` if the permission criteria is of type anyOf,\n * narrowing down `criteria` to the specific type.\n */\nexport const isOrCriteria = <T>(\n  criteria: PermissionCriteria<T>,\n): criteria is AnyOfCriteria<T> =>\n  Object.prototype.hasOwnProperty.call(criteria, 'anyOf');\n\n/**\n * Utility function used to parse a PermissionCriteria\n * @param criteria - a PermissionCriteria\n * @alpha\n *\n * @returns `true` if the permission criteria is of type not,\n * narrowing down `criteria` to the specific type.\n */\nexport const isNotCriteria = <T>(\n  criteria: PermissionCriteria<T>,\n): criteria is NotCriteria<T> =>\n  Object.prototype.hasOwnProperty.call(criteria, 'not');\n\nexport const createGetRule = <TResource, TQuery>(\n  rules: PermissionRule<TResource, TQuery>[],\n) => {\n  const rulesMap = new Map(Object.values(rules).map(rule => [rule.name, rule]));\n\n  return (name: string): PermissionRule<TResource, TQuery> => {\n    const rule = rulesMap.get(name);\n\n    if (!rule) {\n      throw new Error(`Unexpected permission rule: ${name}`);\n    }\n\n    return rule;\n  };\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AllOfCriteria,\n  AnyOfCriteria,\n  PermissionCondition,\n  PermissionCriteria,\n} from '@backstage/plugin-permission-common';\nimport { PermissionRule } from '../types';\nimport {\n  createGetRule,\n  isAndCriteria,\n  isNotCriteria,\n  isOrCriteria,\n} from './util';\n\nconst mapConditions = <TQuery>(\n  criteria: PermissionCriteria<PermissionCondition>,\n  getRule: (name: string) => PermissionRule<unknown, TQuery>,\n): PermissionCriteria<TQuery> => {\n  if (isAndCriteria(criteria)) {\n    return {\n      allOf: criteria.allOf.map(child => mapConditions(child, getRule)),\n    } as AllOfCriteria<TQuery>;\n  } else if (isOrCriteria(criteria)) {\n    return {\n      anyOf: criteria.anyOf.map(child => mapConditions(child, getRule)),\n    } as AnyOfCriteria<TQuery>;\n  } else if (isNotCriteria(criteria)) {\n    return {\n      not: mapConditions(criteria.not, getRule),\n    };\n  }\n\n  return getRule(criteria.rule).toQuery(...criteria.params);\n};\n\n/**\n * A function which accepts {@link @backstage/plugin-permission-common#PermissionCondition}s\n * logically grouped in a {@link @backstage/plugin-permission-common#PermissionCriteria}\n * object, and transforms the {@link @backstage/plugin-permission-common#PermissionCondition}s\n * into plugin specific query fragments while retaining the enclosing criteria shape.\n *\n * @public\n */\nexport type ConditionTransformer<TQuery> = (\n  conditions: PermissionCriteria<PermissionCondition>,\n) => PermissionCriteria<TQuery>;\n\n/**\n * A higher-order helper function which accepts an array of\n * {@link PermissionRule}s, and returns a {@link ConditionTransformer}\n * which transforms input conditions into equivalent plugin-specific\n * query fragments using the supplied rules.\n *\n * @public\n */\nexport const createConditionTransformer = <\n  TQuery,\n  TRules extends PermissionRule<any, TQuery>[],\n>(\n  permissionRules: [...TRules],\n): ConditionTransformer<TQuery> => {\n  const getRule = createGetRule(permissionRules);\n\n  return conditions => mapConditions(conditions, getRule);\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express, { Response } from 'express';\nimport Router from 'express-promise-router';\nimport { z } from 'zod';\nimport { InputError } from '@backstage/errors';\nimport { errorHandler } from '@backstage/backend-common';\nimport {\n  AuthorizeResult,\n  Identified,\n  PermissionCondition,\n  PermissionCriteria,\n} from '@backstage/plugin-permission-common';\nimport { PermissionRule } from '../types';\nimport {\n  createGetRule,\n  isAndCriteria,\n  isNotCriteria,\n  isOrCriteria,\n} from './util';\nimport { DefinitivePolicyDecision } from '../policy/types';\n\nconst permissionCriteriaSchema: z.ZodSchema<\n  PermissionCriteria<PermissionCondition>\n> = z.lazy(() =>\n  z.union([\n    z.object({ anyOf: z.array(permissionCriteriaSchema).nonempty() }).strict(),\n    z.object({ allOf: z.array(permissionCriteriaSchema).nonempty() }).strict(),\n    z.object({ not: permissionCriteriaSchema }).strict(),\n    z\n      .object({\n        rule: z.string(),\n        params: z.array(z.unknown()),\n      })\n      .strict(),\n  ]),\n);\n\nconst applyConditionsRequestSchema = z.object({\n  items: z.array(\n    z.object({\n      id: z.string(),\n      resourceRef: z.string(),\n      resourceType: z.string(),\n      conditions: permissionCriteriaSchema,\n    }),\n  ),\n});\n\n/**\n * A request to load the referenced resource and apply conditions in order to\n * finalize a conditional authorization response.\n *\n * @public\n */\nexport type ApplyConditionsRequestEntry = Identified<{\n  resourceRef: string;\n  resourceType: string;\n  conditions: PermissionCriteria<PermissionCondition>;\n}>;\n\n/**\n * A batch of {@link ApplyConditionsRequestEntry} objects.\n *\n * @public\n */\nexport type ApplyConditionsRequest = {\n  items: ApplyConditionsRequestEntry[];\n};\n\n/**\n * The result of applying the conditions, expressed as a definitive authorize\n * result of ALLOW or DENY.\n *\n * @public\n */\nexport type ApplyConditionsResponseEntry = Identified<DefinitivePolicyDecision>;\n\n/**\n * A batch of {@link ApplyConditionsResponseEntry} objects.\n *\n * @public\n */\nexport type ApplyConditionsResponse = {\n  items: ApplyConditionsResponseEntry[];\n};\n\nconst applyConditions = <TResource>(\n  criteria: PermissionCriteria<PermissionCondition>,\n  resource: TResource | undefined,\n  getRule: (name: string) => PermissionRule<TResource, unknown>,\n): boolean => {\n  // If resource was not found, deny. This avoids leaking information from the\n  // apply-conditions API which would allow a user to differentiate between\n  // non-existent resources and resources to which they do not have access.\n  if (resource === undefined) {\n    return false;\n  }\n\n  if (isAndCriteria(criteria)) {\n    return criteria.allOf.every(child =>\n      applyConditions(child, resource, getRule),\n    );\n  } else if (isOrCriteria(criteria)) {\n    return criteria.anyOf.some(child =>\n      applyConditions(child, resource, getRule),\n    );\n  } else if (isNotCriteria(criteria)) {\n    return !applyConditions(criteria.not, resource, getRule);\n  }\n\n  return getRule(criteria.rule).apply(resource, ...criteria.params);\n};\n\n/**\n * Create an express Router which provides an authorization route to allow\n * integration between the permission backend and other Backstage backend\n * plugins. Plugin owners that wish to support conditional authorization for\n * their resources should add the router created by this function to their\n * express app inside their `createRouter` implementation.\n *\n * @remarks\n *\n * To make this concrete, we can use the Backstage software catalog as an\n * example. The catalog has conditional rules around access to specific\n * _entities_ in the catalog. The _type_ of resource is captured here as\n * `resourceType`, a string identifier (`catalog-entity` in this example) that\n * can be provided with permission definitions. This is merely a _type_ to\n * verify that conditions in an authorization policy are constructed correctly,\n * not a reference to a specific resource.\n *\n * The `rules` parameter is an array of {@link PermissionRule}s that introduce\n * conditional filtering logic for resources; for the catalog, these are things\n * like `isEntityOwner` or `hasAnnotation`. Rules describe how to filter a list\n * of resources, and the `conditions` returned allow these rules to be applied\n * with specific parameters (such as 'group:default/team-a', or\n * 'backstage.io/edit-url').\n *\n * The `getResources` argument should load resources based on a reference\n * identifier. For the catalog, this is an\n * {@link @backstage/catalog-model#EntityRef}. For other plugins, this can be\n * any serialized format. This is used to construct the\n * `createPermissionIntegrationRouter`, a function to add an authorization route\n * to your backend plugin. This function will be called by the\n * `permission-backend` when authorization conditions relating to this plugin\n * need to be evaluated.\n *\n * @public\n */\nexport const createPermissionIntegrationRouter = <TResource>(options: {\n  resourceType: string;\n  rules: PermissionRule<TResource, any>[];\n  getResources: (\n    resourceRefs: string[],\n  ) => Promise<Array<TResource | undefined>>;\n}): express.Router => {\n  const { resourceType, rules, getResources } = options;\n  const router = Router();\n\n  const getRule = createGetRule(rules);\n\n  const assertValidResourceTypes = (\n    requests: ApplyConditionsRequestEntry[],\n  ) => {\n    const invalidResourceTypes = requests\n      .filter(request => request.resourceType !== resourceType)\n      .map(request => request.resourceType);\n\n    if (invalidResourceTypes.length) {\n      throw new InputError(\n        `Unexpected resource types: ${invalidResourceTypes.join(', ')}.`,\n      );\n    }\n  };\n\n  router.use(express.json());\n\n  router.post(\n    '/.well-known/backstage/permissions/apply-conditions',\n    async (req, res: Response<ApplyConditionsResponse | string>) => {\n      const parseResult = applyConditionsRequestSchema.safeParse(req.body);\n\n      if (!parseResult.success) {\n        throw new InputError(parseResult.error.toString());\n      }\n\n      const body = parseResult.data;\n\n      assertValidResourceTypes(body.items);\n\n      const resourceRefs = Array.from(\n        new Set(body.items.map(({ resourceRef }) => resourceRef)),\n      );\n      const resourceArray = await getResources(resourceRefs);\n      const resources = resourceRefs.reduce((acc, resourceRef, index) => {\n        acc[resourceRef] = resourceArray[index];\n\n        return acc;\n      }, {} as Record<string, TResource | undefined>);\n\n      return res.status(200).json({\n        items: body.items.map(request => ({\n          id: request.id,\n          result: applyConditions(\n            request.conditions,\n            resources[request.resourceRef],\n            getRule,\n          )\n            ? AuthorizeResult.ALLOW\n            : AuthorizeResult.DENY,\n        })),\n      });\n    },\n  );\n\n  router.use(errorHandler());\n\n  return router;\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionRule } from '../types';\n\n/**\n * Helper function to ensure that {@link PermissionRule} definitions are typed correctly.\n *\n * @public\n */\nexport const createPermissionRule = <\n  TResource,\n  TQuery,\n  TParams extends unknown[],\n>(\n  rule: PermissionRule<TResource, TQuery, TParams>,\n) => rule;\n\n/**\n * Helper for making plugin-specific createPermissionRule functions, that have\n * the TResource and TQuery type parameters populated but infer the params from\n * the supplied rule. This helps ensure that rules created for this plugin use\n * consistent types for the resource and query.\n *\n * @public\n */\nexport const makeCreatePermissionRule =\n  <TResource, TQuery>() =>\n  <TParams extends unknown[]>(\n    rule: PermissionRule<TResource, TQuery, TParams>,\n  ) =>\n    createPermissionRule(rule);\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TokenManager,\n  PluginEndpointDiscovery,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n  AuthorizeQuery,\n  AuthorizeRequestOptions,\n  AuthorizeDecision,\n  AuthorizeResult,\n  PermissionClient,\n  PermissionAuthorizer,\n} from '@backstage/plugin-permission-common';\n\n/**\n * A thin wrapper around\n * {@link @backstage/plugin-permission-common#PermissionClient} that allows all\n * backend-to-backend requests.\n * @public\n */\nexport class ServerPermissionClient implements PermissionAuthorizer {\n  private readonly permissionClient: PermissionClient;\n  private readonly tokenManager: TokenManager;\n  private readonly permissionEnabled: boolean;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      discovery: PluginEndpointDiscovery;\n      tokenManager: TokenManager;\n    },\n  ) {\n    const { discovery, tokenManager } = options;\n    const permissionClient = new PermissionClient({ discovery, config });\n    const permissionEnabled =\n      config.getOptionalBoolean('permission.enabled') ?? false;\n\n    if (\n      permissionEnabled &&\n      (tokenManager as any).isInsecureServerTokenManager\n    ) {\n      throw new Error(\n        'Backend-to-backend authentication must be configured before enabling permissions. Read more here https://backstage.io/docs/tutorials/backend-to-backend-auth',\n      );\n    }\n\n    return new ServerPermissionClient({\n      permissionClient,\n      tokenManager,\n      permissionEnabled,\n    });\n  }\n\n  private constructor(options: {\n    permissionClient: PermissionClient;\n    tokenManager: TokenManager;\n    permissionEnabled: boolean;\n  }) {\n    this.permissionClient = options.permissionClient;\n    this.tokenManager = options.tokenManager;\n    this.permissionEnabled = options.permissionEnabled;\n  }\n\n  async authorize(\n    queries: AuthorizeQuery[],\n    options?: AuthorizeRequestOptions,\n  ): Promise<AuthorizeDecision[]> {\n    // Check if permissions are enabled before validating the server token. That\n    // way when permissions are disabled, the noop token manager can be used\n    // without fouling up the logic inside the ServerPermissionClient, because\n    // the code path won't be reached.\n    if (\n      !this.permissionEnabled ||\n      (await this.isValidServerToken(options?.token))\n    ) {\n      return queries.map(_ => ({ result: AuthorizeResult.ALLOW }));\n    }\n    return this.permissionClient.authorize(queries, options);\n  }\n\n  private async isValidServerToken(\n    token: string | undefined,\n  ): Promise<boolean> {\n    if (!token) {\n      return false;\n    }\n    return this.tokenManager\n      .authenticate(token)\n      .then(() => true)\n      .catch(() => false);\n  }\n}\n"],"names":["AuthorizeResult","z","Router","InputError","express","errorHandler","PermissionClient"],"mappings":";;;;;;;;;;;;;;;;AAkCO,MAAM,sBACX,GAAA,CAAwB,IACxB,KAAA,CAAA,GAAI,MAAqB,MAAA;AAAA,EACvB,MAAM,IAAK,CAAA,IAAA;AAAA,EACX,MAAA;AAAA,CAAA;;AC8BS,MAAA,sBAAA,GAAyB,CAGpC,OASG,KAAA;AACH,EAAM,MAAA,EAAE,QAAU,EAAA,YAAA,EAAc,KAAU,EAAA,GAAA,OAAA,CAAA;AAE1C,EAAO,OAAA;AAAA,IACL,UAAA,EAAY,OAAO,OAAQ,CAAA,KAAA,CAAA,CAAO,OAChC,CAAC,GAAA,EAAK,CAAC,GAAA,EAAK,IAAW,CAAA,MAAA;AAAA,MAClB,GAAA,GAAA;AAAA,MAAA,CACF,MAAM,sBAAuB,CAAA,IAAA,CAAA;AAAA,KAEhC,CAAA,EAAA,EAAA,CAAA;AAAA,IAEF,oBAAA,EAAsB,CACpB,UACI,MAAA;AAAA,MACJ,QAAQA,sCAAgB,CAAA,WAAA;AAAA,MACxB,QAAA;AAAA,MACA,YAAA;AAAA,MACA,UAAA;AAAA,KAAA,CAAA;AAAA,GAAA,CAAA;AAAA;;ACjEC,MAAM,gBAAgB,CAC3B,QAAA,KAEA,OAAO,SAAU,CAAA,cAAA,CAAe,KAAK,QAAU,EAAA,OAAA,EAAA;AAU1C,MAAM,eAAe,CAC1B,QAAA,KAEA,OAAO,SAAU,CAAA,cAAA,CAAe,KAAK,QAAU,EAAA,OAAA,EAAA;AAU1C,MAAM,gBAAgB,CAC3B,QAAA,KAEA,OAAO,SAAU,CAAA,cAAA,CAAe,KAAK,QAAU,EAAA,KAAA,EAAA;AAEpC,MAAA,aAAA,GAAgB,CAC3B,KACG,KAAA;AACH,EAAM,MAAA,QAAA,GAAW,IAAI,GAAA,CAAI,MAAO,CAAA,MAAA,CAAO,OAAO,GAAI,CAAA,CAAA,IAAA,KAAQ,CAAC,IAAA,CAAK,IAAM,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAEtE,EAAA,OAAO,CAAC,IAAoD,KAAA;AAC1D,IAAM,MAAA,IAAA,GAAO,SAAS,GAAI,CAAA,IAAA,CAAA,CAAA;AAE1B,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAM,MAAA,IAAI,MAAM,CAA+B,4BAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAGjD,IAAO,OAAA,IAAA,CAAA;AAAA,GAAA,CAAA;AAAA,CAAA;;AC9CX,MAAM,aAAA,GAAgB,CACpB,QAAA,EACA,OAC+B,KAAA;AAC/B,EAAA,IAAI,cAAc,QAAW,CAAA,EAAA;AAC3B,IAAO,OAAA;AAAA,MACL,OAAO,QAAS,CAAA,KAAA,CAAM,GAAI,CAAA,CAAA,KAAA,KAAS,cAAc,KAAO,EAAA,OAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,MAAA,IAEjD,aAAa,QAAW,CAAA,EAAA;AACjC,IAAO,OAAA;AAAA,MACL,OAAO,QAAS,CAAA,KAAA,CAAM,GAAI,CAAA,CAAA,KAAA,KAAS,cAAc,KAAO,EAAA,OAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,MAAA,IAEjD,cAAc,QAAW,CAAA,EAAA;AAClC,IAAO,OAAA;AAAA,MACL,GAAA,EAAK,aAAc,CAAA,QAAA,CAAS,GAAK,EAAA,OAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA;AAIrC,EAAA,OAAO,OAAQ,CAAA,QAAA,CAAS,IAAM,CAAA,CAAA,OAAA,CAAQ,GAAG,QAAS,CAAA,MAAA,CAAA,CAAA;AAAA,CAAA,CAAA;AAuBvC,MAAA,0BAAA,GAA6B,CAIxC,eACiC,KAAA;AACjC,EAAA,MAAM,UAAU,aAAc,CAAA,eAAA,CAAA,CAAA;AAE9B,EAAO,OAAA,CAAA,UAAA,KAAc,cAAc,UAAY,EAAA,OAAA,CAAA,CAAA;AAAA;;AC1CjD,MAAM,wBAEF,GAAAC,KAAA,CAAE,IAAK,CAAA,MACTA,MAAE,KAAM,CAAA;AAAA,EACNA,MAAE,MAAO,CAAA,EAAE,OAAOA,KAAE,CAAA,KAAA,CAAM,0BAA0B,QAAc,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA;AAAA,EAClEA,MAAE,MAAO,CAAA,EAAE,OAAOA,KAAE,CAAA,KAAA,CAAM,0BAA0B,QAAc,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA;AAAA,EAClEA,KAAE,CAAA,MAAA,CAAO,EAAE,GAAA,EAAK,wBAA4B,EAAA,CAAA,CAAA,MAAA,EAAA;AAAA,EAC5CA,MACG,MAAO,CAAA;AAAA,IACN,MAAMA,KAAE,CAAA,MAAA,EAAA;AAAA,IACR,MAAA,EAAQA,KAAE,CAAA,KAAA,CAAMA,KAAE,CAAA,OAAA,EAAA,CAAA;AAAA,GAEnB,CAAA,CAAA,MAAA,EAAA;AAAA,CAAA,CAAA,CAAA,CAAA;AAIP,MAAM,4BAAA,GAA+BA,MAAE,MAAO,CAAA;AAAA,EAC5C,KAAO,EAAAA,KAAA,CAAE,KACP,CAAAA,KAAA,CAAE,MAAO,CAAA;AAAA,IACP,IAAIA,KAAE,CAAA,MAAA,EAAA;AAAA,IACN,aAAaA,KAAE,CAAA,MAAA,EAAA;AAAA,IACf,cAAcA,KAAE,CAAA,MAAA,EAAA;AAAA,IAChB,UAAY,EAAA,wBAAA;AAAA,GAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAA;AA2ClB,MAAM,eAAkB,GAAA,CACtB,QACA,EAAA,QAAA,EACA,OACY,KAAA;AAIZ,EAAA,IAAI,aAAa,KAAW,CAAA,EAAA;AAC1B,IAAO,OAAA,KAAA,CAAA;AAAA,GAAA;AAGT,EAAA,IAAI,cAAc,QAAW,CAAA,EAAA;AAC3B,IAAA,OAAO,SAAS,KAAM,CAAA,KAAA,CAAM,CAC1B,KAAA,KAAA,eAAA,CAAgB,OAAO,QAAU,EAAA,OAAA,CAAA,CAAA,CAAA;AAAA,GAAA,MAAA,IAE1B,aAAa,QAAW,CAAA,EAAA;AACjC,IAAA,OAAO,SAAS,KAAM,CAAA,IAAA,CAAK,CACzB,KAAA,KAAA,eAAA,CAAgB,OAAO,QAAU,EAAA,OAAA,CAAA,CAAA,CAAA;AAAA,GAAA,MAAA,IAE1B,cAAc,QAAW,CAAA,EAAA;AAClC,IAAA,OAAO,CAAC,eAAA,CAAgB,QAAS,CAAA,GAAA,EAAK,QAAU,EAAA,OAAA,CAAA,CAAA;AAAA,GAAA;AAGlD,EAAA,OAAO,QAAQ,QAAS,CAAA,IAAA,CAAA,CAAM,KAAM,CAAA,QAAA,EAAU,GAAG,QAAS,CAAA,MAAA,CAAA,CAAA;AAAA,CAAA,CAAA;AAsC/C,MAAA,iCAAA,GAAoC,CAAY,OAMvC,KAAA;AACpB,EAAM,MAAA,EAAE,YAAc,EAAA,KAAA,EAAO,YAAiB,EAAA,GAAA,OAAA,CAAA;AAC9C,EAAA,MAAM,MAAS,GAAAC,0BAAA,EAAA,CAAA;AAEf,EAAA,MAAM,UAAU,aAAc,CAAA,KAAA,CAAA,CAAA;AAE9B,EAAM,MAAA,wBAAA,GAA2B,CAC/B,QACG,KAAA;AACH,IAAM,MAAA,oBAAA,GAAuB,SAC1B,MAAO,CAAA,CAAA,OAAA,KAAW,QAAQ,YAAiB,KAAA,YAAA,CAAA,CAC3C,GAAI,CAAA,CAAA,OAAA,KAAW,OAAQ,CAAA,YAAA,CAAA,CAAA;AAE1B,IAAA,IAAI,qBAAqB,MAAQ,EAAA;AAC/B,MAAA,MAAM,IAAIC,iBAAA,CACR,CAA8B,2BAAA,EAAA,oBAAA,CAAqB,IAAK,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA,CAAA;AAK9D,EAAA,MAAA,CAAO,IAAIC,2BAAQ,CAAA,IAAA,EAAA,CAAA,CAAA;AAEnB,EAAA,MAAA,CAAO,IACL,CAAA,qDAAA,EACA,OAAO,GAAA,EAAK,GAAoD,KAAA;AAC9D,IAAM,MAAA,WAAA,GAAc,4BAA6B,CAAA,SAAA,CAAU,GAAI,CAAA,IAAA,CAAA,CAAA;AAE/D,IAAI,IAAA,CAAC,YAAY,OAAS,EAAA;AACxB,MAAM,MAAA,IAAID,iBAAW,CAAA,WAAA,CAAY,KAAM,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,KAAA;AAGzC,IAAA,MAAM,OAAO,WAAY,CAAA,IAAA,CAAA;AAEzB,IAAA,wBAAA,CAAyB,IAAK,CAAA,KAAA,CAAA,CAAA;AAE9B,IAAM,MAAA,YAAA,GAAe,KAAM,CAAA,IAAA,CACzB,IAAI,GAAA,CAAI,KAAK,KAAM,CAAA,GAAA,CAAI,CAAC,EAAE,WAAkB,EAAA,KAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AAE9C,IAAM,MAAA,aAAA,GAAgB,MAAM,YAAa,CAAA,YAAA,CAAA,CAAA;AACzC,IAAA,MAAM,YAAY,YAAa,CAAA,MAAA,CAAO,CAAC,GAAA,EAAK,aAAa,KAAU,KAAA;AACjE,MAAA,GAAA,CAAI,eAAe,aAAc,CAAA,KAAA,CAAA,CAAA;AAEjC,MAAO,OAAA,GAAA,CAAA;AAAA,KACN,EAAA,EAAA,CAAA,CAAA;AAEH,IAAO,OAAA,GAAA,CAAI,MAAO,CAAA,GAAA,CAAA,CAAK,IAAK,CAAA;AAAA,MAC1B,KAAO,EAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAI,CAAY,OAAA,MAAA;AAAA,QAChC,IAAI,OAAQ,CAAA,EAAA;AAAA,QACZ,MAAA,EAAQ,eACN,CAAA,OAAA,CAAQ,UACR,EAAA,SAAA,CAAU,QAAQ,WAClB,CAAA,EAAA,OAAA,CAAA,GAEEH,sCAAgB,CAAA,KAAA,GAChBA,sCAAgB,CAAA,IAAA;AAAA,OAAA,CAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAAA,GAAA,CAAA,CAAA;AAM5B,EAAA,MAAA,CAAO,GAAI,CAAAK,0BAAA,EAAA,CAAA,CAAA;AAEX,EAAO,OAAA,MAAA,CAAA;AAAA;;AChNI,MAAA,oBAAA,GAAuB,CAKlC,IACG,KAAA,KAAA;AAUE,MAAM,wBACX,GAAA,MACA,CACE,IAAA,KAEA,oBAAqB,CAAA,IAAA;;ACR2C,MAAA,sBAAA,CAAA;AAAA,EAK3D,OAAA,UAAA,CACL,QACA,OAIA,EAAA;AA/CJ,IAAA,IAAA,EAAA,CAAA;AAgDI,IAAM,MAAA,EAAE,WAAW,YAAiB,EAAA,GAAA,OAAA,CAAA;AACpC,IAAA,MAAM,gBAAmB,GAAA,IAAIC,uCAAiB,CAAA,EAAE,SAAW,EAAA,MAAA,EAAA,CAAA,CAAA;AAC3D,IAAA,MAAM,iBACJ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,kBAAmB,CAAA,oBAAA,CAAA,KAA1B,IAAmD,GAAA,EAAA,GAAA,KAAA,CAAA;AAErD,IACE,IAAA,iBAAA,IACC,aAAqB,4BACtB,EAAA;AACA,MAAA,MAAM,IAAI,KACR,CAAA,8JAAA,CAAA,CAAA;AAAA,KAAA;AAIJ,IAAA,OAAO,IAAI,sBAAuB,CAAA;AAAA,MAChC,gBAAA;AAAA,MACA,YAAA;AAAA,MACA,iBAAA;AAAA,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAII,YAAY,OAIjB,EAAA;AACD,IAAA,IAAA,CAAK,mBAAmB,OAAQ,CAAA,gBAAA,CAAA;AAChC,IAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,oBAAoB,OAAQ,CAAA,iBAAA,CAAA;AAAA,GAAA;AAAA,EAG7B,MAAA,SAAA,CACJ,SACA,OAC8B,EAAA;AAK9B,IAAA,IACE,CAAC,IAAK,CAAA,iBAAA,IACL,MAAM,IAAK,CAAA,kBAAA,CAAmB,mCAAS,KACxC,CAAA,EAAA;AACA,MAAA,OAAO,OAAQ,CAAA,GAAA,CAAI,CAAM,CAAA,MAAA,EAAE,QAAQN,sCAAgB,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA;AAAA,KAAA;AAErD,IAAO,OAAA,IAAA,CAAK,gBAAiB,CAAA,SAAA,CAAU,OAAS,EAAA,OAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,MAGpC,mBACZ,KACkB,EAAA;AAClB,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAO,OAAA,KAAA,CAAA;AAAA,KAAA;AAET,IAAO,OAAA,IAAA,CAAK,aACT,YAAa,CAAA,KAAA,CAAA,CACb,KAAK,MAAM,IAAA,CAAA,CACX,MAAM,MAAM,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;;;;;;;;;;;;"}