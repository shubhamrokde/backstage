{"version":3,"file":"index.cjs.js","sources":["../src/service/AuthorizedSearchEngine.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { compact, zipObject } from 'lodash';\nimport qs from 'qs';\nimport DataLoader from 'dataloader';\nimport {\n  AuthorizeDecision,\n  AuthorizeQuery,\n  AuthorizeResult,\n  PermissionAuthorizer,\n} from '@backstage/plugin-permission-common';\nimport {\n  DocumentTypeInfo,\n  QueryRequestOptions,\n  QueryTranslator,\n  SearchEngine,\n  SearchQuery,\n  SearchResult,\n  SearchResultSet,\n} from '@backstage/plugin-search-common';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { Writable } from 'stream';\n\nexport function decodePageCursor(pageCursor?: string): { page: number } {\n  if (!pageCursor) {\n    return { page: 0 };\n  }\n\n  const page = Number(Buffer.from(pageCursor, 'base64').toString('utf-8'));\n  if (isNaN(page)) {\n    throw new InputError('Invalid page cursor');\n  }\n\n  if (page < 0) {\n    throw new InputError('Invalid page cursor');\n  }\n\n  return {\n    page,\n  };\n}\n\nexport function encodePageCursor({ page }: { page: number }): string {\n  return Buffer.from(`${page}`, 'utf-8').toString('base64');\n}\n\nexport class AuthorizedSearchEngine implements SearchEngine {\n  private readonly pageSize = 25;\n  private readonly queryLatencyBudgetMs: number;\n\n  constructor(\n    private readonly searchEngine: SearchEngine,\n    private readonly types: Record<string, DocumentTypeInfo>,\n    private readonly permissions: PermissionAuthorizer,\n    config: Config,\n  ) {\n    this.queryLatencyBudgetMs =\n      config.getOptionalNumber('search.permissions.queryLatencyBudgetMs') ??\n      1000;\n  }\n\n  setTranslator(translator: QueryTranslator): void {\n    this.searchEngine.setTranslator(translator);\n  }\n\n  async getIndexer(type: string): Promise<Writable> {\n    return this.searchEngine.getIndexer(type);\n  }\n\n  async query(\n    query: SearchQuery,\n    options: QueryRequestOptions,\n  ): Promise<SearchResultSet> {\n    const queryStartTime = Date.now();\n\n    const authorizer = new DataLoader(\n      (requests: readonly AuthorizeQuery[]) =>\n        this.permissions.authorize(requests.slice(), options),\n      {\n        // Serialize the permission name and resourceRef as\n        // a query string to avoid collisions from overlapping\n        // permission names and resourceRefs.\n        cacheKeyFn: ({ permission: { name }, resourceRef }) =>\n          qs.stringify({ name, resourceRef }),\n      },\n    );\n    const requestedTypes = query.types || Object.keys(this.types);\n\n    const typeDecisions = zipObject(\n      requestedTypes,\n      await Promise.all(\n        requestedTypes.map(type => {\n          const permission = this.types[type]?.visibilityPermission;\n\n          return permission\n            ? authorizer.load({ permission })\n            : { result: AuthorizeResult.ALLOW as const };\n        }),\n      ),\n    );\n\n    const authorizedTypes = requestedTypes.filter(\n      type => typeDecisions[type]?.result !== AuthorizeResult.DENY,\n    );\n\n    const resultByResultFilteringRequired = authorizedTypes.some(\n      type => typeDecisions[type]?.result === AuthorizeResult.CONDITIONAL,\n    );\n\n    // When there are no CONDITIONAL decisions for any of the requested\n    // result types, we can skip filtering result by result by simply\n    // skipping the types the user is not permitted to see, which will\n    // be much more efficient.\n    //\n    // Since it's not currently possible to configure the page size used\n    // by search engines, this detail means that a single user might see\n    // a different page size depending on whether their search required\n    // result-by-result filtering or not. We can fix this minor\n    // inconsistency by introducing a configurable page size.\n    //\n    // cf. https://github.com/backstage/backstage/issues/9162\n    if (!resultByResultFilteringRequired) {\n      return this.searchEngine.query(\n        { ...query, types: authorizedTypes },\n        options,\n      );\n    }\n\n    const { page } = decodePageCursor(query.pageCursor);\n    const targetResults = (page + 1) * this.pageSize;\n\n    let filteredResults: SearchResult[] = [];\n    let nextPageCursor: string | undefined;\n    let latencyBudgetExhausted = false;\n\n    do {\n      const nextPage = await this.searchEngine.query(\n        { ...query, types: authorizedTypes, pageCursor: nextPageCursor },\n        options,\n      );\n\n      filteredResults = filteredResults.concat(\n        await this.filterResults(nextPage.results, typeDecisions, authorizer),\n      );\n\n      nextPageCursor = nextPage.nextPageCursor;\n      latencyBudgetExhausted =\n        Date.now() - queryStartTime > this.queryLatencyBudgetMs;\n    } while (\n      nextPageCursor &&\n      filteredResults.length < targetResults &&\n      !latencyBudgetExhausted\n    );\n\n    return {\n      results: filteredResults.slice(\n        page * this.pageSize,\n        (page + 1) * this.pageSize,\n      ),\n      previousPageCursor:\n        page === 0 ? undefined : encodePageCursor({ page: page - 1 }),\n      nextPageCursor:\n        !latencyBudgetExhausted &&\n        (nextPageCursor || filteredResults.length > targetResults)\n          ? encodePageCursor({ page: page + 1 })\n          : undefined,\n    };\n  }\n\n  private async filterResults(\n    results: SearchResult[],\n    typeDecisions: Record<string, AuthorizeDecision>,\n    authorizer: DataLoader<AuthorizeQuery, AuthorizeDecision>,\n  ) {\n    return compact(\n      await Promise.all(\n        results.map(result => {\n          if (typeDecisions[result.type]?.result === AuthorizeResult.ALLOW) {\n            return result;\n          }\n\n          const permission = this.types[result.type]?.visibilityPermission;\n          const resourceRef = result.document.authorization?.resourceRef;\n\n          if (!permission || !resourceRef) {\n            return result;\n          }\n\n          return authorizer\n            .load({ permission, resourceRef })\n            .then(decision =>\n              decision.result === AuthorizeResult.ALLOW ? result : undefined,\n            );\n        }),\n      ),\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { z } from 'zod';\nimport { errorHandler } from '@backstage/backend-common';\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { getBearerTokenFromAuthorizationHeader } from '@backstage/plugin-auth-node';\nimport { PermissionAuthorizer } from '@backstage/plugin-permission-common';\nimport {\n  DocumentTypeInfo,\n  SearchResultSet,\n} from '@backstage/plugin-search-common';\nimport { SearchEngine } from '@backstage/plugin-search-backend-node';\nimport { AuthorizedSearchEngine } from './AuthorizedSearchEngine';\n\nconst jsonObjectSchema: z.ZodSchema<JsonObject> = z.lazy(() => {\n  const jsonValueSchema: z.ZodSchema<JsonValue> = z.lazy(() =>\n    z.union([\n      z.string(),\n      z.number(),\n      z.boolean(),\n      z.null(),\n      z.array(jsonValueSchema),\n      jsonObjectSchema,\n    ]),\n  );\n\n  return z.record(jsonValueSchema);\n});\n\nexport type RouterOptions = {\n  engine: SearchEngine;\n  types: Record<string, DocumentTypeInfo>;\n  permissions: PermissionAuthorizer;\n  config: Config;\n  logger: Logger;\n};\n\nconst allowedLocationProtocols = ['http:', 'https:'];\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { engine: inputEngine, types, permissions, config, logger } = options;\n\n  const requestSchema = z.object({\n    term: z.string().default(''),\n    filters: jsonObjectSchema.optional(),\n    types: z\n      .array(z.string().refine(type => Object.keys(types).includes(type)))\n      .optional(),\n    pageCursor: z.string().optional(),\n  });\n\n  const engine = config.getOptionalBoolean('permission.enabled')\n    ? new AuthorizedSearchEngine(inputEngine, types, permissions, config)\n    : inputEngine;\n\n  const filterResultSet = ({ results, ...resultSet }: SearchResultSet) => ({\n    ...resultSet,\n    results: results.filter(result => {\n      const protocol = new URL(result.document.location, 'https://example.com')\n        .protocol;\n      const isAllowed = allowedLocationProtocols.includes(protocol);\n      if (!isAllowed) {\n        logger.info(\n          `Rejected search result for \"${result.document.title}\" as location protocol \"${protocol}\" is unsafe`,\n        );\n      }\n      return isAllowed;\n    }),\n  });\n\n  const router = Router();\n  router.get(\n    '/query',\n    async (req: express.Request, res: express.Response<SearchResultSet>) => {\n      const parseResult = requestSchema.safeParse(req.query);\n\n      if (!parseResult.success) {\n        throw new InputError(`Invalid query string: ${parseResult.error}`);\n      }\n\n      const query = parseResult.data;\n\n      logger.info(\n        `Search request received: term=\"${\n          query.term\n        }\", filters=${JSON.stringify(query.filters)}, types=${\n          query.types ? query.types.join(',') : ''\n        }, pageCursor=${query.pageCursor ?? ''}`,\n      );\n\n      const token = getBearerTokenFromAuthorizationHeader(\n        req.header('authorization'),\n      );\n\n      try {\n        const resultSet = await engine?.query(query, { token });\n\n        res.send(filterResultSet(resultSet));\n      } catch (err) {\n        throw new Error(\n          `There was a problem performing the search query. ${err}`,\n        );\n      }\n    },\n  );\n\n  router.use(errorHandler());\n\n  return router;\n}\n"],"names":["InputError","DataLoader","qs","zipObject","AuthorizeResult","compact","z","Router","getBearerTokenFromAuthorizationHeader","errorHandler"],"mappings":"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"}