'use strict';

var yaml = require('yaml');
var config$1 = require('@backstage/config');
var config = require('./config-51517796.cjs.js');
require('@backstage/config-loader');
require('./index-f077c8c1.cjs.js');
require('commander');
require('chalk');
require('fs-extra');
require('semver');
require('@backstage/cli-common');
require('@backstage/errors');
require('@manypkg/get-packages');
require('./PackageGraph-8d811c7b.cjs.js');
require('path');
require('child_process');
require('util');

var print = async (cmd) => {
  const { schema, appConfigs } = await config.loadCliConfig({
    args: cmd.config,
    fromPackage: cmd.package,
    mockEnv: cmd.lax,
    fullVisibility: !cmd.frontend
  });
  const visibility = getVisibilityOption(cmd);
  const data = serializeConfigData(appConfigs, schema, visibility);
  if (cmd.format === "json") {
    process.stdout.write(`${JSON.stringify(data, null, 2)}
`);
  } else {
    process.stdout.write(`${yaml.stringify(data)}
`);
  }
};
function getVisibilityOption(cmd) {
  if (cmd.frontend && cmd.withSecrets) {
    throw new Error("Not allowed to combine frontend and secret config");
  }
  if (cmd.frontend) {
    return "frontend";
  } else if (cmd.withSecrets) {
    return "secret";
  }
  return "backend";
}
function serializeConfigData(appConfigs, schema, visibility) {
  if (visibility === "frontend") {
    const frontendConfigs = schema.process(appConfigs, {
      visibility: ["frontend"]
    });
    return config$1.ConfigReader.fromConfigs(frontendConfigs).get();
  } else if (visibility === "secret") {
    return config$1.ConfigReader.fromConfigs(appConfigs).get();
  }
  const sanitizedConfigs = schema.process(appConfigs, {
    valueTransform: (value, context) => context.visibility === "secret" ? "<secret>" : value
  });
  return config$1.ConfigReader.fromConfigs(sanitizedConfigs).get();
}

exports["default"] = print;
//# sourceMappingURL=print-7442bc4b.cjs.js.map
