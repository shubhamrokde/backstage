{"version":3,"file":"index.cjs.js","sources":["../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport {\n  createProxyMiddleware,\n  Options,\n  RequestHandler,\n} from 'http-proxy-middleware';\nimport { Logger } from 'winston';\nimport http from 'http';\nimport { PluginEndpointDiscovery } from '@backstage/backend-common';\n\n// A list of headers that are always forwarded to the proxy targets.\nconst safeForwardHeaders = [\n  // https://fetch.spec.whatwg.org/#cors-safelisted-request-header\n  'cache-control',\n  'content-language',\n  'content-length',\n  'content-type',\n  'expires',\n  'last-modified',\n  'pragma',\n\n  // host is overridden by default. if changeOrigin is configured to false,\n  // we assume this is a intentional and should also be forwarded.\n  'host',\n\n  // other headers that we assume to be ok\n  'accept',\n  'accept-language',\n  'user-agent',\n];\n\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  skipInvalidProxies?: boolean;\n}\n\nexport interface ProxyConfig extends Options {\n  allowedMethods?: string[];\n  allowedHeaders?: string[];\n}\n\n// Creates a proxy middleware, possibly with defaults added on top of the\n// given config.\nexport function buildMiddleware(\n  pathPrefix: string,\n  logger: Logger,\n  route: string,\n  config: string | ProxyConfig,\n): RequestHandler {\n  const fullConfig =\n    typeof config === 'string' ? { target: config } : { ...config };\n\n  // Validate that target is a valid URL.\n  if (typeof fullConfig.target !== 'string') {\n    throw new Error(`Proxy target must be a string`);\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new URL(fullConfig.target! as string);\n  } catch {\n    throw new Error(\n      `Proxy target is not a valid URL: ${fullConfig.target ?? ''}`,\n    );\n  }\n\n  // Default is to do a path rewrite that strips out the proxy's path prefix\n  // and the rest of the route.\n  if (fullConfig.pathRewrite === undefined) {\n    let routeWithSlash = route.endsWith('/') ? route : `${route}/`;\n\n    if (!pathPrefix.endsWith('/') && !routeWithSlash.startsWith('/')) {\n      // Need to insert a / between pathPrefix and routeWithSlash\n      routeWithSlash = `/${routeWithSlash}`;\n    } else if (pathPrefix.endsWith('/') && routeWithSlash.startsWith('/')) {\n      // Never expect this to happen at this point in time as\n      // pathPrefix is set using `getExternalBaseUrl` which \"Returns the\n      // external HTTP base backend URL for a given plugin,\n      // **without a trailing slash.**\". But in case this changes in future, we\n      // need to drop a / on either pathPrefix or routeWithSlash\n      routeWithSlash = routeWithSlash.substring(1);\n    }\n\n    // The ? makes the slash optional for the rewrite, so that a base path without an ending slash\n    // will also be matched (e.g. '/sample' and then requesting just '/api/proxy/sample' without an\n    // ending slash). Otherwise the target gets called with the full '/api/proxy/sample' path\n    // appended.\n    fullConfig.pathRewrite = {\n      [`^${pathPrefix}${routeWithSlash}?`]: '/',\n    };\n  }\n\n  // Default is to update the Host header to the target\n  if (fullConfig.changeOrigin === undefined) {\n    fullConfig.changeOrigin = true;\n  }\n\n  // Attach the logger to the proxy config\n  fullConfig.logProvider = () => logger;\n\n  // Only return the allowed HTTP headers to not forward unwanted secret headers\n  const requestHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all headers that are set by the proxy\n      ...((fullConfig.headers && Object.keys(fullConfig.headers)) || []),\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  // Use the custom middleware filter to do two things:\n  //  1. Remove any headers not in the allow list to stop them being forwarded\n  //  2. Only permit the allowed HTTP methods if configured\n  //\n  // We are filtering the proxy request headers here rather than in\n  // `onProxyReq` because when global-agent is enabled then `onProxyReq`\n  // fires _after_ the agent has already sent the headers to the proxy\n  // target, causing a ERR_HTTP_HEADERS_SENT crash\n  const filter = (_pathname: string, req: http.IncomingMessage): boolean => {\n    const headerNames = Object.keys(req.headers);\n    headerNames.forEach(h => {\n      if (!requestHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete req.headers[h];\n      }\n    });\n\n    return fullConfig?.allowedMethods?.includes(req.method!) ?? true;\n  };\n  // Makes http-proxy-middleware logs look nicer and include the mount path\n  filter.toString = () => route;\n\n  // Only forward the allowed HTTP headers to not forward unwanted secret headers\n  const responseHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  // only forward the allowed headers in backend->client\n  fullConfig.onProxyRes = (proxyRes: http.IncomingMessage) => {\n    const headerNames = Object.keys(proxyRes.headers);\n\n    headerNames.forEach(h => {\n      if (!responseHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete proxyRes.headers[h];\n      }\n    });\n  };\n\n  return createProxyMiddleware(filter, fullConfig);\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n\n  const externalUrl = await options.discovery.getExternalBaseUrl('proxy');\n  const { pathname: pathPrefix } = new URL(externalUrl);\n\n  const proxyConfig = options.config.getOptional('proxy') ?? {};\n\n  Object.entries(proxyConfig).forEach(([route, proxyRouteConfig]) => {\n    try {\n      router.use(\n        route,\n        buildMiddleware(pathPrefix, options.logger, route, proxyRouteConfig),\n      );\n    } catch (e) {\n      if (options.skipInvalidProxies) {\n        options.logger.warn(`skipped configuring ${route} due to ${e.message}`);\n      } else {\n        throw e;\n      }\n    }\n  });\n\n  return router;\n}\n"],"names":["createProxyMiddleware","Router"],"mappings":"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"}