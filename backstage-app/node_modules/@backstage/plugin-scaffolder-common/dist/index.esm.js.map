{"version":3,"file":"index.esm.js","sources":["../src/TemplateEntityV1beta3.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityKindSchemaValidator,\n  KindValidator,\n} from '@backstage/catalog-model';\nimport { JsonObject } from '@backstage/types';\nimport schema from './Template.v1beta3.schema.json';\n\n/**\n * Backstage catalog Template kind Entity. Templates are used by the Scaffolder\n * plugin to create new entities, such as Components.\n *\n * @public\n */\nexport interface TemplateEntityV1beta3 extends Entity {\n  /**\n   * The apiVersion string of the TaskSpec.\n   */\n  apiVersion: 'scaffolder.backstage.io/v1beta3';\n  /**\n   * The kind of the entity\n   */\n  kind: 'Template';\n  /**\n   * The specification of the Template Entity\n   */\n  spec: {\n    /**\n     * The type that the Template will create. For example service, website or library.\n     */\n    type: string;\n    /**\n     * This is a JSONSchema or an array of JSONSchema's which is used to render a form in the frontend\n     * to collect user input and validate it against that schema. This can then be used in the `steps` part below to template\n     * variables passed from the user into each action in the template.\n     */\n    parameters?: JsonObject | JsonObject[];\n    /**\n     * A list of steps to be executed in sequence which are defined by the template. These steps are a list of the underlying\n     * javascript action and some optional input parameters that may or may not have been collected from the end user.\n     */\n    steps: Array<{\n      id?: string;\n      name?: string;\n      action: string;\n      input?: JsonObject;\n      if?: string | boolean;\n    }>;\n    /**\n     * The output is an object where template authors can pull out information from template actions and return them in a known standard way.\n     */\n    output?: { [name: string]: string };\n    /**\n     * The owner entityRef of the TemplateEntity\n     */\n    owner?: string;\n  };\n}\n\nconst validator = entityKindSchemaValidator(schema);\n\n/**\n * Entity data validator for {@link TemplateEntityV1beta3}.\n *\n * @public\n */\nexport const templateEntityV1beta3Validator: KindValidator = {\n  // TODO(freben): Emulate the old KindValidator until we fix that type\n  async check(data: Entity) {\n    return validator(data) === data;\n  },\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,MAAM,YAAY,yBAA0B,CAAA,MAAA,CAAA,CAAA;AAOrC,MAAM,8BAAgD,GAAA;AAAA,EAAA,MAErD,MAAM,IAAc,EAAA;AACxB,IAAA,OAAO,UAAU,IAAU,CAAA,KAAA,IAAA,CAAA;AAAA,GAAA;AAAA;;;;"}