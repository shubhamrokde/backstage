{"version":3,"file":"index.esm.js","sources":["../src/api/ScmAuthApi.ts","../src/api/ScmAuth.ts","../src/api/ScmIntegrationsApi.ts","../src/components/ScmIntegrationIcon/ScmIntegrationIcon.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiRef,\n  createApiRef,\n  AuthRequestOptions,\n} from '@backstage/core-plugin-api';\n\n/**\n * The options that control a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenOptions extends AuthRequestOptions {\n  /**\n   * The URL of the SCM resource to be accessed.\n   *\n   * @example https://github.com/backstage/backstage\n   */\n  url: string;\n\n  /**\n   * Whether to request additional access scope.\n   *\n   * Read access to user, organization, and repositories is always included.\n   */\n  additionalScope?: {\n    /**\n     * Requests access to be able to write repository content, including\n     * the ability to create things like issues and pull requests.\n     */\n    repoWrite?: boolean;\n    /**\n     * Allow an arbitrary list of scopes provided from the user\n     * to request from the provider.\n     */\n    customScopes?: {\n      github?: string[];\n      azure?: string[];\n      bitbucket?: string[];\n      gitlab?: string[];\n    };\n  };\n}\n\n/**\n * The response from a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenResponse {\n  /**\n   * An authorization token that can be used to authenticate requests.\n   */\n  token: string;\n\n  /**\n   * The set of HTTP headers that are needed to authenticate requests.\n   */\n  headers: { [name: string]: string };\n}\n\n/**\n * ScmAuthApi provides methods for authenticating towards source code management services.\n *\n * As opposed to using the GitHub, GitLab and other auth APIs\n * directly, this API allows for more generic access to SCM services.\n *\n * @public\n */\nexport interface ScmAuthApi {\n  /**\n   * Requests credentials for accessing an SCM resource.\n   */\n  getCredentials(options: ScmAuthTokenOptions): Promise<ScmAuthTokenResponse>;\n}\n\n/**\n * The ApiRef for the ScmAuthApi.\n *\n * @public\n */\nexport const scmAuthApiRef: ApiRef<ScmAuthApi> = createApiRef({\n  id: 'core.scmauth',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bitbucketAuthApiRef,\n  createApiFactory,\n  githubAuthApiRef,\n  gitlabAuthApiRef,\n  microsoftAuthApiRef,\n  OAuthApi,\n} from '@backstage/core-plugin-api';\nimport {\n  ScmAuthApi,\n  scmAuthApiRef,\n  ScmAuthTokenOptions,\n  ScmAuthTokenResponse,\n} from './ScmAuthApi';\n\ntype ScopeMapping = {\n  /** The base scopes used for all requests */\n  default: string[];\n  /** Additional scopes added if `repoWrite` is requested */\n  repoWrite: string[];\n};\n\n// An enum of all supported providers\ntype ProviderName = 'generic' | 'github' | 'azure' | 'bitbucket' | 'gitlab';\n\nclass ScmAuthMux implements ScmAuthApi {\n  #providers: Array<ScmAuth>;\n\n  constructor(providers: ScmAuth[]) {\n    this.#providers = providers;\n  }\n\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const url = new URL(options.url);\n    const provider = this.#providers.find(p => p.isUrlSupported(url));\n    if (!provider) {\n      throw new Error(\n        `No auth provider available for '${options.url}', see https://backstage.io/link?scm-auth`,\n      );\n    }\n\n    return provider.getCredentials(options);\n  }\n}\n\n/**\n * An implementation of the ScmAuthApi that merges together OAuthApi instances\n * to form a single instance that can handles authentication for multiple providers.\n *\n * @public\n *\n * @example\n * ```\n * // Supports authentication towards both public GitHub and GHE:\n * createApiFactory({\n *   api: scmAuthApiRef,\n *   deps: {\n *     gheAuthApi: gheAuthApiRef,\n *     githubAuthApi: githubAuthApiRef,\n *   },\n *   factory: ({ githubAuthApi, gheAuthApi }) =>\n *     ScmAuth.merge(\n *       ScmAuth.forGithub(githubAuthApi),\n *       ScmAuth.forGithub(gheAuthApi, {\n *         host: 'ghe.example.com',\n *       }),\n *     )\n * })\n * ```\n */\nexport class ScmAuth implements ScmAuthApi {\n  /**\n   * Creates an API factory that enables auth for each of the default SCM providers.\n   */\n  static createDefaultApiFactory() {\n    return createApiFactory({\n      api: scmAuthApiRef,\n      deps: {\n        github: githubAuthApiRef,\n        gitlab: gitlabAuthApiRef,\n        azure: microsoftAuthApiRef,\n        bitbucket: bitbucketAuthApiRef,\n      },\n      factory: ({ github, gitlab, azure, bitbucket }) =>\n        ScmAuth.merge(\n          ScmAuth.forGithub(github),\n          ScmAuth.forGitlab(gitlab),\n          ScmAuth.forAzure(azure),\n          ScmAuth.forBitbucket(bitbucket),\n        ),\n    });\n  }\n\n  /**\n   * Creates a general purpose ScmAuth instance with a custom scope mapping.\n   */\n  static forAuthApi(\n    authApi: OAuthApi,\n    options: {\n      host: string;\n      scopeMapping: {\n        default: string[];\n        repoWrite: string[];\n      };\n    },\n  ): ScmAuth {\n    return new ScmAuth('generic', authApi, options.host, options.scopeMapping);\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitHub.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `github.com`.\n   *\n   * The default scopes are:\n   *\n   * `repo read:org read:user`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `gist`\n   */\n  static forGithub(\n    githubAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'github.com';\n    return new ScmAuth('github', githubAuthApi, host, {\n      default: ['repo', 'read:org', 'read:user'],\n      repoWrite: ['gist'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitLab.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `gitlab.com`.\n   *\n   * The default scopes are:\n   *\n   * `read_user read_api read_repository`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `write_repository api`\n   */\n  static forGitlab(\n    gitlabAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'gitlab.com';\n    return new ScmAuth('gitlab', gitlabAuthApi, host, {\n      default: ['read_user', 'read_api', 'read_repository'],\n      repoWrite: ['write_repository', 'api'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Azure.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `dev.azure.com`.\n   *\n   * The default scopes are:\n   *\n   * `vso.build vso.code vso.graph vso.project vso.profile`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `vso.code_manage`\n   */\n  static forAzure(\n    microsoftAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'dev.azure.com';\n    return new ScmAuth('azure', microsoftAuthApi, host, {\n      default: [\n        'vso.build',\n        'vso.code',\n        'vso.graph',\n        'vso.project',\n        'vso.profile',\n      ],\n      repoWrite: ['vso.code_manage'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Bitbucket.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `bitbucket.org`.\n   *\n   * The default scopes are:\n   *\n   * `account team pullrequest snippet issue`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `pullrequest:write snippet:write issue:write`\n   */\n  static forBitbucket(\n    bitbucketAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'bitbucket.org';\n    return new ScmAuth('bitbucket', bitbucketAuthApi, host, {\n      default: ['account', 'team', 'pullrequest', 'snippet', 'issue'],\n      repoWrite: ['pullrequest:write', 'snippet:write', 'issue:write'],\n    });\n  }\n\n  /**\n   * Merges together multiple ScmAuth instances into one that\n   * routes requests to the correct instance based on the URL.\n   */\n  static merge(...providers: ScmAuth[]): ScmAuthApi {\n    return new ScmAuthMux(providers);\n  }\n\n  #api: OAuthApi;\n  #host: string;\n  #scopeMapping: ScopeMapping;\n  #providerName: ProviderName;\n\n  private constructor(\n    providerName: ProviderName,\n    api: OAuthApi,\n    host: string,\n    scopeMapping: ScopeMapping,\n  ) {\n    this.#api = api;\n    this.#host = host;\n    this.#scopeMapping = scopeMapping;\n    this.#providerName = providerName;\n  }\n\n  /**\n   * Checks whether the implementation is able to provide authentication for the given URL.\n   */\n  isUrlSupported(url: URL): boolean {\n    return url.host === this.#host;\n  }\n\n  private getAdditionalScopesForProvider(\n    additionalScopes: ScmAuthTokenOptions['additionalScope'],\n  ): string[] {\n    if (!additionalScopes?.customScopes || this.#providerName === 'generic') {\n      return [];\n    }\n\n    return additionalScopes.customScopes?.[this.#providerName] ?? [];\n  }\n\n  /**\n   * Fetches credentials for the given resource.\n   */\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const { url, additionalScope, ...restOptions } = options;\n\n    const scopes = this.#scopeMapping.default.slice();\n    if (additionalScope?.repoWrite) {\n      scopes.push(...this.#scopeMapping.repoWrite);\n    }\n\n    const additionalScopes =\n      this.getAdditionalScopesForProvider(additionalScope);\n\n    if (additionalScopes.length) {\n      scopes.push(...additionalScopes);\n    }\n\n    const uniqueScopes = [...new Set(scopes)];\n\n    const token = await this.#api.getAccessToken(uniqueScopes, restOptions);\n\n    return {\n      token,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * Factory class for creating {@link @backstage/integration#ScmIntegrationRegistry} instances.\n *\n * @public\n */\nexport class ScmIntegrationsApi {\n  /**\n   * Instantiates an {@link @backstage/integration#ScmIntegrationRegistry}.\n   *\n   * @param config - The root of the config hierarchy.\n   */\n  static fromConfig(config: Config): ScmIntegrationRegistry {\n    return ScmIntegrations.fromConfig(config);\n  }\n}\n\n/**\n * The API that holds all configured SCM integrations.\n *\n * @public\n */\nexport const scmIntegrationsApiRef: ApiRef<ScmIntegrationRegistry> =\n  createApiRef({\n    id: 'integration.scmintegrations',\n  });\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport CodeIcon from '@material-ui/icons/Code';\nimport React from 'react';\nimport { useApp } from '@backstage/core-plugin-api';\n\n/**\n * Props for {@link ScmIntegrationIcon}.\n *\n * @public\n */\nexport type ScmIntegrationIconProps = {\n  /**\n   * The integration type, e.g. \"github\".\n   */\n  type?: string;\n};\n\n/**\n * An icon that represents a certain SCM integration.\n *\n * @public\n */\nexport const ScmIntegrationIcon = (props: ScmIntegrationIconProps) => {\n  const { type } = props;\n  const app = useApp();\n  const DefaultIcon = CodeIcon;\n  const Icon = type ? app.getSystemIcon(type) ?? DefaultIcon : DefaultIcon;\n  return <Icon />;\n};\n"],"names":[],"mappings":"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"}