{"version":3,"file":"index.cjs.js","sources":["../src/helpers.ts","../src/azure/AzureUrl.ts","../src/azure/config.ts","../src/azure/AzureIntegration.ts","../src/azure/core.ts","../src/bitbucket/config.ts","../src/bitbucket/BitbucketIntegration.ts","../src/bitbucket/core.ts","../src/gerrit/config.ts","../src/gerrit/GerritIntegration.ts","../src/github/config.ts","../src/github/core.ts","../src/github/SingleInstanceGithubCredentialsProvider.ts","../src/github/DefaultGithubCredentialsProvider.ts","../src/github/GitHubIntegration.ts","../src/gitlab/config.ts","../src/gitlab/core.ts","../src/gitlab/GitLabIntegration.ts","../src/googleGcs/config.ts","../src/awsS3/config.ts","../src/awsS3/AwsS3Integration.ts","../src/ScmIntegrations.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\n\n/** Checks whether the given argument is a valid URL hostname */\nexport function isValidHost(host: string): boolean {\n  const check = new URL('http://example.com');\n  check.host = host;\n  return check.host === host;\n}\n\n/** Checks whether the given argument is a valid URL */\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function basicIntegrations<T extends ScmIntegration>(\n  integrations: T[],\n  getHost: (integration: T) => string,\n): ScmIntegrationsGroup<T> {\n  return {\n    list(): T[] {\n      return integrations;\n    },\n    byUrl(url: string | URL): T | undefined {\n      try {\n        const parsed = typeof url === 'string' ? new URL(url) : url;\n        return integrations.find(i => getHost(i) === parsed.host);\n      } catch {\n        return undefined;\n      }\n    },\n    byHost(host: string): T | undefined {\n      return integrations.find(i => getHost(i) === host);\n    },\n  };\n}\n\n/**\n * Default implementation of {@link ScmIntegration} `resolveUrl`, that only\n * works with URL pathname based providers.\n *\n * @public\n */\nexport function defaultScmResolveUrl(options: {\n  url: string;\n  base: string;\n  lineNumber?: number;\n}): string {\n  const { url, base, lineNumber } = options;\n\n  // If it is a fully qualified URL - then return it verbatim\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return url;\n  } catch {\n    // ignore intentionally\n  }\n\n  let updated: URL;\n\n  if (url.startsWith('/')) {\n    // If it is an absolute path, move relative to the repo root\n    const { filepath } = parseGitUrl(base);\n    updated = new URL(base);\n    const repoRootPath = trimEnd(\n      updated.pathname.substring(0, updated.pathname.length - filepath.length),\n      '/',\n    );\n    updated.pathname = `${repoRootPath}${url}`;\n  } else {\n    // For relative URLs, just let the default URL constructor handle the\n    // resolving. Note that this essentially will treat the last segment of the\n    // base as a file - NOT a folder - unless the url ends in a slash.\n    updated = new URL(url, base);\n  }\n\n  updated.search = new URL(base).search;\n  if (lineNumber) {\n    updated.hash = `L${lineNumber}`;\n  }\n  return updated.toString();\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VERSION_PREFIX_GIT_BRANCH = 'GB';\n\nexport class AzureUrl {\n  /**\n   * Parses an azure URL as copied from the browser address bar.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  static fromRepoUrl(repoUrl: string): AzureUrl {\n    const url = new URL(repoUrl);\n\n    let owner;\n    let project;\n    let repo;\n\n    const parts = url.pathname.split('/').map(part => decodeURIComponent(part));\n    if (parts[2] === '_git') {\n      owner = parts[1];\n      project = repo = parts[3];\n    } else if (parts[3] === '_git') {\n      owner = parts[1];\n      project = parts[2];\n      repo = parts[4];\n    }\n\n    if (!owner || !project || !repo) {\n      throw new Error('Azure URL must point to a git repository');\n    }\n\n    const path = url.searchParams.get('path') ?? undefined;\n\n    let ref;\n    const version = url.searchParams.get('version');\n    if (version) {\n      const prefix = version.slice(0, 2);\n      if (prefix !== 'GB') {\n        throw new Error('Azure URL version must point to a git branch');\n      }\n      ref = version.slice(2);\n    }\n\n    return new AzureUrl(url.origin, owner, project, repo, path, ref);\n  }\n\n  #origin: string;\n  #owner: string;\n  #project: string;\n  #repo: string;\n  #path?: string;\n  #ref?: string;\n\n  private constructor(\n    origin: string,\n    owner: string,\n    project: string,\n    repo: string,\n    path?: string,\n    ref?: string,\n  ) {\n    this.#origin = origin;\n    this.#owner = owner;\n    this.#project = project;\n    this.#repo = repo;\n    this.#path = path;\n    this.#ref = ref;\n  }\n\n  #baseUrl = (...parts: string[]): URL => {\n    const url = new URL(this.#origin);\n    url.pathname = parts.map(part => encodeURIComponent(part)).join('/');\n    return url;\n  };\n\n  /**\n   * Returns a repo URL that can be used to navigate to the resource in azure.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  toRepoUrl(): string {\n    let url;\n    if (this.#project === this.#repo) {\n      url = this.#baseUrl(this.#owner, '_git', this.#repo);\n    } else {\n      url = this.#baseUrl(this.#owner, this.#project, '_git', this.#repo);\n    }\n\n    if (this.#path) {\n      url.searchParams.set('path', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', VERSION_PREFIX_GIT_BRANCH + this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the file download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a file.\n   */\n  toFileUrl(): string {\n    if (!this.#path) {\n      throw new Error(\n        'Azure URL must point to a specific path to be able to download a file',\n      );\n    }\n\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('api-version', '6.0');\n    url.searchParams.set('path', this.#path);\n\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the archive download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a repo.\n   */\n  toArchiveUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('recursionLevel', 'full');\n    url.searchParams.set('download', 'true');\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#path) {\n      url.searchParams.set('scopePath', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the API url for fetching commits from a branch for this azure resource.\n   *\n   * Throws an error if the URL does not point to a commit.\n   */\n  toCommitsUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'commits',\n    );\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#ref) {\n      url.searchParams.set('searchCriteria.itemVersion.version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the name of the owner, a user or an organization.\n   */\n  getOwner(): string {\n    return this.#owner;\n  }\n\n  /**\n   * Returns the name of the project.\n   */\n  getProject(): string {\n    return this.#project;\n  }\n\n  /**\n   * Returns the name of the repo.\n   */\n  getRepo(): string {\n    return this.#repo;\n  }\n\n  /**\n   * Returns the file path within the repo if the URL contains one.\n   */\n  getPath(): string | undefined {\n    return this.#path;\n  }\n\n  /**\n   * Returns the git ref in the repo if the URL contains one.\n   */\n  getRef(): string | undefined {\n    return this.#ref;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AZURE_HOST = 'dev.azure.com';\n\n/**\n * The configuration parameters for a single Azure provider.\n *\n * @public\n */\nexport type AzureIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"dev.azure.com\".\n   *\n   * Currently only \"dev.azure.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * The authorization token to use for requests.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n};\n\n/**\n * Reads a single Azure integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readAzureIntegrationConfig(\n  config: Config,\n): AzureIntegrationConfig {\n  const host = config.getOptionalString('host') ?? AZURE_HOST;\n  const token = config.getOptionalString('token');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Azure integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  return { host, token };\n}\n\n/**\n * Reads a set of Azure integration configs, and inserts some defaults for\n * public Azure if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readAzureIntegrationConfigs(\n  configs: Config[],\n): AzureIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureIntegrationConfig);\n\n  // If no explicit dev.azure.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({ host: AZURE_HOST });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\n/**\n * Microsoft Azure based integration.\n *\n * @public\n */\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    try {\n      const azureUrl = AzureUrl.fromRepoUrl(base);\n      const newUrl = new URL(base);\n\n      // We lean on the URL path resolution logic to resolve the path param\n      const mockBaseUrl = new URL(`https://a.com${azureUrl.getPath() ?? ''}`);\n      const updatedPath = new URL(url, mockBaseUrl).pathname;\n      newUrl.searchParams.set('path', updatedPath);\n\n      if (options.lineNumber) {\n        newUrl.searchParams.set('line', String(options.lineNumber));\n        newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n        newUrl.searchParams.set('lineStartColumn', '1');\n        newUrl.searchParams.set('lineEndColumn', '1');\n      }\n\n      return newUrl.toString();\n    } catch {\n      // If not an actual file path within a repo, treat the URL as raw\n      return new URL(url, base).toString();\n    }\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * - from: `https://dev.azure.com/{organization}/{project}/_git/reponame?path={path}&version=GB{commitOrBranch}&_a=contents`\n * - to:   `https://dev.azure.com/{organization}/{project}/_apis/git/repositories/reponame/items?path={path}&version={commitOrBranch}`\n *\n * @param url - A URL pointing to a file\n * @public\n */\nexport function getAzureFileFetchUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toFileUrl();\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @public\n */\nexport function getAzureDownloadUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toArchiveUrl();\n}\n\n/**\n * Given a URL, return the API URL to fetch commits on the branch.\n *\n * @param url - A URL pointing to a repository or a sub-path\n * @public\n */\nexport function getAzureCommitsUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toCommitsUrl();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getAzureRequestOptions(\n  config: AzureIntegrationConfig,\n  additionalHeaders?: Record<string, string>,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = additionalHeaders\n    ? { ...additionalHeaders }\n    : {};\n\n  if (config.token) {\n    const buffer = Buffer.from(`:${config.token}`, 'utf8');\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return { headers };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst BITBUCKET_HOST = 'bitbucket.org';\nconst BITBUCKET_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket API provider.\n *\n * @public\n */\nexport type BitbucketIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.org\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.bitbucket.org/2.0\",\n   * with no trailing slash.\n   *\n   * Values omitted at the optional property at the app-config will be deduced\n   * from the \"host\" value.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketIntegrationConfig(\n  config: Config,\n): BitbucketIntegrationConfig {\n  const host = config.getOptionalString('host') ?? BITBUCKET_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  const username = config.getOptionalString('username');\n  const appPassword = config.getOptionalString('appPassword');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === BITBUCKET_HOST) {\n    apiBaseUrl = BITBUCKET_API_BASE_URL;\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket integration configs, and inserts some defaults for\n * public Bitbucket if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketIntegrationConfigs(\n  configs: Config[],\n): BitbucketIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === BITBUCKET_HOST)) {\n    result.push({\n      host: BITBUCKET_HOST,\n      apiBaseUrl: BITBUCKET_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketIntegrationConfig,\n  readBitbucketIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket based integration.\n *\n * @public\n */\nexport class BitbucketIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucket') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: BitbucketIntegrationConfig) {}\n\n  get type(): string {\n    return 'bitbucket';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    if (!options.lineNumber) {\n      return resolved;\n    }\n\n    const url = new URL(resolved);\n\n    if (this.integrationConfig.host === 'bitbucket.org') {\n      // Bitbucket Cloud uses the syntax #lines-{start}[:{end}][,...]\n      url.hash = `lines-${options.lineNumber}`;\n    } else {\n      // Bitbucket Server uses the syntax #{start}[-{end}][,...]\n      url.hash = `${options.lineNumber}`;\n    }\n\n    return url.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketDefaultBranch(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, resource } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = isHosted\n    ? `${config.apiBaseUrl}/repositories/${project}/${repoName}`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n\n  if (response.status === 404 && !isHosted) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  let defaultBranch;\n  if (isHosted) {\n    const repoInfo = await response.json();\n    defaultBranch = repoInfo.mainbranch.name;\n  } else {\n    const { displayId } = await response.json();\n    defaultBranch = displayId;\n  }\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketDownloadUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath ? `&path=${encodeURIComponent(filepath)}` : '';\n  const archiveUrl = isHosted\n    ? `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n\n  return archiveUrl;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketFileFetchUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (config.host === 'bitbucket.org') {\n      if (!ref) {\n        throw new Error('Invalid Bitbucket URL or file path');\n      }\n      return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n    }\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketRequestOptions(\n  config: BitbucketIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration parameters for a single Gerrit API provider.\n *\n * @public\n */\nexport type GerritIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gerrit-review.com\"\n   */\n  host: string;\n\n  /**\n   * The optional base URL of the Gerrit instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gerrit instance, e.g.\n   * \"https://gerrit-review.com/gerrit\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n\n  /**\n   * The username to use for requests to gerrit.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n};\n\n/**\n * Reads a single Gerrit integration config.\n *\n * @param config - The config object of a single integration\n *\n * @public\n */\nexport function readGerritIntegrationConfig(\n  config: Config,\n): GerritIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  return {\n    host,\n    baseUrl,\n    username,\n    password,\n  };\n}\n\n/**\n * Reads a set of Gerrit integration configs.\n *\n * @param configs - All of the integration config objects\n *\n * @public\n */\nexport function readGerritIntegrationConfigs(\n  configs: Config[],\n): GerritIntegrationConfig[] {\n  return configs.map(readGerritIntegrationConfig);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GerritIntegrationConfig,\n  readGerritIntegrationConfigs,\n} from './config';\n\n/**\n * A Gerrit based integration.\n *\n * @public\n */\nexport class GerritIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GerritIntegration> = ({ config }) => {\n    const configs = readGerritIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gerrit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GerritIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GerritIntegrationConfig) {}\n\n  get type(): string {\n    return 'gerrit';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GerritIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base, lineNumber } = options;\n    let updated;\n    if (url) {\n      updated = new URL(url, base);\n    } else {\n      updated = new URL(base);\n    }\n    if (lineNumber) {\n      updated.hash = lineNumber.toString();\n    }\n    return updated.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    // Not applicable for gerrit.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst GITHUB_HOST = 'github.com';\nconst GITHUB_API_BASE_URL = 'https://api.github.com';\nconst GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com';\n\n/**\n * The configuration parameters for a single GitHub integration.\n *\n * @public\n */\nexport type GitHubIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"github.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.github.com\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The base URL of the raw fetch endpoint of this provider, e.g.\n   * \"https://raw.githubusercontent.com\", with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  rawBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The GitHub Apps configuration to use for requests to this provider.\n   *\n   * If no apps are specified, token or anonymous is used.\n   */\n  apps?: GithubAppConfig[];\n};\n\n/**\n * The configuration parameters for authenticating a GitHub Application.\n *\n * @remarks\n *\n * A GitHub Apps configuration can be generated using the `backstage-cli create-github-app` command.\n *\n * @public\n */\nexport type GithubAppConfig = {\n  /**\n   * Unique app identifier, found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  appId: number;\n  /**\n   * The private key is used by the GitHub App integration to authenticate the app.\n   * A private key can be generated from the app at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  privateKey: string;\n  /**\n   * Webhook secret can be configured at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  webhookSecret: string;\n  /**\n   * Found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientId: string;\n  /**\n   * Client secrets can be generated at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientSecret: string;\n  /**\n   * List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\n   * However you can list the installations with the GitHub API. You can find the list of installations here:\n   * https://api.github.com/app/installations\n   * The relevant documentation for this is here.\n   * https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples\n   */\n  allowedInstallationOwners?: string[];\n};\n\n/**\n * Reads a single GitHub integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitHubIntegrationConfig(\n  config: Config,\n): GitHubIntegrationConfig {\n  const host = config.getOptionalString('host') ?? GITHUB_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  let rawBaseUrl = config.getOptionalString('rawBaseUrl');\n  const token = config.getOptionalString('token');\n  const apps = config.getOptionalConfigArray('apps')?.map(c => ({\n    appId: c.getNumber('appId'),\n    clientId: c.getString('clientId'),\n    clientSecret: c.getString('clientSecret'),\n    webhookSecret: c.getString('webhookSecret'),\n    privateKey: c.getString('privateKey'),\n    allowedInstallationOwners: c.getOptionalStringArray(\n      'allowedInstallationOwners',\n    ),\n  }));\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitHub integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    apiBaseUrl = GITHUB_API_BASE_URL;\n  }\n\n  if (rawBaseUrl) {\n    rawBaseUrl = trimEnd(rawBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    rawBaseUrl = GITHUB_RAW_BASE_URL;\n  }\n\n  return { host, apiBaseUrl, rawBaseUrl, token, apps };\n}\n\n/**\n * Reads a set of GitHub integration configs, and inserts some defaults for\n * public GitHub if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitHubIntegrationConfigs(\n  configs: Config[],\n): GitHubIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitHubIntegrationConfig);\n\n  // If no explicit github.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === GITHUB_HOST)) {\n    result.push({\n      host: GITHUB_HOST,\n      apiBaseUrl: GITHUB_API_BASE_URL,\n      rawBaseUrl: GITHUB_RAW_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GitHubIntegrationConfig } from './config';\nimport { GithubCredentials } from './types';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://github.com/a/b/blob/branchname/path/to/c.yaml\n * to:   https://api.github.com/repos/a/b/contents/path/to/c.yaml?ref=branchname\n * or:   https://raw.githubusercontent.com/a/b/branchname/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitHubFileFetchUrl(\n  url: string,\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      !ref ||\n      // GitHub is automatically redirecting tree urls to blob urls so it's\n      // fine to pass a tree url.\n      (filepathtype !== 'blob' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'tree')\n    ) {\n      throw new Error('Invalid GitHub URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    if (chooseEndpoint(config, credentials) === 'api') {\n      return `${config.apiBaseUrl}/repos/${owner}/${name}/contents/${pathWithoutSlash}?ref=${ref}`;\n    }\n    return `${config.rawBaseUrl}/${owner}/${name}/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @deprecated This function is no longer used internally\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitHubRequestOptions(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (chooseEndpoint(config, credentials) === 'api') {\n    headers.Accept = 'application/vnd.github.v3.raw';\n  }\n\n  if (credentials.token) {\n    headers.Authorization = `token ${credentials.token}`;\n  }\n\n  return { headers };\n}\n\nexport function chooseEndpoint(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): 'api' | 'raw' {\n  if (config.apiBaseUrl && (credentials.token || !config.rawBaseUrl)) {\n    return 'api';\n  }\n  return 'raw';\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GithubAppConfig, GitHubIntegrationConfig } from './config';\nimport { createAppAuth } from '@octokit/auth-app';\nimport { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport { DateTime } from 'luxon';\nimport {\n  GithubCredentials,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n} from './types';\n\ntype InstallationData = {\n  installationId: number;\n  suspended: boolean;\n};\n\nclass Cache {\n  private readonly tokenCache = new Map<\n    string,\n    { token: string; expiresAt: DateTime }\n  >();\n\n  async getOrCreateToken(\n    key: string,\n    supplier: () => Promise<{ token: string; expiresAt: DateTime }>,\n  ): Promise<{ accessToken: string }> {\n    const item = this.tokenCache.get(key);\n    if (item && this.isNotExpired(item.expiresAt)) {\n      return { accessToken: item.token };\n    }\n\n    const result = await supplier();\n    this.tokenCache.set(key, result);\n    return { accessToken: result.token };\n  }\n\n  // consider timestamps older than 50 minutes to be expired.\n  private isNotExpired = (date: DateTime) =>\n    date.diff(DateTime.local(), 'minutes').minutes > 50;\n}\n\n/**\n * This accept header is required when calling App APIs in GitHub Enterprise.\n * It has no effect on calls to github.com and can probably be removed entirely\n * once GitHub Apps is out of preview.\n */\nconst HEADERS = {\n  Accept: 'application/vnd.github.machine-man-preview+json',\n};\n\n/**\n * GithubAppManager issues and caches tokens for a specific GitHub App.\n */\nclass GithubAppManager {\n  private readonly appClient: Octokit;\n  private readonly baseUrl?: string;\n  private readonly baseAuthConfig: { appId: number; privateKey: string };\n  private readonly cache = new Cache();\n  private readonly allowedInstallationOwners: string[] | undefined; // undefined allows all installations\n\n  constructor(config: GithubAppConfig, baseUrl?: string) {\n    this.allowedInstallationOwners = config.allowedInstallationOwners;\n    this.baseUrl = baseUrl;\n    this.baseAuthConfig = {\n      appId: config.appId,\n      privateKey: config.privateKey.replace(/\\\\n/gm, '\\n'),\n    };\n    this.appClient = new Octokit({\n      baseUrl,\n      headers: HEADERS,\n      authStrategy: createAppAuth,\n      auth: this.baseAuthConfig,\n    });\n  }\n\n  async getInstallationCredentials(\n    owner: string,\n    repo?: string,\n  ): Promise<{ accessToken: string | undefined }> {\n    const { installationId, suspended } = await this.getInstallationData(owner);\n    if (this.allowedInstallationOwners) {\n      if (!this.allowedInstallationOwners?.includes(owner)) {\n        return { accessToken: undefined }; // An empty token allows anonymous access to public repos\n      }\n    }\n    if (suspended) {\n      throw new Error(`The GitHub application for ${owner} is suspended`);\n    }\n\n    const cacheKey = repo ? `${owner}/${repo}` : owner;\n\n    // Go and grab an access token for the app scoped to a repository if provided, if not use the organisation installation.\n    return this.cache.getOrCreateToken(cacheKey, async () => {\n      const result = await this.appClient.apps.createInstallationAccessToken({\n        installation_id: installationId,\n        headers: HEADERS,\n      });\n      if (repo && result.data.repository_selection === 'selected') {\n        const installationClient = new Octokit({\n          baseUrl: this.baseUrl,\n          auth: result.data.token,\n        });\n        const repos = await installationClient.paginate(\n          installationClient.apps.listReposAccessibleToInstallation,\n        );\n        const hasRepo = repos.some(repository => {\n          return repository.name === repo;\n        });\n        if (!hasRepo) {\n          throw new Error(\n            `The Backstage GitHub application used in the ${owner} organization does not have access to a repository with the name ${repo}`,\n          );\n        }\n      }\n      return {\n        token: result.data.token,\n        expiresAt: DateTime.fromISO(result.data.expires_at),\n      };\n    });\n  }\n\n  getInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    return this.appClient.paginate(this.appClient.apps.listInstallations);\n  }\n\n  private async getInstallationData(owner: string): Promise<InstallationData> {\n    const allInstallations = await this.getInstallations();\n    const installation = allInstallations.find(\n      inst =>\n        inst.account?.login?.toLocaleLowerCase('en-US') ===\n        owner.toLocaleLowerCase('en-US'),\n    );\n    if (installation) {\n      return {\n        installationId: installation.id,\n        suspended: Boolean(installation.suspended_by),\n      };\n    }\n    const notFoundError = new Error(\n      `No app installation found for ${owner} in ${this.baseAuthConfig.appId}`,\n    );\n    notFoundError.name = 'NotFoundError';\n    throw notFoundError;\n  }\n}\n\n/**\n * Corresponds to a Github installation which internally could hold several GitHub Apps.\n *\n * @public\n */\nexport class GithubAppCredentialsMux {\n  private readonly apps: GithubAppManager[];\n\n  constructor(config: GitHubIntegrationConfig) {\n    this.apps =\n      config.apps?.map(ac => new GithubAppManager(ac, config.apiBaseUrl)) ?? [];\n  }\n\n  async getAllInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    if (!this.apps.length) {\n      return [];\n    }\n\n    const installs = await Promise.all(\n      this.apps.map(app => app.getInstallations()),\n    );\n\n    return installs.flat();\n  }\n\n  async getAppToken(owner: string, repo?: string): Promise<string | undefined> {\n    if (this.apps.length === 0) {\n      return undefined;\n    }\n\n    const results = await Promise.all(\n      this.apps.map(app =>\n        app.getInstallationCredentials(owner, repo).then(\n          credentials => ({ credentials, error: undefined }),\n          error => ({ credentials: undefined, error }),\n        ),\n      ),\n    );\n\n    const result = results.find(resultItem => resultItem.credentials);\n    if (result) {\n      return result.credentials!.accessToken;\n    }\n\n    const errors = results.map(r => r.error);\n    const notNotFoundError = errors.find(err => err.name !== 'NotFoundError');\n    if (notNotFoundError) {\n      throw notNotFoundError;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class SingleInstanceGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static create: (\n    config: GitHubIntegrationConfig,\n  ) => GithubCredentialsProvider = config => {\n    return new SingleInstanceGithubCredentialsProvider(\n      new GithubAppCredentialsMux(config),\n      config.token,\n    );\n  };\n\n  private constructor(\n    private readonly githubAppCredentialsMux: GithubAppCredentialsMux,\n    private readonly token?: string,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'github.com/backstage/foobar'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = parseGitUrl(opts.url);\n\n    const owner = parsed.owner || parsed.name;\n    const repo = parsed.owner ? parsed.name : undefined;\n\n    let type: GithubCredentialType = 'app';\n    let token = await this.githubAppCredentialsMux.getAppToken(owner, repo);\n    if (!token) {\n      type = 'token';\n      token = this.token;\n    }\n\n    return {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      token,\n      type,\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GithubCredentials, GithubCredentialsProvider } from './types';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { SingleInstanceGithubCredentialsProvider } from './SingleInstanceGithubCredentialsProvider';\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class DefaultGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static fromIntegrations(integrations: ScmIntegrationRegistry) {\n    const credentialsProviders: Map<string, GithubCredentialsProvider> =\n      new Map<string, GithubCredentialsProvider>();\n\n    integrations.github.list().forEach(integration => {\n      const credentialsProvider =\n        SingleInstanceGithubCredentialsProvider.create(integration.config);\n      credentialsProviders.set(integration.config.host, credentialsProvider);\n    });\n    return new DefaultGithubCredentialsProvider(credentialsProviders);\n  }\n\n  private constructor(\n    private readonly providers: Map<string, GithubCredentialsProvider>,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage/foobar'\n   * })\n   *\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = new URL(opts.url);\n    const provider = this.providers.get(parsed.host);\n\n    if (!provider) {\n      throw new Error(\n        `There is no GitHub integration that matches ${opts.url}. Please add a configuration for an integration.`,\n      );\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitHubIntegrationConfig,\n  readGitHubIntegrationConfigs,\n} from './config';\n\n/**\n * A GitHub based integration.\n *\n * @public\n */\nexport class GitHubIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitHubIntegration> = ({ config }) => {\n    const configs = readGitHubIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitHubIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitHubIntegrationConfig) {}\n\n  get type(): string {\n    return 'github';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitHubIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    // GitHub uses blob URLs for files and tree urls for directory listings. But\n    // there is a redirect from tree to blob for files, so we can always return\n    // tree urls here.\n    return replaceGitHubUrlType(defaultScmResolveUrl(options), 'tree');\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGitHubUrlType(url, 'edit');\n  }\n}\n\n/**\n * Takes a GitHub URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. \"blob\"\n * @public\n */\nexport function replaceGitHubUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(\n    /\\/\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/(blob|tree|edit)\\//,\n    (_, host, owner, repo) => {\n      return `//${host}/${owner}/${repo}/${type}/`;\n    },\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\nconst GITLAB_HOST = 'gitlab.com';\nconst GITLAB_API_BASE_URL = 'https://gitlab.com/api/v4';\n\n/**\n * The configuration parameters for a single GitLab integration.\n *\n * @public\n */\nexport type GitLabIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. `gitlab.com`.\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g.\n   * `https://gitlab.com/api/v4`, with no trailing slash.\n   *\n   * May be omitted specifically for public GitLab; then it will be deduced.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The baseUrl of this provider, e.g. `https://gitlab.com`, which is passed\n   * into the GitLab client.\n   *\n   * If no baseUrl is provided, it will default to `https://${host}`\n   */\n  baseUrl: string;\n};\n\n/**\n * Reads a single GitLab integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitLabIntegrationConfig(\n  config: Config,\n): GitLabIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  let baseUrl = config.getOptionalString('baseUrl');\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITLAB_HOST) {\n    apiBaseUrl = GITLAB_API_BASE_URL;\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${host}' is not a valid host`,\n    );\n  } else if (!apiBaseUrl || !isValidUrl(apiBaseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${apiBaseUrl}' is not a valid apiBaseUrl`,\n    );\n  } else if (!isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  return { host, token, apiBaseUrl, baseUrl };\n}\n\n/**\n * Reads a set of GitLab integration configs, and inserts some defaults for\n * public GitLab if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitLabIntegrationConfigs(\n  configs: Config[],\n): GitLabIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitLabIntegrationConfig);\n\n  // As a convenience we always make sure there's at least an unauthenticated\n  // reader for public gitlab repos.\n  if (!result.some(c => c.host === GITLAB_HOST)) {\n    result.push({\n      host: GITLAB_HOST,\n      apiBaseUrl: GITLAB_API_BASE_URL,\n      baseUrl: `https://${GITLAB_HOST}`,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitLabIntegrationConfig } from './config';\nimport fetch from 'cross-fetch';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.example.com/a/b/raw/master/c.yaml\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n): Promise<string> {\n  // TODO(Rugvip): From the old GitlabReaderProcessor; used\n  // the existence of /-/blob/ to switch the logic. Don't know if this\n  // makes sense and it might require some more work.\n  if (url.includes('/-/blob/')) {\n    const projectID = await getProjectId(url, config);\n    return buildProjectUrl(url, projectID).toString();\n  }\n  return buildRawUrl(url).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitLabRequestOptions(config: GitLabIntegrationConfig): {\n  headers: Record<string, string>;\n} {\n  const { token = '' } = config;\n  return {\n    headers: {\n      'PRIVATE-TOKEN': token,\n    },\n  };\n}\n\n// Converts\n// from: https://gitlab.example.com/a/b/blob/master/c.yaml\n// to:   https://gitlab.example.com/a/b/raw/master/c.yaml\nexport function buildRawUrl(target: string): URL {\n  try {\n    const url = new URL(target);\n\n    const [empty, userOrOrg, repoName, blobKeyword, ...restOfPath] =\n      url.pathname.split('/');\n\n    if (\n      empty !== '' ||\n      userOrOrg === '' ||\n      repoName === '' ||\n      blobKeyword !== 'blob' ||\n      !restOfPath.join('/').match(/\\.(yaml|yml)$/)\n    ) {\n      throw new Error('Wrong GitLab URL');\n    }\n\n    // Replace 'blob' with 'raw'\n    url.pathname = [empty, userOrOrg, repoName, 'raw', ...restOfPath].join('/');\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(target: string, projectID: Number): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname.split('/-/blob/')[1];\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n\n    url.pathname = [\n      '/api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/-/blob/')) {\n    throw new Error('Please provide full path to yaml file from GitLab');\n  }\n\n  try {\n    const repo = url.pathname.split('/-/blob/')[0];\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.origin}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config),\n    );\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitLabIntegrationConfig,\n  readGitLabIntegrationConfigs,\n} from './config';\n\n/**\n * A GitLab based integration.\n *\n * @public\n */\nexport class GitLabIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitLabIntegration> = ({ config }) => {\n    const configs = readGitLabIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gitlab') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitLabIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitLabIntegrationConfig) {}\n\n  get type(): string {\n    return 'gitlab';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitLabIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    return defaultScmResolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceUrlType(url, 'edit');\n  }\n}\n\nexport function replaceUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(/\\/\\-\\/(blob|tree|edit)\\//, `/-/${type}/`);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a single Google Cloud Storage provider.\n *\n * @public\n */\nexport type GoogleGcsIntegrationConfig = {\n  /**\n   * Service account email used to authenticate requests.\n   */\n  clientEmail?: string;\n  /**\n   * Service account private key used to authenticate requests.\n   */\n  privateKey?: string;\n};\n\n/**\n * Reads a single Google GCS integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGoogleGcsIntegrationConfig(\n  config: Config,\n): GoogleGcsIntegrationConfig {\n  if (!config) {\n    return {};\n  }\n\n  if (!config.has('clientEmail') && !config.has('privateKey')) {\n    return {};\n  }\n\n  const privateKey = config.getString('privateKey').split('\\\\n').join('\\n');\n\n  const clientEmail = config.getString('clientEmail');\n  return { clientEmail: clientEmail, privateKey: privateKey };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst AMAZON_AWS_HOST = 'amazonaws.com';\n\n/**\n * The configuration parameters for a single AWS S3 provider.\n *\n * @public\n */\nexport type AwsS3IntegrationConfig = {\n  /**\n   * Host, derived from endpoint, and defaults to amazonaws.com\n   */\n  host: string;\n\n  /**\n   * (Optional) AWS Endpoint.\n   * The endpoint URI to send requests to. The default endpoint is built from the configured region.\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property\n   *\n   * Supports non-AWS providers, e.g. for LocalStack, endpoint may look like http://localhost:4566\n   */\n  endpoint?: string;\n\n  /**\n   * (Optional) Whether to use path style URLs when communicating with S3.\n   * Defaults to false.\n   * This allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used.\n   */\n  s3ForcePathStyle?: boolean;\n\n  /**\n   * (Optional) User access key id\n   */\n  accessKeyId?: string;\n\n  /**\n   * (Optional) User secret access key\n   */\n  secretAccessKey?: string;\n\n  /**\n   * (Optional) ARN of role to be assumed\n   */\n  roleArn?: string;\n};\n\n/**\n * Reads a single Aws S3 integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\n\nexport function readAwsS3IntegrationConfig(\n  config: Config,\n): AwsS3IntegrationConfig {\n  const endpoint = config.getOptionalString('endpoint');\n  const s3ForcePathStyle =\n    config.getOptionalBoolean('s3ForcePathStyle') ?? false;\n  let host;\n  let pathname;\n  if (endpoint) {\n    try {\n      const url = new URL(endpoint);\n      host = url.host;\n      pathname = url.pathname;\n    } catch {\n      throw new Error(\n        `invalid awsS3 integration config, endpoint '${endpoint}' is not a valid URL`,\n      );\n    }\n    if (pathname !== '/') {\n      throw new Error(\n        `invalid awsS3 integration config, endpoints cannot contain path, got '${endpoint}'`,\n      );\n    }\n  } else {\n    host = AMAZON_AWS_HOST;\n  }\n\n  const accessKeyId = config.getOptionalString('accessKeyId');\n  const secretAccessKey = config.getOptionalString('secretAccessKey');\n  const roleArn = config.getOptionalString('roleArn');\n\n  return {\n    host,\n    endpoint,\n    s3ForcePathStyle,\n    accessKeyId,\n    secretAccessKey,\n    roleArn,\n  };\n}\n\n/**\n * Reads a set of AWS S3 integration configs, and inserts some defaults for\n * public Amazon AWS if not specified.\n *\n * @param configs - The config objects of the integrations\n * @public\n */\nexport function readAwsS3IntegrationConfigs(\n  configs: Config[],\n): AwsS3IntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAwsS3IntegrationConfig);\n\n  // If no explicit amazonaws.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AMAZON_AWS_HOST)) {\n    result.push({\n      host: AMAZON_AWS_HOST,\n    });\n  }\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AwsS3IntegrationConfig, readAwsS3IntegrationConfigs } from './config';\n\n/**\n * Integrates with AWS S3 or compatible solutions.\n *\n * @public\n */\nexport class AwsS3Integration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AwsS3Integration> = ({ config }) => {\n    const configs = readAwsS3IntegrationConfigs(\n      config.getOptionalConfigArray('integrations.awsS3') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AwsS3Integration(c)),\n      i => i.config.host,\n    );\n  };\n\n  get type(): string {\n    return 'awsS3';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AwsS3IntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  constructor(private readonly integrationConfig: AwsS3IntegrationConfig) {}\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for awsS3\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Integration } from './awsS3/AwsS3Integration';\nimport { AzureIntegration } from './azure/AzureIntegration';\nimport { BitbucketIntegration } from './bitbucket/BitbucketIntegration';\nimport { GerritIntegration } from './gerrit/GerritIntegration';\nimport { GitHubIntegration } from './github/GitHubIntegration';\nimport { GitLabIntegration } from './gitlab/GitLabIntegration';\nimport { defaultScmResolveUrl } from './helpers';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\nimport { ScmIntegrationRegistry } from './registry';\n\n/**\n * The set of supported integrations.\n *\n * @public\n */\nexport interface IntegrationsByType {\n  awsS3: ScmIntegrationsGroup<AwsS3Integration>;\n  azure: ScmIntegrationsGroup<AzureIntegration>;\n  bitbucket: ScmIntegrationsGroup<BitbucketIntegration>;\n  gerrit: ScmIntegrationsGroup<GerritIntegration>;\n  github: ScmIntegrationsGroup<GitHubIntegration>;\n  gitlab: ScmIntegrationsGroup<GitLabIntegration>;\n}\n\n/**\n * Exposes the set of supported integrations.\n *\n * @public\n */\nexport class ScmIntegrations implements ScmIntegrationRegistry {\n  private readonly byType: IntegrationsByType;\n\n  static fromConfig(config: Config): ScmIntegrations {\n    return new ScmIntegrations({\n      awsS3: AwsS3Integration.factory({ config }),\n      azure: AzureIntegration.factory({ config }),\n      bitbucket: BitbucketIntegration.factory({ config }),\n      gerrit: GerritIntegration.factory({ config }),\n      github: GitHubIntegration.factory({ config }),\n      gitlab: GitLabIntegration.factory({ config }),\n    });\n  }\n\n  constructor(integrationsByType: IntegrationsByType) {\n    this.byType = integrationsByType;\n  }\n\n  get awsS3(): ScmIntegrationsGroup<AwsS3Integration> {\n    return this.byType.awsS3;\n  }\n\n  get azure(): ScmIntegrationsGroup<AzureIntegration> {\n    return this.byType.azure;\n  }\n\n  get bitbucket(): ScmIntegrationsGroup<BitbucketIntegration> {\n    return this.byType.bitbucket;\n  }\n\n  get gerrit(): ScmIntegrationsGroup<GerritIntegration> {\n    return this.byType.gerrit;\n  }\n\n  get github(): ScmIntegrationsGroup<GitHubIntegration> {\n    return this.byType.github;\n  }\n\n  get gitlab(): ScmIntegrationsGroup<GitLabIntegration> {\n    return this.byType.gitlab;\n  }\n\n  list(): ScmIntegration[] {\n    return Object.values(this.byType).flatMap(\n      i => i.list() as ScmIntegration[],\n    );\n  }\n\n  byUrl(url: string | URL): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byUrl(url))\n      .find(Boolean);\n  }\n\n  byHost(host: string): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byHost(host))\n      .find(Boolean);\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const integration = this.byUrl(options.base);\n    if (!integration) {\n      return defaultScmResolveUrl(options);\n    }\n\n    return integration.resolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    const integration = this.byUrl(url);\n    if (!integration) {\n      return url;\n    }\n\n    return integration.resolveEditUrl(url);\n  }\n}\n"],"names":["parseGitUrl","trimEnd","fetch","DateTime","Octokit","createAppAuth"],"mappings":"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"}