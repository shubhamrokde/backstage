{"version":3,"file":"index.esm.js","sources":["../src/errors/assertion.ts","../src/serialization/error.ts","../src/serialization/response.ts","../src/errors/CustomErrorBase.ts","../src/errors/common.ts","../src/errors/ResponseError.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An object that is shaped like an `Error`.\n *\n * @public\n */\nexport type ErrorLike = {\n  name: string;\n  message: string;\n  stack?: string;\n  [unknownKeys: string]: unknown;\n};\n\n/**\n * Checks whether an unknown value is an {@link ErrorLike} object, which guarantees that it's\n * an object that has at least two string properties: a non-empty `name` and `message`.\n *\n * @public\n * @param value - an unknown value\n * @returns true if the value is an {@link ErrorLike} object, false otherwise\n */\nexport function isError(value: unknown): value is ErrorLike {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    return false;\n  }\n  const maybe = value as Partial<ErrorLike>;\n  if (typeof maybe.name !== 'string' || maybe.name === '') {\n    return false;\n  }\n  if (typeof maybe.message !== 'string') {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Asserts that an unknown value is an {@link ErrorLike} object, which guarantees that it's\n * an object that has at least two string properties: a non-empty `name` and `message`.\n *\n * If the value is not an {@link ErrorLike} object, an error is thrown.\n *\n * @public\n * @param value - an unknown value\n */\nexport function assertError(value: unknown): asserts value is ErrorLike {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    throw new Error(`Encountered invalid error, not an object, got '${value}'`);\n  }\n  const maybe = value as Partial<ErrorLike>;\n  if (typeof maybe.name !== 'string' || maybe.name === '') {\n    throw new Error(`Encountered error object without a name, got '${value}'`);\n  }\n  if (typeof maybe.message !== 'string') {\n    throw new Error(\n      `Encountered error object without a message, got '${value}'`,\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport {\n  deserializeError as deserializeErrorInternal,\n  serializeError as serializeErrorInternal,\n} from 'serialize-error';\nimport { isError } from '../errors';\n\n/**\n * The serialized form of an Error.\n *\n * @public\n */\nexport type SerializedError = JsonObject & {\n  /** The name of the exception that was thrown */\n  name: string;\n  /** The message of the exception that was thrown */\n  message: string;\n  /** A stringified stack trace; may not be present */\n  stack?: string;\n  /** A custom code (not necessarily the same as an HTTP response code); may not be present */\n  code?: string;\n};\n\n/**\n * Serializes an error object to a JSON friendly form.\n *\n * @public\n * @param error - The error.\n * @param options - Optional serialization options.\n */\nexport function serializeError(\n  error: Error,\n  options?: {\n    /** Include stack trace in the output (default false) */\n    includeStack?: boolean;\n  },\n): SerializedError {\n  const serialized = serializeErrorInternal(error);\n  const result: SerializedError = {\n    name: 'Unknown',\n    message: '<no reason given>',\n    ...serialized,\n  };\n\n  if (!options?.includeStack) {\n    delete result.stack;\n  }\n\n  return result;\n}\n\n/**\n * Deserializes a serialized error object back to an Error.\n *\n * @public\n */\nexport function deserializeError<T extends Error = Error>(\n  data: SerializedError,\n): T {\n  const result = deserializeErrorInternal(data) as T;\n  if (!data.stack) {\n    result.stack = undefined;\n  }\n  return result;\n}\n\n/**\n * Stringifies an error, including its name and message where available.\n *\n * @param error - The error.\n * @public\n */\nexport function stringifyError(error: unknown): string {\n  if (isError(error)) {\n    // Prefer error.toString, but if it's not implemented we use a nicer fallback\n    const str = String(error);\n    return str !== '[object Object]' ? str : `${error.name}: ${error.message}`;\n  }\n\n  return `unknown error '${error}'`;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SerializedError } from './error';\n\n/**\n * A standard shape of JSON data returned as the body of backend errors.\n *\n * @public\n */\nexport type ErrorResponseBody = {\n  /** Details of the error that was caught */\n  error: SerializedError;\n\n  /** Details about the incoming request */\n  request?: {\n    /** The HTTP method of the request */\n    method: string;\n    /** The URL of the request (excluding protocol and host/port) */\n    url: string;\n  };\n\n  /** Details about the response */\n  response: {\n    /** The numeric HTTP status code that was returned */\n    statusCode: number;\n  };\n};\n\n/**\n * Attempts to construct an ErrorResponseBody out of a failed server request.\n * Assumes that the response has already been checked to be not ok. This\n * function consumes the body of the response, and assumes that it hasn't\n * been consumed before.\n *\n * The code is forgiving, and constructs a useful synthetic body as best it can\n * if the response body wasn't on the expected form.\n *\n * @public\n * @param response - The response of a failed request\n */\nexport async function parseErrorResponseBody(\n  response: Response,\n): Promise<ErrorResponseBody> {\n  try {\n    const text = await response.text();\n    if (text) {\n      if (\n        response.headers.get('content-type')?.startsWith('application/json')\n      ) {\n        try {\n          const body = JSON.parse(text);\n          if (body.error && body.response) {\n            return body;\n          }\n        } catch {\n          // ignore\n        }\n      }\n\n      return {\n        error: {\n          name: 'Error',\n          message: `Request failed with status ${response.status} ${response.statusText}, ${text}`,\n        },\n        response: {\n          statusCode: response.status,\n        },\n      };\n    }\n  } catch {\n    // ignore\n  }\n\n  return {\n    error: {\n      name: 'Error',\n      message: `Request failed with status ${response.status} ${response.statusText}`,\n    },\n    response: {\n      statusCode: response.status,\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '../serialization';\nimport { isError } from './assertion';\n\n/**\n * A base class that custom Error classes can inherit from.\n *\n * @public\n * @example\n *```ts\n * class MyCustomError extends CustomErrorBase {}\n *\n * const e = new MyCustomError('Some message', cause);\n * // e.name === 'MyCustomError'\n * // e.message === 'Some message'\n * // e.cause === cause\n * // e.stack is set if the runtime supports it\n * ```\n */\nexport class CustomErrorBase extends Error {\n  /**\n   * An inner error that caused this error to be thrown, if any.\n   */\n  readonly cause?: Error | undefined;\n\n  constructor(message?: string, cause?: Error | unknown) {\n    let fullMessage = message;\n    if (cause !== undefined) {\n      const causeStr = stringifyError(cause);\n      if (fullMessage) {\n        fullMessage += `; caused by ${causeStr}`;\n      } else {\n        fullMessage = `caused by ${causeStr}`;\n      }\n    }\n\n    super(fullMessage);\n\n    Error.captureStackTrace?.(this, this.constructor);\n\n    this.name = this.constructor.name;\n    this.cause = isError(cause) ? cause : undefined;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isError } from './assertion';\nimport { CustomErrorBase } from './CustomErrorBase';\n\n/*\n * A set of common business logic errors.\n *\n * A backend error handler middleware would understand these and translate them\n * to well formed HTTP responses.\n *\n * While these are intentionally analogous to HTTP errors, they are not\n * intended to be thrown by the request handling layer. In those places, please\n * use e.g. the http-errors library.\n */\n\n/**\n * The given inputs are malformed and cannot be processed.\n *\n * @public\n */\nexport class InputError extends CustomErrorBase {}\n\n/**\n * The request requires authentication, which was not properly supplied.\n *\n * @public\n */\nexport class AuthenticationError extends CustomErrorBase {}\n\n/**\n * The authenticated caller is not allowed to perform this request.\n *\n * @public\n */\nexport class NotAllowedError extends CustomErrorBase {}\n\n/**\n * The requested resource could not be found.\n *\n * Note that this error usually is used to indicate that an entity with a given\n * ID does not exist, rather than signalling that an entire route is missing.\n *\n * @public\n */\nexport class NotFoundError extends CustomErrorBase {}\n\n/**\n * The request could not complete due to a conflict in the current state of the\n * resource.\n *\n * @public\n */\nexport class ConflictError extends CustomErrorBase {}\n\n/**\n * The requested resource has not changed since last request.\n *\n * @public\n */\nexport class NotModifiedError extends CustomErrorBase {}\n\n/**\n * An error that forwards an underlying cause with additional context in the message.\n *\n * The `name` property of the error will be inherited from the `cause` if\n * possible, and will otherwise be set to `'Error'`.\n *\n * @public\n */\nexport class ForwardedError extends CustomErrorBase {\n  constructor(message: string, cause: Error | unknown) {\n    super(message, cause);\n\n    this.name = isError(cause) ? cause.name : 'Error';\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deserializeError } from '../serialization';\nimport {\n  ErrorResponseBody,\n  parseErrorResponseBody,\n} from '../serialization/response';\n\n/**\n * An error thrown as the result of a failed server request.\n *\n * The server is expected to respond on the ErrorResponseBody format.\n *\n * @public\n */\nexport class ResponseError extends Error {\n  /**\n   * The actual response, as seen by the client.\n   *\n   * Note that the body of this response is always consumed. Its parsed form is\n   * in the `body` field.\n   */\n  readonly response: Response;\n\n  /**\n   * The parsed JSON error body, as sent by the server.\n   */\n  readonly body: ErrorResponseBody;\n\n  /**\n   * The Error cause, as seen by the remote server. This is parsed out of the\n   * JSON error body.\n   *\n   * This error always has the plain Error constructor, however all\n   * serializable enumerable fields on the remote error including its name are\n   * preserved. Therefore, if you want to check the error type, use its name\n   * property rather than checking typeof or its constructor or prototype.\n   */\n  readonly cause: Error;\n\n  /**\n   * Constructs a ResponseError based on a failed response.\n   *\n   * Assumes that the response has already been checked to be not ok. This\n   * function consumes the body of the response, and assumes that it hasn't\n   * been consumed before.\n   */\n  static async fromResponse(response: Response): Promise<ResponseError> {\n    const data = await parseErrorResponseBody(response);\n\n    const status = data.response.statusCode || response.status;\n    const statusText = data.error.name || response.statusText;\n    const message = `Request failed with ${status} ${statusText}`;\n    const cause = deserializeError(data.error);\n\n    return new ResponseError({\n      message,\n      response,\n      data,\n      cause,\n    });\n  }\n\n  private constructor(props: {\n    message: string;\n    response: Response;\n    data: ErrorResponseBody;\n    cause: Error;\n  }) {\n    super(props.message);\n    this.name = 'ResponseError';\n    this.response = props.response;\n    this.body = props.data;\n    this.cause = props.cause;\n  }\n}\n"],"names":["serializeErrorInternal","deserializeErrorInternal"],"mappings":"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"}