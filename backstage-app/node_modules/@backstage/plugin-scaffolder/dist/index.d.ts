/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi, FetchApi, ApiHolder, Extension } from '@backstage/core-plugin-api';
import { ScmIntegrationRegistry } from '@backstage/integration';
import { JsonObject, JsonValue, Observable } from '@backstage/types';
import { TaskSpec, TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { JSONSchema7 } from 'json-schema';
import React, { ComponentType } from 'react';
import { FieldValidation, FieldProps } from '@rjsf/core';
import { Entity } from '@backstage/catalog-model';

/**
 * The status of each task in a Scaffolder Job
 *
 * @public
 */
declare type ScaffolderTaskStatus = 'open' | 'processing' | 'failed' | 'completed' | 'skipped';
/**
 * The shape of each task returned from the `scaffolder-backend`
 *
 * @public
 */
declare type ScaffolderTask = {
    id: string;
    spec: TaskSpec;
    status: 'failed' | 'completed' | 'processing' | 'open' | 'cancelled';
    lastHeartbeatAt: string;
    createdAt: string;
};
/**
 * The response shape for the `listActions` call to the `scaffolder-backend`
 *
 * @public
 */
declare type ListActionsResponse = Array<{
    id: string;
    description?: string;
    schema?: {
        input?: JSONSchema7;
        output?: JSONSchema7;
    };
}>;
/** @public */
declare type ScaffolderOutputLink = {
    title?: string;
    icon?: string;
    url?: string;
    entityRef?: string;
};
/** @public */
declare type ScaffolderTaskOutput = {
    links?: ScaffolderOutputLink[];
} & {
    [key: string]: unknown;
};
/**
 * The shape of each entry of parameters which gets rendered
 * as a separate step in the wizard input
 *
 * @public
 */
declare type TemplateParameterSchema = {
    title: string;
    steps: Array<{
        title: string;
        schema: JsonObject;
    }>;
};
/**
 * The shape of a `LogEvent` message from the `scaffolder-backend`
 *
 * @public
 */
declare type LogEvent = {
    type: 'log' | 'completion';
    body: {
        message: string;
        stepId?: string;
        status?: ScaffolderTaskStatus;
    };
    createdAt: string;
    id: string;
    taskId: string;
};
/**
 * The input options to the `scaffold` method of the `ScaffolderClient`.
 *
 * @public
 */
interface ScaffolderScaffoldOptions {
    templateRef: string;
    values: Record<string, JsonValue>;
    secrets?: Record<string, string>;
}
/**
 * The response shape of the `scaffold` method of the `ScaffolderClient`.
 *
 * @public
 */
interface ScaffolderScaffoldResponse {
    taskId: string;
}
/**
 * The arguments for `getIntegrationsList`.
 *
 * @public
 */
interface ScaffolderGetIntegrationsListOptions {
    allowedHosts: string[];
}
/**
 * The response shape for `getIntegrationsList`.
 *
 * @public
 */
interface ScaffolderGetIntegrationsListResponse {
    integrations: {
        type: string;
        title: string;
        host: string;
    }[];
}
/**
 * The input options to the `streamLogs` method of the `ScaffolderClient`.
 *
 * @public
 */
interface ScaffolderStreamLogsOptions {
    taskId: string;
    after?: number;
}
/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 */
interface ScaffolderApi {
    getTemplateParameterSchema(templateRef: string): Promise<TemplateParameterSchema>;
    /**
     * Executes the scaffolding of a component, given a template and its
     * parameter values.
     *
     * @param options - The {@link ScaffolderScaffoldOptions} the scaffolding.
     */
    scaffold(options: ScaffolderScaffoldOptions): Promise<ScaffolderScaffoldResponse>;
    getTask(taskId: string): Promise<ScaffolderTask>;
    getIntegrationsList(options: ScaffolderGetIntegrationsListOptions): Promise<ScaffolderGetIntegrationsListResponse>;
    /**
     * Returns a list of all installed actions.
     */
    listActions(): Promise<ListActionsResponse>;
    streamLogs(options: ScaffolderStreamLogsOptions): Observable<LogEvent>;
}

/**
 * Utility API reference for the {@link ScaffolderApi}.
 *
 * @public
 */
declare const scaffolderApiRef: _backstage_core_plugin_api.ApiRef<ScaffolderApi>;
/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 */
declare class ScaffolderClient implements ScaffolderApi {
    private readonly discoveryApi;
    private readonly scmIntegrationsApi;
    private readonly fetchApi;
    private readonly useLongPollingLogs;
    constructor(options: {
        discoveryApi: DiscoveryApi;
        fetchApi: FetchApi;
        scmIntegrationsApi: ScmIntegrationRegistry;
        useLongPollingLogs?: boolean;
    });
    getIntegrationsList(options: ScaffolderGetIntegrationsListOptions): Promise<ScaffolderGetIntegrationsListResponse>;
    getTemplateParameterSchema(templateRef: string): Promise<TemplateParameterSchema>;
    /**
     * Executes the scaffolding of a component, given a template and its
     * parameter values.
     *
     * @param options - The {@link ScaffolderScaffoldOptions} the scaffolding.
     */
    scaffold(options: ScaffolderScaffoldOptions): Promise<ScaffolderScaffoldResponse>;
    getTask(taskId: string): Promise<ScaffolderTask>;
    streamLogs(options: ScaffolderStreamLogsOptions): Observable<LogEvent>;
    private streamLogsEventStream;
    private streamLogsPolling;
    listActions(): Promise<ListActionsResponse>;
}

/**
 * Field validation type for Custom Field Extensions.
 *
 * @public
 */
declare type CustomFieldValidator<TFieldReturnValue> = (data: TFieldReturnValue, field: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;
/**
 * Type for the Custom Field Extension with the
 * name and components and validation function.
 *
 * @public
 */
declare type FieldExtensionOptions<TFieldReturnValue = unknown, TInputProps = unknown> = {
    name: string;
    component: (props: FieldExtensionComponentProps<TFieldReturnValue, TInputProps>) => JSX.Element | null;
    validation?: CustomFieldValidator<TFieldReturnValue>;
};
/**
 * Type for field extensions and being able to type
 * incoming props easier.
 *
 * @public
 */
interface FieldExtensionComponentProps<TFieldReturnValue, TUiOptions extends {} = {}> extends FieldProps<TFieldReturnValue> {
    uiSchema: FieldProps['uiSchema'] & {
        'ui:options'?: TUiOptions;
    };
}

/**
 * The input props that can be specified under `ui:options` for the
 * `RepoUrlPicker` field extension.
 *
 * @public
 */
interface RepoUrlPickerUiOptions {
    allowedHosts?: string[];
    allowedOwners?: string[];
    requestUserCredentials?: {
        secretsKey: string;
        additionalScopes?: {
            github?: string[];
            gitlab?: string[];
            bitbucket?: string[];
            azure?: string[];
        };
    };
}

/**
 * The input props that can be specified under `ui:options` for the
 * `EntityTagsPicker` field extension.
 *
 * @public
 */
interface EntityTagsPickerUiOptions {
    kinds?: string[];
}

/**
 * The input props that can be specified under `ui:options` for the
 * `EntityPicker` field extension.
 *
 * @public
 */
interface EntityPickerUiOptions {
    allowedKinds?: string[];
    defaultKind?: string;
    allowArbitraryValues?: boolean;
}

/**
 * A type used to wrap up the FieldExtension to embed the ReturnValue and the InputProps
 *
 * @public
 */
declare type FieldExtensionComponent<_TReturnValue, _TInputProps> = () => null;
/**
 * Method for creating field extensions that can be used in the scaffolder
 * frontend form.
 * @public
 */
declare function createScaffolderFieldExtension<TReturnValue = unknown, TInputProps = unknown>(options: FieldExtensionOptions<TReturnValue, TInputProps>): Extension<FieldExtensionComponent<TReturnValue, TInputProps>>;
/**
 * The Wrapping component for defining fields extensions inside
 *
 * @public
 */
declare const ScaffolderFieldExtensions: React.ComponentType;

/**
 * The input props that can be specified under `ui:options` for the
 * `OwnedEntityPicker` field extension.
 *
 * @public
 */
interface OwnedEntityPickerUiOptions {
    allowedKinds?: string[];
    defaultKind?: string;
}

/**
 * The props for the entrypoint `ScaffolderPage` component the plugin.
 * @public
 */
declare type RouterProps = {
    components?: {
        TemplateCardComponent?: ComponentType<{
            template: TemplateEntityV1beta3;
        }> | undefined;
        TaskPageComponent?: ComponentType<{}>;
    };
    groups?: Array<{
        title?: React.ReactNode;
        filter: (entity: Entity) => boolean;
    }>;
    defaultPreviewTemplate?: string;
};

/**
 * The input props that can be specified under `ui:options` for the
 * `OwnerPicker` field extension.
 *
 * @public
 */
interface OwnerPickerUiOptions {
    allowedKinds?: string[];
}

/**
 * The validation function for the `repoUrl` that is returned from the
 * field extension. Ensures that you have all the required fields filled for
 * the different providers that exist.
 *
 * @public
 */
declare const repoPickerValidation: (value: string, validation: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;

/**
 * The main plugin export for the scaffolder.
 * @public
 */
declare const scaffolderPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {
    registerComponent: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
}>;
/**
 * A field extension for selecting an Entity that exists in the Catalog.
 *
 * @public
 */
declare const EntityPickerFieldExtension: FieldExtensionComponent<string, EntityPickerUiOptions>;
/**
 * The field extension for selecting a name for a new Entity in the Catalog.
 *
 * @public
 */
declare const EntityNamePickerFieldExtension: FieldExtensionComponent<string, {}>;
/**
 * The field extension which provides the ability to select a RepositoryUrl.
 * Currently this is an encoded URL that looks something like the following `github.com?repo=myRepoName&owner=backstage`.
 *
 * @public
 */
declare const RepoUrlPickerFieldExtension: FieldExtensionComponent<string, RepoUrlPickerUiOptions>;
/**
 * A field extension for picking users and groups out of the Catalog.
 *
 * @public
 */
declare const OwnerPickerFieldExtension: FieldExtensionComponent<string, OwnerPickerUiOptions>;
/**
 * The Router and main entrypoint to the Scaffolder plugin.
 *
 * @public
 */
declare const ScaffolderPage: (props: RouterProps) => JSX.Element;
/**
 * A field extension to show all the Entities that are owned by the current logged-in User for use in templates.
 *
 * @public
 */
declare const OwnedEntityPickerFieldExtension: FieldExtensionComponent<string, OwnedEntityPickerUiOptions>;
/**
 * EntityTagsPickerFieldExtension
 * @public
 */
declare const EntityTagsPickerFieldExtension: FieldExtensionComponent<string[], EntityTagsPickerUiOptions>;

/**
 * The component to select the `type` of `Template` that you will see in the table.
 *
 * @public
 */
declare const TemplateTypePicker: () => JSX.Element | null;

/**
 * The return type from the useTemplateSecrets hook.
 * @public
 */
interface ScaffolderUseTemplateSecrets {
    setSecrets: (input: Record<string, string>) => void;
}
/**
 * Hook to access the secrets context.
 * @public
 */
declare const useTemplateSecrets: () => ScaffolderUseTemplateSecrets;

/**
 * TaskPageProps for constructing a TaskPage
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
declare type TaskPageProps = {
    loadingText?: string;
};
/**
 * TaskPage for showing the status of the taskId provided as a param
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
declare const TaskPage: ({ loadingText }: TaskPageProps) => JSX.Element;

export { CustomFieldValidator, EntityNamePickerFieldExtension, EntityPickerFieldExtension, EntityPickerUiOptions, EntityTagsPickerFieldExtension, EntityTagsPickerUiOptions, FieldExtensionComponent, FieldExtensionComponentProps, FieldExtensionOptions, ListActionsResponse, LogEvent, OwnedEntityPickerFieldExtension, OwnedEntityPickerUiOptions, OwnerPickerFieldExtension, OwnerPickerUiOptions, RepoUrlPickerFieldExtension, RepoUrlPickerUiOptions, RouterProps, ScaffolderApi, ScaffolderClient, ScaffolderFieldExtensions, ScaffolderGetIntegrationsListOptions, ScaffolderGetIntegrationsListResponse, ScaffolderOutputLink, ScaffolderPage, ScaffolderScaffoldOptions, ScaffolderScaffoldResponse, ScaffolderStreamLogsOptions, ScaffolderTask, ScaffolderTaskOutput, ScaffolderTaskStatus, ScaffolderUseTemplateSecrets, TaskPage, TaskPageProps, TemplateParameterSchema, TemplateTypePicker, createScaffolderFieldExtension, repoPickerValidation, scaffolderApiRef, scaffolderPlugin, useTemplateSecrets };
