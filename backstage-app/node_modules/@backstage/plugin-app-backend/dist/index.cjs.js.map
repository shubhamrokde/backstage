{"version":3,"file":"index.cjs.js","sources":["../src/lib/config.ts","../src/lib/assets/StaticAssetsStore.ts","../src/lib/assets/findStaticAssets.ts","../src/lib/headers.ts","../src/lib/assets/createStaticAssetMiddleware.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath } from 'path';\nimport { Logger } from 'winston';\nimport { AppConfig, Config } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { loadConfigSchema, readEnvConfig } from '@backstage/config-loader';\n\ntype InjectOptions = {\n  appConfigs: AppConfig[];\n  // Directory of the static JS files to search for file to inject\n  staticDir: string;\n  logger: Logger;\n};\n\n/**\n * Injects configs into the app bundle, replacing any existing injected config.\n */\nexport async function injectConfig(options: InjectOptions) {\n  const { staticDir, logger, appConfigs } = options;\n\n  const files = await fs.readdir(staticDir);\n  const jsFiles = files.filter(file => file.endsWith('.js'));\n\n  const escapedData = JSON.stringify(appConfigs).replace(/(\"|'|\\\\)/g, '\\\\$1');\n  const injected = `/*__APP_INJECTED_CONFIG_MARKER__*/\"${escapedData}\"/*__INJECTED_END__*/`;\n\n  for (const jsFile of jsFiles) {\n    const path = resolvePath(staticDir, jsFile);\n\n    const content = await fs.readFile(path, 'utf8');\n    if (content.includes('__APP_INJECTED_RUNTIME_CONFIG__')) {\n      logger.info(`Injecting env config into ${jsFile}`);\n\n      const newContent = content.replace(\n        '\"__APP_INJECTED_RUNTIME_CONFIG__\"',\n        injected,\n      );\n      await fs.writeFile(path, newContent, 'utf8');\n      return;\n    } else if (content.includes('__APP_INJECTED_CONFIG_MARKER__')) {\n      logger.info(`Replacing injected env config in ${jsFile}`);\n\n      const newContent = content.replace(\n        /\\/\\*__APP_INJECTED_CONFIG_MARKER__\\*\\/.*\\/\\*__INJECTED_END__\\*\\//,\n        injected,\n      );\n      await fs.writeFile(path, newContent, 'utf8');\n      return;\n    }\n  }\n  logger.info('Env config not injected');\n}\n\ntype ReadOptions = {\n  env: { [name: string]: string | undefined };\n  appDistDir: string;\n  config: Config;\n};\n\n/**\n * Read config from environment and process the backend config using the\n * schema that is embedded in the frontend build.\n */\nexport async function readConfigs(options: ReadOptions): Promise<AppConfig[]> {\n  const { env, appDistDir, config } = options;\n\n  const appConfigs = readEnvConfig(env);\n\n  const schemaPath = resolvePath(appDistDir, '.config-schema.json');\n  if (await fs.pathExists(schemaPath)) {\n    const serializedSchema = await fs.readJson(schemaPath);\n\n    try {\n      const schema = await loadConfigSchema({ serialized: serializedSchema });\n\n      const frontendConfigs = await schema.process(\n        [{ data: config.get() as JsonObject, context: 'app' }],\n        { visibility: ['frontend'], withDeprecatedKeys: true },\n      );\n      appConfigs.push(...frontendConfigs);\n    } catch (error) {\n      throw new Error(\n        'Invalid app bundle schema. If this error is unexpected you need to run `yarn build` in the app. ' +\n          `If that doesn't help you should make sure your config schema is correct and rebuild the app bundle again. ` +\n          `Caused by the following schema error, ${error}`,\n      );\n    }\n  }\n\n  return appConfigs;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\nimport { Logger } from 'winston';\nimport { DateTime } from 'luxon';\nimport partition from 'lodash/partition';\nimport { StaticAsset, StaticAssetInput, StaticAssetProvider } from './types';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-app-backend',\n  'migrations',\n);\n\ninterface StaticAssetRow {\n  path: string;\n  content: Buffer;\n  last_modified_at: Date;\n}\n\n/** @internal */\nexport interface StaticAssetsStoreOptions {\n  database: Knex;\n  logger: Logger;\n}\n\n/**\n * A storage for static assets that are assumed to be immutable.\n *\n * @internal\n */\nexport class StaticAssetsStore implements StaticAssetProvider {\n  #db: Knex;\n  #logger: Logger;\n\n  static async create(options: StaticAssetsStoreOptions) {\n    await options.database.migrate.latest({\n      directory: migrationsDir,\n    });\n    return new StaticAssetsStore(options);\n  }\n\n  private constructor(options: StaticAssetsStoreOptions) {\n    this.#db = options.database;\n    this.#logger = options.logger;\n  }\n\n  /**\n   * Store the provided assets.\n   *\n   * If an asset for a given path already exists the modification time will be\n   * updated, but the contents will not.\n   */\n  async storeAssets(assets: StaticAssetInput[]) {\n    const existingRows = await this.#db<StaticAssetRow>(\n      'static_assets_cache',\n    ).whereIn(\n      'path',\n      assets.map(a => a.path),\n    );\n    const existingAssetPaths = new Set(existingRows.map(r => r.path));\n\n    const [modified, added] = partition(assets, asset =>\n      existingAssetPaths.has(asset.path),\n    );\n\n    this.#logger.info(\n      `Storing ${modified.length} updated assets and ${added.length} new assets`,\n    );\n\n    await this.#db('static_assets_cache')\n      .update({\n        last_modified_at: this.#db.fn.now(),\n      })\n      .whereIn(\n        'path',\n        modified.map(a => a.path),\n      );\n\n    for (const asset of added) {\n      // We ignore conflicts with other nodes, it doesn't matter if someone else\n      // added the same asset just before us.\n      await this.#db('static_assets_cache')\n        .insert({\n          path: asset.path,\n          content: await asset.content(),\n        })\n        .onConflict('path')\n        .ignore();\n    }\n  }\n\n  /**\n   * Retrieve an asset from the store with the given path.\n   */\n  async getAsset(path: string): Promise<StaticAsset | undefined> {\n    const [row] = await this.#db<StaticAssetRow>('static_assets_cache').where({\n      path,\n    });\n    if (!row) {\n      return undefined;\n    }\n    return {\n      path: row.path,\n      content: row.content,\n      lastModifiedAt:\n        typeof row.last_modified_at === 'string'\n          ? DateTime.fromSQL(row.last_modified_at, { zone: 'UTC' }).toJSDate()\n          : row.last_modified_at,\n    };\n  }\n\n  /**\n   * Delete any assets from the store whose modification time is older than the max age.\n   */\n  async trimAssets(options: { maxAgeSeconds: number }) {\n    const { maxAgeSeconds } = options;\n    await this.#db<StaticAssetRow>('static_assets_cache')\n      .where(\n        'last_modified_at',\n        '<=',\n        this.#db.client.config.client.includes('sqlite3')\n          ? this.#db.raw(`datetime('now', ?)`, [`-${maxAgeSeconds} seconds`])\n          : this.#db.raw(`now() + interval '${-maxAgeSeconds} seconds'`),\n      )\n      .delete();\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport { StaticAssetInput } from './types';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\n\n/**\n * Finds all static assets within a directory\n *\n * @internal\n */\nexport async function findStaticAssets(\n  staticDir: string,\n): Promise<StaticAssetInput[]> {\n  const assetPaths = await globby('**/*', {\n    ignore: ['**/*.map'], // Ignore source maps since they're quite large\n    cwd: staticDir,\n    dot: true,\n  });\n\n  return assetPaths.map(path => ({\n    path,\n    content: async () => fs.readFile(resolveSafeChildPath(staticDir, path)),\n  }));\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const CACHE_CONTROL_NO_CACHE = 'no-store, max-age=0';\nexport const CACHE_CONTROL_MAX_CACHE = 'public, max-age=1209600'; // 14 days\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extname } from 'path';\nimport { RequestHandler } from 'express';\nimport { StaticAssetProvider } from './types';\nimport { CACHE_CONTROL_MAX_CACHE } from '../headers';\n\n/**\n * Creates a middleware that serves static assets from a static asset provider\n *\n * @internal\n */\nexport function createStaticAssetMiddleware(\n  store: StaticAssetProvider,\n): RequestHandler {\n  return (req, res, next) => {\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      next();\n      return;\n    }\n\n    // Let's not assume we're in promise-router\n    Promise.resolve(\n      (async () => {\n        // Drop leading slashes from the incoming path\n        const path = req.path.startsWith('/') ? req.path.slice(1) : req.path;\n\n        const asset = await store.getAsset(path);\n        if (!asset) {\n          next();\n          return;\n        }\n\n        // Set the Content-Type header, falling back to octet-stream\n        const ext = extname(asset.path);\n        if (ext) {\n          res.type(ext);\n        } else {\n          res.type('bin');\n        }\n\n        // Same as our express.static override\n        res.setHeader('Cache-Control', CACHE_CONTROL_MAX_CACHE);\n        res.setHeader('Last-Modified', asset.lastModifiedAt.toUTCString());\n\n        res.send(asset.content);\n      })(),\n    ).catch(next);\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  notFoundHandler,\n  PluginDatabaseManager,\n  resolvePackagePath,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport helmet from 'helmet';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport fs from 'fs-extra';\nimport { resolve as resolvePath } from 'path';\nimport { Logger } from 'winston';\nimport { injectConfig, readConfigs } from '../lib/config';\nimport {\n  StaticAssetsStore,\n  findStaticAssets,\n  createStaticAssetMiddleware,\n} from '../lib/assets';\nimport {\n  CACHE_CONTROL_MAX_CACHE,\n  CACHE_CONTROL_NO_CACHE,\n} from '../lib/headers';\n\n// express uses mime v1 while we only have types for mime v2\ntype Mime = { lookup(arg0: string): string };\n\nexport interface RouterOptions {\n  config: Config;\n  logger: Logger;\n\n  /**\n   * If a database is provided it will be used to cache previously deployed static assets.\n   *\n   * This is a built-in alternative to using a `staticFallbackHandler`.\n   */\n  database?: PluginDatabaseManager;\n\n  /**\n   * The name of the app package that content should be served from. The same app package should be\n   * added as a dependency to the backend package in order for it to be accessible at runtime.\n   *\n   * In a typical setup with a single app package this would be set to 'app'.\n   */\n  appPackageName: string;\n\n  /**\n   * A request handler to handle requests for static content that are not present in the app bundle.\n   *\n   * This can be used to avoid issues with clients on older deployment versions trying to access lazy\n   * loaded content that is no longer present. Typically the requests would fall back to a long-term\n   * object store where all recently deployed versions of the app are present.\n   *\n   * Another option is to provide a `database` that will take care of storing the static assets instead.\n   *\n   * If both `database` and `staticFallbackHandler` are provided, the `database` will attempt to serve\n   * static assets first, and if they are not found, the `staticFallbackHandler` will be called.\n   */\n  staticFallbackHandler?: express.Handler;\n\n  /**\n   * Disables the configuration injection. This can be useful if you're running in an environment\n   * with a read-only filesystem, or for some other reason don't want configuration to be injected.\n   *\n   * Note that this will cause the configuration used when building the app bundle to be used, unless\n   * a separate configuration loading strategy is set up.\n   *\n   * This also disables configuration injection though `APP_CONFIG_` environment variables.\n   */\n  disableConfigInjection?: boolean;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { config, logger, appPackageName, staticFallbackHandler } = options;\n\n  const appDistDir = resolvePackagePath(appPackageName, 'dist');\n  const staticDir = resolvePath(appDistDir, 'static');\n\n  if (!(await fs.pathExists(staticDir))) {\n    logger.warn(\n      `Can't serve static app content from ${staticDir}, directory doesn't exist`,\n    );\n\n    return Router();\n  }\n\n  logger.info(`Serving static app content from ${appDistDir}`);\n\n  if (!options.disableConfigInjection) {\n    const appConfigs = await readConfigs({\n      config,\n      appDistDir,\n      env: process.env,\n    });\n\n    await injectConfig({ appConfigs, logger, staticDir });\n  }\n\n  const router = Router();\n\n  router.use(helmet.frameguard({ action: 'deny' }));\n\n  // Use a separate router for static content so that a fallback can be provided by backend\n  const staticRouter = Router();\n  staticRouter.use(\n    express.static(resolvePath(appDistDir, 'static'), {\n      setHeaders: res => {\n        res.setHeader('Cache-Control', CACHE_CONTROL_MAX_CACHE);\n      },\n    }),\n  );\n\n  if (options.database) {\n    const store = await StaticAssetsStore.create({\n      logger,\n      database: await options.database.getClient(),\n    });\n\n    const assets = await findStaticAssets(staticDir);\n    await store.storeAssets(assets);\n    // Remove any assets that are older than 7 days\n    await store.trimAssets({ maxAgeSeconds: 60 * 60 * 24 * 7 });\n\n    staticRouter.use(createStaticAssetMiddleware(store));\n  }\n\n  if (staticFallbackHandler) {\n    staticRouter.use(staticFallbackHandler);\n  }\n  staticRouter.use(notFoundHandler());\n\n  router.use('/static', staticRouter);\n  router.use(\n    express.static(appDistDir, {\n      setHeaders: (res, path) => {\n        // The Cache-Control header instructs the browser to not cache html files since it might\n        // link to static assets from recently deployed versions.\n        if (\n          (express.static.mime as unknown as Mime).lookup(path) === 'text/html'\n        ) {\n          res.setHeader('Cache-Control', CACHE_CONTROL_NO_CACHE);\n        }\n      },\n    }),\n  );\n  router.get('/*', (_req, res) => {\n    res.sendFile(resolvePath(appDistDir, 'index.html'), {\n      headers: {\n        // The Cache-Control header instructs the browser to not cache the index.html since it might\n        // link to static assets from recently deployed versions.\n        'cache-control': CACHE_CONTROL_NO_CACHE,\n      },\n    });\n  });\n\n  return router;\n}\n"],"names":["fs","path","resolvePath","readEnvConfig","loadConfigSchema","resolvePackagePath","partition","DateTime","globby","resolveSafeChildPath","extname","Router","helmet","express","notFoundHandler"],"mappings":"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"}