/// <reference types="node" />
import { Permission } from '@backstage/plugin-permission-common';
import { JsonObject } from '@backstage/types';
import { Readable, Transform, Writable } from 'stream';

/**
 * @beta
 */
interface SearchQuery {
    term: string;
    filters?: JsonObject;
    types?: string[];
    pageCursor?: string;
}
/**
 * @beta
 */
interface SearchResult {
    type: string;
    document: IndexableDocument;
}
/**
 * @beta
 */
interface SearchResultSet {
    results: SearchResult[];
    nextPageCursor?: string;
    previousPageCursor?: string;
}
/**
 * Base properties that all indexed documents must include, as well as some
 * common properties that documents are encouraged to use where appropriate.
 * @beta
 */
interface IndexableDocument {
    /**
     * The primary name of the document (e.g. name, title, identifier, etc).
     */
    title: string;
    /**
     * Free-form text of the document (e.g. description, content, etc).
     */
    text: string;
    /**
     * The relative or absolute URL of the document (target when a search result
     * is clicked).
     */
    location: string;
    /**
     * Optional authorization information to be used when determining whether this
     * search result should be visible to a given user.
     */
    authorization?: {
        /**
         * Identifier for the resource.
         */
        resourceRef: string;
    };
}
/**
 * Information about a specific document type. Intended to be used in the
 * {@link @backstage/search-backend-node#IndexBuilder} to collect information
 * about the types stored in the index.
 * @beta
 */
declare type DocumentTypeInfo = {
    /**
     * The {@link @backstage/plugin-permission-common#Permission} that controls
     * visibility of resources associated with this collator's documents.
     */
    visibilityPermission?: Permission;
};
/**
 * Factory class for instantiating collators.
 * @beta
 */
interface DocumentCollatorFactory {
    /**
     * The type or name of the document set returned by this collator. Used as an
     * index name by Search Engines.
     */
    readonly type: string;
    /**
     * The {@link @backstage/plugin-permission-common#Permission} that controls
     * visibility of resources associated with this collator's documents.
     */
    readonly visibilityPermission?: Permission;
    /**
     * Instantiates and resolves a document collator.
     */
    getCollator(): Promise<Readable>;
}
/**
 * Factory class for instantiating decorators.
 * @beta
 */
interface DocumentDecoratorFactory {
    /**
     * An optional array of document/index types on which this decorator should
     * be applied. If no types are provided, this decorator will be applied to
     * all document/index types.
     */
    readonly types?: string[];
    /**
     * Instantiates and resolves a document decorator.
     */
    getDecorator(): Promise<Transform>;
}
/**
 * A type of function responsible for translating an abstract search query into
 * a concrete query relevant to a particular search engine.
 * @beta
 */
declare type QueryTranslator = (query: SearchQuery) => unknown;
/**
 * Options when querying a search engine.
 * @beta
 */
declare type QueryRequestOptions = {
    token?: string;
};
/**
 * Interface that must be implemented by specific search engines, responsible
 * for performing indexing and querying and translating abstract queries into
 * concrete, search engine-specific queries.
 * @beta
 */
interface SearchEngine {
    /**
     * Override the default translator provided by the SearchEngine.
     */
    setTranslator(translator: QueryTranslator): void;
    /**
     * Factory method for getting a search engine indexer for a given document
     * type.
     *
     * @param type - The type or name of the document set for which an indexer
     *   should be retrieved. This corresponds to the `type` property on the
     *   document collator/decorator factories and will most often be used to
     *   identify an index or group to which documents should be written.
     */
    getIndexer(type: string): Promise<Writable>;
    /**
     * Perform a search query against the SearchEngine.
     */
    query(query: SearchQuery, options?: QueryRequestOptions): Promise<SearchResultSet>;
}

export { DocumentCollatorFactory, DocumentDecoratorFactory, DocumentTypeInfo, IndexableDocument, QueryRequestOptions, QueryTranslator, SearchEngine, SearchQuery, SearchResult, SearchResultSet };
