{"version":3,"file":"index.cjs.js","sources":["../src/api/processingResult.ts","../src/modules/codeowners/lib/resolve.ts","../src/modules/codeowners/lib/scm.ts","../src/modules/codeowners/lib/read.ts","../src/modules/codeowners/CodeOwnersProcessor.ts","../src/modules/core/AnnotateLocationEntityProcessor.ts","../src/modules/core/AnnotateScmSlugEntityProcessor.ts","../src/modules/core/BuiltinKindsEntityProcessor.ts","../src/modules/core/FileReaderProcessor.ts","../src/modules/core/LocationEntityProcessor.ts","../src/modules/core/PlaceholderProcessor.ts","../src/modules/core/UrlReaderProcessor.ts","../src/modules/util/parse.ts","../src/search/DefaultCatalogCollatorFactory.ts","../src/search/DefaultCatalogCollator.ts","../src/processing/refresh.ts","../src/processing/util.ts","../src/util/conversion.ts","../src/modules/core/ConfigLocationEntityProvider.ts","../src/modules/core/DefaultLocationStore.ts","../src/ingestion/LocationAnalyzer.ts","../src/database/conversion.ts","../src/util/metrics.ts","../src/database/metrics.ts","../src/database/util.ts","../src/database/DefaultProcessingDatabase.ts","../src/database/migrations.ts","../src/processing/TaskPipeline.ts","../src/processing/DefaultCatalogProcessingEngine.ts","../src/service/DefaultLocationService.ts","../src/service/DefaultEntitiesCatalog.ts","../src/processing/ProcessorOutputCollector.ts","../src/processing/ProcessorCacheManager.ts","../src/processing/DefaultCatalogProcessingOrchestrator.ts","../src/stitching/buildEntitySearch.ts","../src/stitching/util.ts","../src/stitching/Stitcher.ts","../src/service/request/basicEntityFilter.ts","../src/service/request/common.ts","../src/service/request/parseEntityFilterParams.ts","../src/service/request/parseEntityPaginationParams.ts","../src/service/request/parseEntityTransformParams.ts","../src/service/util.ts","../src/service/request/parseEntityFacetParams.ts","../src/service/createRouter.ts","../src/service/DefaultRefreshService.ts","../src/service/AuthorizedRefreshService.ts","../src/ingestion/CatalogRules.ts","../src/processing/connectEntityProviders.ts","../src/permissions/rules/util.ts","../src/permissions/rules/hasAnnotation.ts","../src/permissions/rules/isEntityKind.ts","../src/permissions/rules/isEntityOwner.ts","../src/permissions/rules/hasLabel.ts","../src/permissions/rules/createPropertyRule.ts","../src/permissions/rules/hasMetadata.ts","../src/permissions/rules/hasSpec.ts","../src/permissions/rules/index.ts","../src/service/AuthorizedEntitiesCatalog.ts","../src/service/AuthorizedLocationService.ts","../src/service/CatalogBuilder.ts","../src/permissions/conditionExports.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Entity } from '@backstage/catalog-model';\nimport { CatalogProcessorResult } from './processor';\nimport { EntityRelationSpec, LocationSpec } from './common';\n\n/**\n * Factory functions for the standard processing result types.\n *\n * @public\n */\nexport const processingResult = Object.freeze({\n  notFoundError(\n    atLocation: LocationSpec,\n    message: string,\n  ): CatalogProcessorResult {\n    return {\n      type: 'error',\n      location: atLocation,\n      error: new NotFoundError(message),\n    };\n  },\n\n  inputError(\n    atLocation: LocationSpec,\n    message: string,\n  ): CatalogProcessorResult {\n    return {\n      type: 'error',\n      location: atLocation,\n      error: new InputError(message),\n    };\n  },\n\n  generalError(\n    atLocation: LocationSpec,\n    message: string,\n  ): CatalogProcessorResult {\n    return { type: 'error', location: atLocation, error: new Error(message) };\n  },\n\n  location(newLocation: LocationSpec): CatalogProcessorResult {\n    return { type: 'location', location: newLocation };\n  },\n\n  entity(atLocation: LocationSpec, newEntity: Entity): CatalogProcessorResult {\n    return { type: 'entity', location: atLocation, entity: newEntity };\n  },\n\n  relation(spec: EntityRelationSpec): CatalogProcessorResult {\n    return { type: 'relation', relation: spec };\n  },\n} as const);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as codeowners from 'codeowners-utils';\nimport { CodeOwnersEntry } from 'codeowners-utils';\nimport { filter, get, head, pipe, reverse } from 'lodash/fp';\n\nconst USER_PATTERN = /^@.*/;\nconst GROUP_PATTERN = /^@.*\\/.*/;\nconst EMAIL_PATTERN = /^.*@.*\\..*$/;\n\nexport function resolveCodeOwner(\n  contents: string,\n  pattern = '*',\n): string | undefined {\n  const owners = codeowners.parse(contents);\n\n  return pipe(\n    filter((e: CodeOwnersEntry) => e.pattern === pattern),\n    reverse,\n    head,\n    get('owners'),\n    head,\n    normalizeCodeOwner,\n  )(owners);\n}\n\nexport function normalizeCodeOwner(owner: string) {\n  if (owner.match(GROUP_PATTERN)) {\n    return owner.split('/')[1];\n  } else if (owner.match(USER_PATTERN)) {\n    return `User:${owner.substring(1)}`;\n  } else if (owner.match(EMAIL_PATTERN)) {\n    return owner.split('@')[0];\n  }\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst CODEOWNERS = 'CODEOWNERS';\n\nexport const scmCodeOwnersPaths: Record<string, string[]> = {\n  // https://mibexsoftware.atlassian.net/wiki/spaces/CODEOWNERS/pages/222822413/Usage\n  bitbucket: [CODEOWNERS, `.bitbucket/${CODEOWNERS}`],\n\n  // https://docs.gitlab.com/ee/user/project/code_owners.html#how-to-set-up-code-owners\n  gitlab: [CODEOWNERS, `.gitlab/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n\n  // https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners#codeowners-file-location\n  github: [CODEOWNERS, `.github/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { NotFoundError } from '@backstage/errors';\nimport { ScmIntegration } from '@backstage/integration';\nimport 'core-js/features/promise'; // NOTE: This can be removed when ES2021 is implemented\nimport { resolveCodeOwner } from './resolve';\nimport { scmCodeOwnersPaths } from './scm';\n\nexport async function readCodeOwners(\n  reader: UrlReader,\n  sourceUrl: string,\n  codeownersPaths: string[],\n): Promise<string | undefined> {\n  const readOwnerLocation = async (path: string): Promise<string> => {\n    const url = `${sourceUrl}${path}`;\n\n    if (reader.readUrl) {\n      const data = await reader.readUrl(url);\n      const buffer = await data.buffer();\n      return buffer.toString();\n    }\n    const data = await reader.read(url);\n    return data.toString();\n  };\n\n  const candidates = codeownersPaths.map(readOwnerLocation);\n\n  return Promise.any(candidates).catch((aggregateError: AggregateError) => {\n    const hardError = aggregateError.errors.find(\n      error => !(error instanceof NotFoundError),\n    );\n\n    if (hardError) {\n      throw hardError;\n    }\n\n    return undefined;\n  });\n}\n\nexport async function findCodeOwnerByTarget(\n  reader: UrlReader,\n  targetUrl: string,\n  scmIntegration: ScmIntegration,\n): Promise<string | undefined> {\n  const codeownersPaths = scmCodeOwnersPaths[scmIntegration?.type ?? ''];\n\n  const sourceUrl = scmIntegration?.resolveUrl({\n    url: '/',\n    base: targetUrl,\n  });\n\n  if (!sourceUrl || !codeownersPaths) {\n    return undefined;\n  }\n\n  const contents = await readCodeOwners(reader, sourceUrl, codeownersPaths);\n\n  if (!contents) {\n    return undefined;\n  }\n\n  const owner = resolveCodeOwner(contents);\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Logger } from 'winston';\nimport { CatalogProcessor, LocationSpec } from '../../api';\nimport { findCodeOwnerByTarget } from './lib';\n\nconst ALLOWED_KINDS = ['API', 'Component', 'Domain', 'Resource', 'System'];\nconst ALLOWED_LOCATION_TYPES = ['url'];\n\n/** @public */\nexport class CodeOwnersProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly reader: UrlReader;\n\n  static fromConfig(\n    config: Config,\n    options: { logger: Logger; reader: UrlReader },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new CodeOwnersProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: Logger;\n    reader: UrlReader;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.reader = options.reader;\n  }\n\n  getProcessorName(): string {\n    return 'CodeOwnersProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    // Only continue if the owner is not set\n    if (\n      !entity ||\n      !ALLOWED_KINDS.includes(entity.kind) ||\n      !ALLOWED_LOCATION_TYPES.includes(location.type) ||\n      (entity.spec && entity.spec.owner)\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.integrations.byUrl(location.target);\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    const owner = await findCodeOwnerByTarget(\n      this.reader,\n      location.target,\n      scmIntegration,\n    );\n\n    if (!owner) {\n      this.logger.debug(\n        `CodeOwnerProcessor could not resolve owner for ${location.target}`,\n      );\n      return entity;\n    }\n\n    return {\n      ...entity,\n      spec: { ...entity.spec, owner },\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_EDIT_URL,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  ANNOTATION_SOURCE_LOCATION,\n  ANNOTATION_VIEW_URL,\n  Entity,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { identity, merge, pickBy } from 'lodash';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n} from '../../api';\n\n/** @public */\nexport class AnnotateLocationEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      integrations: ScmIntegrationRegistry;\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateLocationEntityProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    _: CatalogProcessorEmit,\n    originLocation: LocationSpec,\n  ): Promise<Entity> {\n    const { integrations } = this.options;\n    let viewUrl;\n    let editUrl;\n    let sourceLocation;\n\n    if (location.type === 'url') {\n      const scmIntegration = integrations.byUrl(location.target);\n\n      viewUrl = location.target;\n      editUrl = scmIntegration?.resolveEditUrl(location.target);\n\n      const sourceUrl = scmIntegration?.resolveUrl({\n        url: './',\n        base: location.target,\n      });\n\n      if (sourceUrl) {\n        sourceLocation = stringifyLocationRef({\n          type: 'url',\n          target: sourceUrl,\n        });\n      }\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [ANNOTATION_LOCATION]: stringifyLocationRef(location),\n              [ANNOTATION_ORIGIN_LOCATION]:\n                stringifyLocationRef(originLocation),\n              [ANNOTATION_VIEW_URL]: viewUrl,\n              [ANNOTATION_EDIT_URL]: editUrl,\n              [ANNOTATION_SOURCE_LOCATION]: sourceLocation,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { identity, merge, pickBy } from 'lodash';\nimport { CatalogProcessor, LocationSpec } from '../../api';\n\nconst GITHUB_ACTIONS_ANNOTATION = 'github.com/project-slug';\n\n/** @public */\nexport class AnnotateScmSlugEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly opts: { scmIntegrationRegistry: ScmIntegrationRegistry },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateScmSlugEntityProcessor';\n  }\n\n  static fromConfig(config: Config): AnnotateScmSlugEntityProcessor {\n    return new AnnotateScmSlugEntityProcessor({\n      scmIntegrationRegistry: ScmIntegrations.fromConfig(config),\n    });\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    if (entity.kind !== 'Component' || location.type !== 'url') {\n      return entity;\n    }\n\n    const scmIntegration = this.opts.scmIntegrationRegistry.byUrl(\n      location.target,\n    );\n\n    if (!scmIntegration || scmIntegration.type !== 'github') {\n      return entity;\n    }\n\n    const gitUrl = parseGitUrl(location.target);\n    let githubProjectSlug =\n      entity.metadata.annotations?.[GITHUB_ACTIONS_ANNOTATION];\n\n    if (!githubProjectSlug) {\n      githubProjectSlug = `${gitUrl.owner}/${gitUrl.name}`;\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [GITHUB_ACTIONS_ANNOTATION]: githubProjectSlug,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiEntity,\n  apiEntityV1alpha1Validator,\n  ComponentEntity,\n  componentEntityV1alpha1Validator,\n  DomainEntity,\n  domainEntityV1alpha1Validator,\n  Entity,\n  getCompoundEntityRef,\n  GroupEntity,\n  groupEntityV1alpha1Validator,\n  locationEntityV1alpha1Validator,\n  parseEntityRef,\n  RELATION_API_CONSUMED_BY,\n  RELATION_API_PROVIDED_BY,\n  RELATION_CHILD_OF,\n  RELATION_CONSUMES_API,\n  RELATION_DEPENDENCY_OF,\n  RELATION_DEPENDS_ON,\n  RELATION_HAS_MEMBER,\n  RELATION_HAS_PART,\n  RELATION_MEMBER_OF,\n  RELATION_OWNED_BY,\n  RELATION_OWNER_OF,\n  RELATION_PARENT_OF,\n  RELATION_PART_OF,\n  RELATION_PROVIDES_API,\n  ResourceEntity,\n  resourceEntityV1alpha1Validator,\n  SystemEntity,\n  systemEntityV1alpha1Validator,\n  UserEntity,\n  userEntityV1alpha1Validator,\n} from '@backstage/catalog-model';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '../../api';\n\n/** @public */\nexport class BuiltinKindsEntityProcessor implements CatalogProcessor {\n  private readonly validators = [\n    apiEntityV1alpha1Validator,\n    componentEntityV1alpha1Validator,\n    resourceEntityV1alpha1Validator,\n    groupEntityV1alpha1Validator,\n    locationEntityV1alpha1Validator,\n    userEntityV1alpha1Validator,\n    systemEntityV1alpha1Validator,\n    domainEntityV1alpha1Validator,\n  ];\n\n  getProcessorName(): string {\n    return 'BuiltinKindsEntityProcessor';\n  }\n\n  async validateEntityKind(entity: Entity): Promise<boolean> {\n    for (const validator of this.validators) {\n      const results = await validator.check(entity);\n      if (results) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    _location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const selfRef = getCompoundEntityRef(entity);\n\n    /*\n     * Utilities\n     */\n\n    function doEmit(\n      targets: string | string[] | undefined,\n      context: { defaultKind?: string; defaultNamespace: string },\n      outgoingRelation: string,\n      incomingRelation: string,\n    ): void {\n      if (!targets) {\n        return;\n      }\n      for (const target of [targets].flat()) {\n        const targetRef = parseEntityRef(target, context);\n        emit(\n          processingResult.relation({\n            source: selfRef,\n            type: outgoingRelation,\n            target: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n          }),\n        );\n        emit(\n          processingResult.relation({\n            source: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n            type: incomingRelation,\n            target: selfRef,\n          }),\n        );\n      }\n    }\n\n    /*\n     * Emit relations for the Component kind\n     */\n\n    if (entity.kind === 'Component') {\n      const component = entity as ComponentEntity;\n      doEmit(\n        component.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        component.spec.subcomponentOf,\n        { defaultKind: 'Component', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n      doEmit(\n        component.spec.providesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_PROVIDES_API,\n        RELATION_API_PROVIDED_BY,\n      );\n      doEmit(\n        component.spec.consumesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_CONSUMES_API,\n        RELATION_API_CONSUMED_BY,\n      );\n      doEmit(\n        component.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        component.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the API kind\n     */\n\n    if (entity.kind === 'API') {\n      const api = entity as ApiEntity;\n      doEmit(\n        api.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        api.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Resource kind\n     */\n\n    if (entity.kind === 'Resource') {\n      const resource = entity as ResourceEntity;\n      doEmit(\n        resource.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        resource.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        resource.spec.dependencyOf,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDENCY_OF,\n        RELATION_DEPENDS_ON,\n      );\n      doEmit(\n        resource.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the User kind\n     */\n\n    if (entity.kind === 'User') {\n      const user = entity as UserEntity;\n      doEmit(\n        user.spec.memberOf,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_MEMBER_OF,\n        RELATION_HAS_MEMBER,\n      );\n    }\n\n    /*\n     * Emit relations for the Group kind\n     */\n\n    if (entity.kind === 'Group') {\n      const group = entity as GroupEntity;\n      doEmit(\n        group.spec.parent,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_CHILD_OF,\n        RELATION_PARENT_OF,\n      );\n      doEmit(\n        group.spec.children,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_PARENT_OF,\n        RELATION_CHILD_OF,\n      );\n      doEmit(\n        group.spec.members,\n        { defaultKind: 'User', defaultNamespace: selfRef.namespace },\n        RELATION_HAS_MEMBER,\n        RELATION_MEMBER_OF,\n      );\n    }\n\n    /*\n     * Emit relations for the System kind\n     */\n\n    if (entity.kind === 'System') {\n      const system = entity as SystemEntity;\n      doEmit(\n        system.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        system.spec.domain,\n        { defaultKind: 'Domain', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Domain kind\n     */\n\n    if (entity.kind === 'Domain') {\n      const domain = entity as DomainEntity;\n      doEmit(\n        domain.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport g from 'glob';\nimport path from 'path';\nimport { promisify } from 'util';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  CatalogProcessorParser,\n  LocationSpec,\n  processingResult,\n} from '../../api';\n\nconst glob = promisify(g);\n\n/** @public */\nexport class FileReaderProcessor implements CatalogProcessor {\n  getProcessorName(): string {\n    return 'FileReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n  ): Promise<boolean> {\n    if (location.type !== 'file') {\n      return false;\n    }\n\n    try {\n      const fileMatches = await glob(location.target);\n\n      if (fileMatches.length > 0) {\n        for (const fileMatch of fileMatches) {\n          const data = await fs.readFile(fileMatch);\n\n          // The normalize converts to native slashes; the glob library returns\n          // forward slashes even on windows\n          for await (const parseResult of parser({\n            data: data,\n            location: {\n              type: 'file',\n              target: path.normalize(fileMatch),\n            },\n          })) {\n            emit(parseResult);\n          }\n        }\n      } else if (!optional) {\n        const message = `${location.type} ${location.target} does not exist`;\n        emit(processingResult.notFoundError(location, message));\n      }\n    } catch (e) {\n      const message = `${location.type} ${location.target} could not be read, ${e}`;\n      emit(processingResult.generalError(location, message));\n    }\n\n    return true;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, LocationEntity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport {\n  processingResult,\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n} from '../../api';\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  target: string,\n): string {\n  try {\n    if (base.type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    }\n    return integrations.resolveUrl({ url: target, base: base.target });\n  } catch (e) {\n    return target;\n  }\n}\n\n/** @public */\nexport type LocationEntityProcessorOptions = {\n  integrations: ScmIntegrationRegistry;\n};\n\n/** @public */\nexport class LocationEntityProcessor implements CatalogProcessor {\n  constructor(private readonly options: LocationEntityProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'LocationEntityProcessor';\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    if (entity.kind === 'Location') {\n      const locationEntity = entity as LocationEntity;\n\n      const type = locationEntity.spec.type || location.type;\n      if (type === 'file' && location.target.endsWith(path.sep)) {\n        emit(\n          processingResult.inputError(\n            location,\n            `LocationEntityProcessor cannot handle ${type} type location with target ${location.target} that ends with a path separator`,\n          ),\n        );\n      }\n\n      const targets = new Array<string>();\n      if (locationEntity.spec.target) {\n        targets.push(locationEntity.spec.target);\n      }\n      if (locationEntity.spec.targets) {\n        targets.push(...locationEntity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          location,\n          maybeRelativeTarget,\n        );\n        emit(processingResult.location({ type, target }));\n      }\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport yaml from 'yaml';\nimport { CatalogProcessor, LocationSpec } from '../../api';\n\n/** @public */\nexport type PlaceholderResolverRead = (url: string) => Promise<Buffer>;\n\n/** @public */\nexport type PlaceholderResolverResolveUrl = (\n  url: string,\n  base: string,\n) => string;\n\n/** @public */\nexport type PlaceholderResolverParams = {\n  key: string;\n  value: JsonValue;\n  baseUrl: string;\n  read: PlaceholderResolverRead;\n  resolveUrl: PlaceholderResolverResolveUrl;\n};\n\n/** @public */\nexport type PlaceholderResolver = (\n  params: PlaceholderResolverParams,\n) => Promise<JsonValue>;\n\n/** @public */\nexport type PlaceholderProcessorOptions = {\n  resolvers: Record<string, PlaceholderResolver>;\n  reader: UrlReader;\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Traverses raw entity JSON looking for occurrences of $-prefixed placeholders\n * that it then fills in with actual data.\n * @public\n */\nexport class PlaceholderProcessor implements CatalogProcessor {\n  constructor(private readonly options: PlaceholderProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'PlaceholderProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    const process = async (data: any): Promise<[any, boolean]> => {\n      if (!data || !(data instanceof Object)) {\n        // Scalars can't have placeholders\n        return [data, false];\n      }\n\n      if (Array.isArray(data)) {\n        // We're an array - process all entries recursively\n        const items = await Promise.all(data.map(item => process(item)));\n        return items.every(([, changed]) => !changed)\n          ? [data, false]\n          : [items.map(([item]) => item), true];\n      }\n\n      const keys = Object.keys(data);\n      if (!keys.some(k => k.startsWith('$'))) {\n        // We're an object but no placeholders at this level - process all\n        // entries recursively\n        const entries = await Promise.all(\n          Object.entries(data).map(([k, v]) =>\n            process(v).then(vp => [k, vp] as const),\n          ),\n        );\n        return entries.every(([, [, changed]]) => !changed)\n          ? [data, false]\n          : [Object.fromEntries(entries.map(([k, [v]]) => [k, v])), true];\n      } else if (keys.length !== 1) {\n        // This was an object that had more than one key, some of which were\n        // dollar prefixed. We only handle the case where there is exactly one\n        // such key; anything else is left alone.\n        return [data, false];\n      }\n\n      const resolverKey = keys[0].substr(1);\n      const resolverValue = data[keys[0]];\n      const resolver = this.options.resolvers[resolverKey];\n      if (!resolver || typeof resolverValue !== 'string') {\n        // If there was no such placeholder resolver or if the value was not a\n        // string, we err on the side of safety and assume that this is\n        // something that's best left alone. For example, if the input contains\n        // JSONSchema, there may be \"$ref\": \"#/definitions/node\" nodes in the\n        // document.\n        return [data, false];\n      }\n\n      const read = async (url: string): Promise<Buffer> => {\n        if (this.options.reader.readUrl) {\n          const response = await this.options.reader.readUrl(url);\n          const buffer = await response.buffer();\n          return buffer;\n        }\n        return this.options.reader.read(url);\n      };\n\n      const resolveUrl = (url: string, base: string): string =>\n        this.options.integrations.resolveUrl({\n          url,\n          base,\n        });\n\n      return [\n        await resolver({\n          key: resolverKey,\n          value: resolverValue,\n          baseUrl: location.target,\n          read,\n          resolveUrl,\n        }),\n        true,\n      ];\n    };\n\n    const [result] = await process(entity);\n    return result;\n  }\n}\n\n/*\n * Resolvers\n */\n\nexport async function yamlPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const text = await readTextLocation(params);\n\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(text).filter(d => d);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse YAML data at ${params.value}, ${e}`,\n    );\n  }\n\n  if (documents.length !== 1) {\n    throw new Error(\n      `Placeholder \\$${params.key} expected to find exactly one document of data at ${params.value}, found ${documents.length}`,\n    );\n  }\n\n  const document = documents[0];\n\n  if (document.errors?.length) {\n    throw new Error(\n      `Placeholder \\$${params.key} found an error in the data at ${params.value}, ${document.errors[0]}`,\n    );\n  }\n\n  return document.toJSON();\n}\n\nexport async function jsonPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const text = await readTextLocation(params);\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse JSON data at ${params.value}, ${e}`,\n    );\n  }\n}\n\nexport async function textPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  return await readTextLocation(params);\n}\n\n/*\n * Helpers\n */\n\nasync function readTextLocation(\n  params: PlaceholderResolverParams,\n): Promise<string> {\n  const newUrl = relativeUrl(params);\n\n  try {\n    const data = await params.read(newUrl);\n    return data.toString('utf-8');\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} could not read location ${params.value}, ${e}`,\n    );\n  }\n}\n\nfunction relativeUrl({\n  key,\n  value,\n  baseUrl,\n  resolveUrl,\n}: PlaceholderResolverParams): string {\n  if (typeof value !== 'string') {\n    throw new Error(\n      `Placeholder \\$${key} expected a string value parameter, in the form of an absolute URL or a relative path`,\n    );\n  }\n\n  try {\n    return resolveUrl(value, baseUrl);\n  } catch (e) {\n    // The only remaining case that isn't support is a relative file path that should be\n    // resolved using a relative file location. Accessing local file paths can lead to\n    // path traversal attacks and access to any file on the host system. Implementing this\n    // would require additional security measures.\n    throw new Error(\n      `Placeholder \\$${key} could not form a URL out of ${baseUrl} and ${value}, ${e}`,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport parseGitUrl from 'git-url-parse';\nimport limiterFactory from 'p-limit';\nimport { Logger } from 'winston';\nimport {\n  CatalogProcessor,\n  CatalogProcessorCache,\n  CatalogProcessorEmit,\n  CatalogProcessorEntityResult,\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  LocationSpec,\n  processingResult,\n} from '../../api';\n\nconst CACHE_KEY = 'v1';\n\n// WARNING: If you change this type, you likely need to bump the CACHE_KEY as well\ntype CacheItem = {\n  etag: string;\n  value: {\n    type: 'entity';\n    entity: Entity;\n    location: LocationSpec;\n  }[];\n};\n\n/** @public */\nexport class UrlReaderProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      reader: UrlReader;\n      logger: Logger;\n    },\n  ) {}\n\n  getProcessorName() {\n    return 'url-reader';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n    cache: CatalogProcessorCache,\n  ): Promise<boolean> {\n    if (location.type !== 'url') {\n      return false;\n    }\n\n    const cacheItem = await cache.get<CacheItem>(CACHE_KEY);\n\n    try {\n      const { response, etag: newEtag } = await this.doRead(\n        location.target,\n        cacheItem?.etag,\n      );\n\n      const parseResults: CatalogProcessorResult[] = [];\n      for (const item of response) {\n        for await (const parseResult of parser({\n          data: item.data,\n          location: { type: location.type, target: item.url },\n        })) {\n          parseResults.push(parseResult);\n          emit(parseResult);\n        }\n      }\n\n      const isOnlyEntities = parseResults.every(r => r.type === 'entity');\n      if (newEtag && isOnlyEntities) {\n        await cache.set<CacheItem>(CACHE_KEY, {\n          etag: newEtag,\n          value: parseResults as CatalogProcessorEntityResult[],\n        });\n      }\n    } catch (error) {\n      assertError(error);\n      const message = `Unable to read ${location.type}, ${error}`;\n      if (error.name === 'NotModifiedError' && cacheItem) {\n        for (const parseResult of cacheItem.value) {\n          emit(parseResult);\n        }\n      } else if (error.name === 'NotFoundError') {\n        if (!optional) {\n          emit(processingResult.notFoundError(location, message));\n        }\n      } else {\n        emit(processingResult.generalError(location, message));\n      }\n    }\n\n    return true;\n  }\n\n  private async doRead(\n    location: string,\n    etag?: string,\n  ): Promise<{ response: { data: Buffer; url: string }[]; etag?: string }> {\n    // Does it contain globs? I.e. does it contain asterisks or question marks\n    // (no curly braces for now)\n    const { filepath } = parseGitUrl(location);\n    if (filepath?.match(/[*?]/)) {\n      const limiter = limiterFactory(5);\n      const response = await this.options.reader.search(location, { etag });\n      const output = response.files.map(async file => ({\n        url: file.url,\n        data: await limiter(file.content),\n      }));\n      return { response: await Promise.all(output), etag: response.etag };\n    }\n\n    // Otherwise do a plain read, prioritizing readUrl if available\n    if (this.options.reader.readUrl) {\n      const data = await this.options.reader.readUrl(location, { etag });\n      return {\n        response: [{ url: location, data: await data.buffer() }],\n        etag: data.etag,\n      };\n    }\n\n    const data = await this.options.reader.read(location);\n    return { response: [{ url: location, data }] };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyLocationRef } from '@backstage/catalog-model';\nimport lodash from 'lodash';\nimport yaml from 'yaml';\nimport {\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  LocationSpec,\n  processingResult,\n} from '../../api';\n\n/** @public */\nexport function* parseEntityYaml(\n  data: Buffer,\n  location: LocationSpec,\n): Iterable<CatalogProcessorResult> {\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(data.toString('utf8')).filter(d => d);\n  } catch (e) {\n    const loc = stringifyLocationRef(location);\n    const message = `Failed to parse YAML at ${loc}, ${e}`;\n    yield processingResult.generalError(location, message);\n    return;\n  }\n\n  for (const document of documents) {\n    if (document.errors?.length) {\n      const loc = stringifyLocationRef(location);\n      const message = `YAML error at ${loc}, ${document.errors[0]}`;\n      yield processingResult.generalError(location, message);\n    } else {\n      const json = document.toJSON();\n      if (lodash.isPlainObject(json)) {\n        yield processingResult.entity(location, json as Entity);\n      } else if (json === null) {\n        // Ignore null values, these happen if there is an empty document in the\n        // YAML file, for example if --- is added to the end of the file.\n      } else {\n        const message = `Expected object at root, got ${typeof json}`;\n        yield processingResult.generalError(location, message);\n      }\n    }\n  }\n}\n\nexport const defaultEntityDataParser: CatalogProcessorParser =\n  async function* defaultEntityDataParser({ data, location }) {\n    for (const e of parseEntityYaml(data, location)) {\n      yield e;\n    }\n  };\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport {\n  Entity,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { DocumentCollatorFactory } from '@backstage/plugin-search-common';\nimport {\n  catalogEntityReadPermission,\n  CatalogEntityDocument,\n} from '@backstage/plugin-catalog-common';\nimport { Readable } from 'stream';\n\n/** @public */\nexport type DefaultCatalogCollatorFactoryOptions = {\n  discovery: PluginEndpointDiscovery;\n  tokenManager: TokenManager;\n  locationTemplate?: string;\n  filter?: GetEntitiesRequest['filter'];\n  batchSize?: number;\n  catalogClient?: CatalogApi;\n};\n\n/** @public */\nexport class DefaultCatalogCollatorFactory implements DocumentCollatorFactory {\n  public readonly type: string = 'software-catalog';\n  public readonly visibilityPermission = catalogEntityReadPermission;\n\n  private locationTemplate: string;\n  private filter?: GetEntitiesRequest['filter'];\n  private batchSize: number;\n  private readonly catalogClient: CatalogApi;\n  private tokenManager: TokenManager;\n\n  static fromConfig(\n    _config: Config,\n    options: DefaultCatalogCollatorFactoryOptions,\n  ) {\n    return new DefaultCatalogCollatorFactory(options);\n  }\n\n  private constructor(options: DefaultCatalogCollatorFactoryOptions) {\n    const {\n      batchSize,\n      discovery,\n      locationTemplate,\n      filter,\n      catalogClient,\n      tokenManager,\n    } = options;\n\n    this.locationTemplate =\n      locationTemplate || '/catalog/:namespace/:kind/:name';\n    this.filter = filter;\n    this.batchSize = batchSize || 500;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.tokenManager = tokenManager;\n  }\n\n  async getCollator(): Promise<Readable> {\n    return Readable.from(this.execute());\n  }\n\n  private applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted.toLowerCase();\n  }\n\n  private isUserEntity(entity: Entity): entity is UserEntity {\n    return entity.kind.toLocaleUpperCase('en-US') === 'USER';\n  }\n\n  private getDocumentText(entity: Entity): string {\n    let documentText = entity.metadata.description || '';\n    if (this.isUserEntity(entity)) {\n      if (entity.spec?.profile?.displayName && documentText) {\n        // combine displayName and description\n        const displayName = entity.spec?.profile?.displayName;\n        documentText = displayName.concat(' : ', documentText);\n      } else {\n        documentText = entity.spec?.profile?.displayName || documentText;\n      }\n    }\n    return documentText;\n  }\n\n  private async *execute(): AsyncGenerator<CatalogEntityDocument> {\n    const { token } = await this.tokenManager.getToken();\n    let entitiesRetrieved = 0;\n    let moreEntitiesToGet = true;\n\n    // Offset/limit pagination is used on the Catalog Client in order to\n    // limit (and allow some control over) memory used by the search backend\n    // at index-time.\n    while (moreEntitiesToGet) {\n      const entities = (\n        await this.catalogClient.getEntities(\n          {\n            filter: this.filter,\n            limit: this.batchSize,\n            offset: entitiesRetrieved,\n          },\n          { token },\n        )\n      ).items;\n\n      // Control looping through entity batches.\n      moreEntitiesToGet = entities.length === this.batchSize;\n      entitiesRetrieved += entities.length;\n\n      for (const entity of entities) {\n        yield {\n          title: entity.metadata.title ?? entity.metadata.name,\n          location: this.applyArgsToFormat(this.locationTemplate, {\n            namespace: entity.metadata.namespace || 'default',\n            kind: entity.kind,\n            name: entity.metadata.name,\n          }),\n          text: this.getDocumentText(entity),\n          componentType: entity.spec?.type?.toString() || 'other',\n          type: entity.spec?.type?.toString() || 'other',\n          namespace: entity.metadata.namespace || 'default',\n          kind: entity.kind,\n          lifecycle: (entity.spec?.lifecycle as string) || '',\n          owner: (entity.spec?.owner as string) || '',\n          authorization: {\n            resourceRef: stringifyEntityRef(entity),\n          },\n        };\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport {\n  Entity,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport {\n  catalogEntityReadPermission,\n  CatalogEntityDocument,\n} from '@backstage/plugin-catalog-common';\n\n/**\n * @public\n * @deprecated Upgrade to a more recent `@backstage/search-backend-node` and\n * use `DefaultCatalogCollatorFactory` instead.\n */\nexport class DefaultCatalogCollator {\n  protected discovery: PluginEndpointDiscovery;\n  protected locationTemplate: string;\n  protected filter?: GetEntitiesRequest['filter'];\n  protected readonly catalogClient: CatalogApi;\n  public readonly type: string = 'software-catalog';\n  public readonly visibilityPermission = catalogEntityReadPermission;\n  protected tokenManager: TokenManager;\n\n  static fromConfig(\n    _config: Config,\n    options: {\n      discovery: PluginEndpointDiscovery;\n      tokenManager: TokenManager;\n      filter?: GetEntitiesRequest['filter'];\n    },\n  ) {\n    return new DefaultCatalogCollator({\n      ...options,\n    });\n  }\n\n  constructor(options: {\n    discovery: PluginEndpointDiscovery;\n    tokenManager: TokenManager;\n    locationTemplate?: string;\n    filter?: GetEntitiesRequest['filter'];\n    catalogClient?: CatalogApi;\n  }) {\n    const { discovery, locationTemplate, filter, catalogClient, tokenManager } =\n      options;\n\n    this.discovery = discovery;\n    this.locationTemplate =\n      locationTemplate || '/catalog/:namespace/:kind/:name';\n    this.filter = filter;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.tokenManager = tokenManager;\n  }\n\n  protected applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted.toLowerCase();\n  }\n\n  private isUserEntity(entity: Entity): entity is UserEntity {\n    return entity.kind.toLocaleUpperCase('en-US') === 'USER';\n  }\n\n  private getDocumentText(entity: Entity): string {\n    let documentText = entity.metadata.description || '';\n    if (this.isUserEntity(entity)) {\n      if (entity.spec?.profile?.displayName && documentText) {\n        // combine displayName and description\n        const displayName = entity.spec?.profile?.displayName;\n        documentText = displayName.concat(' : ', documentText);\n      } else {\n        documentText = entity.spec?.profile?.displayName || documentText;\n      }\n    }\n    return documentText;\n  }\n\n  async execute() {\n    const { token } = await this.tokenManager.getToken();\n    const response = await this.catalogClient.getEntities(\n      {\n        filter: this.filter,\n      },\n      { token },\n    );\n    return response.items.map((entity: Entity): CatalogEntityDocument => {\n      return {\n        title: entity.metadata.title ?? entity.metadata.name,\n        location: this.applyArgsToFormat(this.locationTemplate, {\n          namespace: entity.metadata.namespace || 'default',\n          kind: entity.kind,\n          name: entity.metadata.name,\n        }),\n        text: this.getDocumentText(entity),\n        componentType: entity.spec?.type?.toString() || 'other',\n        type: entity.spec?.type?.toString() || 'other',\n        namespace: entity.metadata.namespace || 'default',\n        kind: entity.kind,\n        lifecycle: (entity.spec?.lifecycle as string) || '',\n        owner: (entity.spec?.owner as string) || '',\n        authorization: {\n          resourceRef: stringifyEntityRef(entity),\n        },\n      };\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function that returns the catalog processing interval in seconds.\n * @public\n */\nexport type ProcessingIntervalFunction = () => number;\n\n/**\n * Creates a function that returns a random processing interval between minSeconds and maxSeconds.\n * @returns A {@link ProcessingIntervalFunction} that provides the next processing interval\n * @public\n */\nexport function createRandomProcessingInterval(options: {\n  minSeconds: number;\n  maxSeconds: number;\n}): ProcessingIntervalFunction {\n  const { minSeconds, maxSeconds } = options;\n  return () => {\n    return Math.random() * (maxSeconds - minSeconds) + minSeconds;\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  entitySchemaValidator,\n  LocationEntity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '../api';\n\nexport function isLocationEntity(entity: Entity): entity is LocationEntity {\n  return entity.kind === 'Location';\n}\n\nexport function getEntityLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function getEntityOriginLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_ORIGIN_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  type: string,\n  target: string,\n): string {\n  if (base.type !== type) {\n    return target;\n  }\n  try {\n    if (type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    } else if (type === 'url') {\n      return integrations.resolveUrl({ url: target, base: base.target });\n    }\n    return target;\n  } catch (e) {\n    return target;\n  }\n}\n\nexport function isObject(value: JsonValue | undefined): value is JsonObject {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport const validateEntity = entitySchemaValidator();\n\nexport const validateEntityEnvelope = entityEnvelopeSchemaValidator();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  LocationEntityV1alpha1,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport { LocationSpec } from '../api';\n\nexport function locationSpecToMetadataName(location: LocationSpec) {\n  const hash = createHash('sha1')\n    .update(`${location.type}:${location.target}`)\n    .digest('hex');\n  return `generated-${hash}`;\n}\n\nexport function locationSpecToLocationEntity(\n  location: LocationSpec,\n  parentEntity?: Entity,\n): LocationEntityV1alpha1 {\n  let ownLocation: string;\n  let originLocation: string;\n  if (parentEntity) {\n    const maybeOwnLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_LOCATION];\n    if (!maybeOwnLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have a location annotation`,\n      );\n    }\n    ownLocation = maybeOwnLocation;\n    const maybeOriginLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n    if (!maybeOriginLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have an origin location annotation`,\n      );\n    }\n    originLocation = maybeOriginLocation;\n  } else {\n    ownLocation = stringifyLocationRef(location);\n    originLocation = ownLocation;\n  }\n\n  const result: LocationEntityV1alpha1 = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'Location',\n    metadata: {\n      name: locationSpecToMetadataName(location),\n      annotations: {\n        [ANNOTATION_LOCATION]: ownLocation,\n        [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n      },\n    },\n    spec: {\n      type: location.type,\n      target: location.target,\n      presence: location.presence,\n    },\n  };\n\n  return result;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { getEntityLocationRef } from '../../processing/util';\nimport { EntityProvider, EntityProviderConnection } from '../../api';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\n\nexport class ConfigLocationEntityProvider implements EntityProvider {\n  constructor(private readonly config: Config) {}\n\n  getProviderName(): string {\n    return 'ConfigLocationProvider';\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    const entities = this.getEntitiesFromConfig();\n    await connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    if (this.config.subscribe) {\n      let currentKey = JSON.stringify(entities);\n\n      this.config.subscribe(() => {\n        const newEntities = this.getEntitiesFromConfig();\n        const newKey = JSON.stringify(newEntities);\n\n        if (currentKey !== newKey) {\n          currentKey = newKey;\n          connection.applyMutation({\n            type: 'full',\n            entities: newEntities,\n          });\n        }\n      });\n    }\n  }\n\n  private getEntitiesFromConfig() {\n    const locationConfigs =\n      this.config.getOptionalConfigArray('catalog.locations') ?? [];\n\n    return locationConfigs.map(location => {\n      const type = location.getString('type');\n      const target = location.getString('target');\n      const entity = locationSpecToLocationEntity({\n        type,\n        target: type === 'file' ? path.resolve(target) : target,\n      });\n      const locationKey = getEntityLocationRef(entity);\n      return { entity, locationKey };\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport { DbLocationsRow } from '../../database/tables';\nimport { getEntityLocationRef } from '../../processing/util';\nimport { EntityProvider, EntityProviderConnection } from '../../api';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\nimport { LocationInput, LocationStore } from '../../service/types';\n\nexport class DefaultLocationStore implements LocationStore, EntityProvider {\n  private _connection: EntityProviderConnection | undefined;\n\n  constructor(private readonly db: Knex) {}\n\n  getProviderName(): string {\n    return 'DefaultLocationStore';\n  }\n\n  async createLocation(input: LocationInput): Promise<Location> {\n    const location = await this.db.transaction(async tx => {\n      // Attempt to find a previous location matching the input\n      const previousLocations = await this.locations(tx);\n      // TODO: when location id's are a compilation of input target we can remove this full\n      // lookup of locations first and just grab the by that instead.\n      const previousLocation = previousLocations.some(\n        l => input.type === l.type && input.target === l.target,\n      );\n      if (previousLocation) {\n        throw new ConflictError(\n          `Location ${input.type}:${input.target} already exists`,\n        );\n      }\n\n      const inner: DbLocationsRow = {\n        id: uuid(),\n        type: input.type,\n        target: input.target,\n      };\n\n      await tx<DbLocationsRow>('locations').insert(inner);\n\n      return inner;\n    });\n    const entity = locationSpecToLocationEntity(location);\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [{ entity, locationKey: getEntityLocationRef(entity) }],\n      removed: [],\n    });\n\n    return location;\n  }\n\n  async listLocations(): Promise<Location[]> {\n    return await this.locations();\n  }\n\n  async getLocation(id: string): Promise<Location> {\n    const items = await this.db<DbLocationsRow>('locations')\n      .where({ id })\n      .select();\n\n    if (!items.length) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n    return items[0];\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    if (!this.connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    const deleted = await this.db.transaction(async tx => {\n      const [location] = await tx<DbLocationsRow>('locations')\n        .where({ id })\n        .select();\n\n      if (!location) {\n        throw new NotFoundError(`Found no location with ID ${id}`);\n      }\n\n      await tx<DbLocationsRow>('locations').where({ id }).del();\n      return location;\n    });\n    const entity = locationSpecToLocationEntity(deleted);\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [],\n      removed: [{ entity, locationKey: getEntityLocationRef(entity) }],\n    });\n  }\n\n  private get connection(): EntityProviderConnection {\n    if (!this._connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    return this._connection;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this._connection = connection;\n\n    const locations = await this.locations();\n\n    const entities = locations.map(location => {\n      const entity = locationSpecToLocationEntity(location);\n      return { entity, locationKey: getEntityLocationRef(entity) };\n    });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n  }\n\n  private async locations(dbOrTx: Knex.Transaction | Knex = this.db) {\n    const locations = await dbOrTx<DbLocationsRow>('locations').select();\n    return (\n      locations\n        // TODO(blam): We should create a mutation to remove this location for everyone\n        // eventually when it's all done and dusted\n        .filter(({ type }) => type !== 'bootstrap')\n        .map(item => ({\n          id: item.id,\n          target: item.target,\n          type: item.type,\n        }))\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport parseGitUrl from 'git-url-parse';\nimport { Entity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  AnalyzeLocationRequest,\n  AnalyzeLocationResponse,\n  LocationAnalyzer,\n} from './types';\n\nexport class RepoLocationAnalyzer implements LocationAnalyzer {\n  private readonly logger: Logger;\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n\n  constructor(logger: Logger, scmIntegrations: ScmIntegrationRegistry) {\n    this.logger = logger;\n    this.scmIntegrations = scmIntegrations;\n  }\n  async analyzeLocation(\n    request: AnalyzeLocationRequest,\n  ): Promise<AnalyzeLocationResponse> {\n    const { owner, name } = parseGitUrl(request.location.target);\n    const entity: Entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Component',\n      metadata: {\n        name: name,\n      },\n      spec: { type: 'other', lifecycle: 'unknown' },\n    };\n\n    const integration = this.scmIntegrations.byUrl(request.location.target);\n    let annotationPrefix;\n    switch (integration?.type) {\n      case 'azure':\n        annotationPrefix = 'dev.azure.com';\n        break;\n      case 'bitbucket':\n        annotationPrefix = 'bitbucket.org';\n        break;\n      case 'github':\n        annotationPrefix = 'github.com';\n        break;\n      case 'gitlab':\n        annotationPrefix = 'gitlab.com';\n        break;\n      default:\n        break;\n    }\n\n    if (annotationPrefix) {\n      entity.metadata.annotations = {\n        [`${annotationPrefix}/project-slug`]: `${owner}/${name}`,\n      };\n    }\n\n    this.logger.debug(`entity created for ${request.location.target}`);\n    return {\n      existingEntityFiles: [],\n      generateEntities: [{ entity, fields: [] }],\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { ConflictError, InputError } from '@backstage/errors';\nimport { DateTime } from 'luxon';\n\n/**\n * Takes a TIMESTAMP type column and converts it to a DateTime.\n *\n * Some engines return the SQL string form (e.g. 'YYYY-MM-DD hh:mm:ss'), some\n * return ISO string form (e.g. 'YYYY-MM-DDThh:mm:ss.SSSZ'), some return a js\n * Date object.\n */\nexport function timestampToDateTime(input: Date | string): DateTime {\n  try {\n    if (typeof input === 'object') {\n      return DateTime.fromJSDate(input).toUTC();\n    }\n\n    const result = input.includes(' ')\n      ? DateTime.fromSQL(input, { zone: 'utc' })\n      : DateTime.fromISO(input, { zone: 'utc' });\n    if (!result.isValid) {\n      throw new TypeError('Not valid');\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(`Failed to parse database timestamp ${input}`, e);\n  }\n}\n\n/**\n * Rethrows an error, possibly translating it to a more precise error type.\n */\nexport function rethrowError(e: any): never {\n  if (isDatabaseConflictError(e)) {\n    throw new ConflictError(`Rejected due to a conflicting entity`, e);\n  }\n\n  throw e;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  register,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\nexport function createCounterMetric<T extends string>(\n  config: CounterConfiguration<T>,\n): Counter<T> {\n  const existing = register.getSingleMetric(config.name) as Counter<T>;\n  return existing || new Counter<T>(config);\n}\n\nexport function createGaugeMetric<T extends string>(\n  config: GaugeConfiguration<T>,\n): Gauge<T> {\n  const existing = register.getSingleMetric(config.name) as Gauge<T>;\n  return existing || new Gauge<T>(config);\n}\n\nexport function createSummaryMetric<T extends string>(\n  config: SummaryConfiguration<T>,\n): Summary<T> {\n  const existing = register.getSingleMetric(config.name) as Summary<T>;\n  return existing || new Summary<T>(config);\n}\n\nexport function createHistogramMetric<T extends string>(\n  config: HistogramConfiguration<T>,\n): Histogram<T> {\n  const existing = register.getSingleMetric(config.name) as Histogram<T>;\n  return existing || new Histogram<T>(config);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { createGaugeMetric } from '../util/metrics';\nimport { DbRefreshStateRow, DbRelationsRow, DbLocationsRow } from './tables';\n\nexport function initDatabaseMetrics(knex: Knex) {\n  const seen = new Set<string>();\n  return {\n    entities_count: createGaugeMetric({\n      name: 'catalog_entities_count',\n      help: 'Total amount of entities in the catalog',\n      labelNames: ['kind'],\n      async collect() {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => row.entity_ref.split(':')[0])\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seen.add(key);\n          this.set({ kind: key }, value);\n        });\n\n        // Set all the entities that were not seen to 0 and delete them from the seen set.\n        seen.forEach(key => {\n          if (!results.has(key)) {\n            this.set({ kind: key }, 0);\n            seen.delete(key);\n          }\n        });\n      },\n    }),\n    registered_locations: createGaugeMetric({\n      name: 'catalog_registered_locations_count',\n      help: 'Total amount of registered locations in the catalog',\n      async collect() {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    relations: createGaugeMetric({\n      name: 'catalog_relations_count',\n      help: 'Total amount of relations between entities',\n      async collect() {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { ConflictError, isError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport type { Logger } from 'winston';\nimport {\n  Transaction,\n  GetProcessableEntitiesResult,\n  ProcessingDatabase,\n  RefreshStateItem,\n  RefreshOptions,\n  ReplaceUnprocessedEntitiesOptions,\n  UpdateProcessedEntityOptions,\n  ListAncestorsOptions,\n  ListAncestorsResult,\n  UpdateEntityCacheOptions,\n  ListParentsOptions,\n  ListParentsResult,\n} from './types';\nimport { DeferredEntity } from '../processing/types';\nimport { ProcessingIntervalFunction } from '../processing/refresh';\nimport { rethrowError, timestampToDateTime } from './conversion';\nimport { initDatabaseMetrics } from './metrics';\nimport {\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n} from './tables';\n\nimport { generateStableHash } from './util';\nimport { isDatabaseConflictError } from '@backstage/backend-common';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nconst BATCH_SIZE = 50;\nconst MAX_ANCESTOR_DEPTH = 32;\n\nexport class DefaultProcessingDatabase implements ProcessingDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: Logger;\n      refreshInterval: ProcessingIntervalFunction;\n    },\n  ) {\n    initDatabaseMetrics(options.database);\n  }\n\n  async updateProcessedEntity(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const {\n      id,\n      processedEntity,\n      resultHash,\n      errors,\n      relations,\n      deferredEntities,\n      locationKey,\n    } = options;\n    const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        processed_entity: JSON.stringify(processedEntity),\n        result_hash: resultHash,\n        errors,\n        location_key: locationKey,\n      })\n      .where('entity_id', id)\n      .andWhere(inner => {\n        if (!locationKey) {\n          return inner.whereNull('location_key');\n        }\n        return inner\n          .where('location_key', locationKey)\n          .orWhereNull('location_key');\n      });\n    if (refreshResult === 0) {\n      throw new ConflictError(\n        `Conflicting write of processing result for ${id} with location key '${locationKey}'`,\n      );\n    }\n\n    // Schedule all deferred entities for future processing.\n    await this.addUnprocessedEntities(tx, {\n      entities: deferredEntities,\n      sourceEntityRef: stringifyEntityRef(processedEntity),\n    });\n\n    // Delete old relations\n    await tx<DbRelationsRow>('relations')\n      .where({ originating_entity_id: id })\n      .delete();\n\n    // Batch insert new relations\n    const relationRows: DbRelationsRow[] = relations.map(\n      ({ source, target, type }) => ({\n        originating_entity_id: id,\n        source_entity_ref: stringifyEntityRef(source),\n        target_entity_ref: stringifyEntityRef(target),\n        type,\n      }),\n    );\n    await tx.batchInsert(\n      'relations',\n      this.deduplicateRelations(relationRows),\n      BATCH_SIZE,\n    );\n  }\n\n  async updateProcessedEntityErrors(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, errors, resultHash } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        errors,\n        result_hash: resultHash,\n      })\n      .where('entity_id', id);\n  }\n\n  async updateEntityCache(\n    txOpaque: Transaction,\n    options: UpdateEntityCacheOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, state } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({ cache: JSON.stringify(state ?? {}) })\n      .where('entity_id', id);\n  }\n\n  async replaceUnprocessedEntities(\n    txOpaque: Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n\n    const { toAdd, toUpsert, toRemove } = await this.createDelta(tx, options);\n\n    if (toRemove.length) {\n      // TODO(freben): Batch split, to not hit variable limits?\n      /*\n      WITH RECURSIVE\n        -- All the nodes that can be reached downwards from our root\n        descendants(root_id, entity_ref) AS (\n          SELECT id, target_entity_ref\n          FROM refresh_state_references\n          WHERE source_key = \"R1\" AND target_entity_ref = \"A\"\n          UNION\n          SELECT descendants.root_id, target_entity_ref\n          FROM descendants\n          JOIN refresh_state_references ON source_entity_ref = descendants.entity_ref\n        ),\n        -- All the nodes that can be reached upwards from the descendants\n        ancestors(root_id, via_entity_ref, to_entity_ref) AS (\n          SELECT CAST(NULL as INT), entity_ref, entity_ref\n          FROM descendants\n          UNION\n          SELECT\n            CASE WHEN source_key IS NOT NULL THEN id ELSE NULL END,\n            source_entity_ref,\n            ancestors.to_entity_ref\n          FROM ancestors\n          JOIN refresh_state_references ON target_entity_ref = ancestors.via_entity_ref\n        )\n      -- Start out with all of the descendants\n      SELECT descendants.entity_ref\n      FROM descendants\n      -- Expand with all ancestors that point to those, but aren't the current root\n      LEFT OUTER JOIN ancestors\n        ON ancestors.to_entity_ref = descendants.entity_ref\n        AND ancestors.root_id IS NOT NULL\n        AND ancestors.root_id != descendants.root_id\n      -- Exclude all lines that had such a foreign ancestor\n      WHERE ancestors.root_id IS NULL;\n      */\n      const removedCount = await tx<DbRefreshStateRow>('refresh_state')\n        .whereIn('entity_ref', function orphanedEntityRefs(orphans) {\n          return (\n            orphans\n              // All the nodes that can be reached downwards from our root\n              .withRecursive('descendants', function descendants(outer) {\n                return outer\n                  .select({ root_id: 'id', entity_ref: 'target_entity_ref' })\n                  .from('refresh_state_references')\n                  .where('source_key', options.sourceKey)\n                  .whereIn('target_entity_ref', toRemove)\n                  .union(function recursive(inner) {\n                    return inner\n                      .select({\n                        root_id: 'descendants.root_id',\n                        entity_ref:\n                          'refresh_state_references.target_entity_ref',\n                      })\n                      .from('descendants')\n                      .join('refresh_state_references', {\n                        'descendants.entity_ref':\n                          'refresh_state_references.source_entity_ref',\n                      });\n                  });\n              })\n              // All the nodes that can be reached upwards from the descendants\n              .withRecursive('ancestors', function ancestors(outer) {\n                return outer\n                  .select({\n                    root_id: tx.raw('CAST(NULL as INT)', []),\n                    via_entity_ref: 'entity_ref',\n                    to_entity_ref: 'entity_ref',\n                  })\n                  .from('descendants')\n                  .union(function recursive(inner) {\n                    return inner\n                      .select({\n                        root_id: tx.raw(\n                          'CASE WHEN source_key IS NOT NULL THEN id ELSE NULL END',\n                          [],\n                        ),\n                        via_entity_ref: 'source_entity_ref',\n                        to_entity_ref: 'ancestors.to_entity_ref',\n                      })\n                      .from('ancestors')\n                      .join('refresh_state_references', {\n                        target_entity_ref: 'ancestors.via_entity_ref',\n                      });\n                  });\n              })\n              // Start out with all of the descendants\n              .select('descendants.entity_ref')\n              .from('descendants')\n              // Expand with all ancestors that point to those, but aren't the current root\n              .leftOuterJoin('ancestors', function keepaliveRoots() {\n                this.on(\n                  'ancestors.to_entity_ref',\n                  '=',\n                  'descendants.entity_ref',\n                );\n                this.andOnNotNull('ancestors.root_id');\n                this.andOn('ancestors.root_id', '!=', 'descendants.root_id');\n              })\n              .whereNull('ancestors.root_id')\n          );\n        })\n        .delete();\n\n      await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n        .where('source_key', '=', options.sourceKey)\n        .whereIn('target_entity_ref', toRemove)\n        .delete();\n\n      this.options.logger.debug(\n        `removed, ${removedCount} entities: ${JSON.stringify(toRemove)}`,\n      );\n    }\n\n    if (toAdd.length) {\n      // The reason for this chunking, rather than just massively batch\n      // inserting the entire payload, is that we fall back to the individual\n      // upsert mechanism below on conflicts. That path is massively slower than\n      // the fast batch path, so we don't want to end up accidentally having to\n      // for example item-by-item upsert tens of thousands of entities in a\n      // large initial delivery dump. The implication is that the size of these\n      // chunks needs to weigh the benefit of fast successful inserts, against\n      // the drawback of super slow but more rare fallbacks. There's quickly\n      // diminishing returns though with turning up this value way high.\n      for (const chunk of lodash.chunk(toAdd, 50)) {\n        try {\n          await tx.batchInsert(\n            'refresh_state',\n            chunk.map(item => ({\n              entity_id: uuid(),\n              entity_ref: stringifyEntityRef(item.deferred.entity),\n              unprocessed_entity: JSON.stringify(item.deferred.entity),\n              unprocessed_hash: item.hash,\n              errors: '',\n              location_key: item.deferred.locationKey,\n              next_update_at: tx.fn.now(),\n              last_discovery_at: tx.fn.now(),\n            })),\n            BATCH_SIZE,\n          );\n          await tx.batchInsert(\n            'refresh_state_references',\n            chunk.map(item => ({\n              source_key: options.sourceKey,\n              target_entity_ref: stringifyEntityRef(item.deferred.entity),\n            })),\n            BATCH_SIZE,\n          );\n        } catch (error) {\n          if (!isDatabaseConflictError(error)) {\n            throw error;\n          } else {\n            this.options.logger.debug(\n              `Fast insert path failed, falling back to slow path, ${error}`,\n            );\n            toUpsert.push(...chunk);\n          }\n        }\n      }\n    }\n\n    if (toUpsert.length) {\n      for (const {\n        deferred: { entity, locationKey },\n        hash,\n      } of toUpsert) {\n        const entityRef = stringifyEntityRef(entity);\n\n        try {\n          let ok = await this.updateUnprocessedEntity(\n            tx,\n            entity,\n            hash,\n            locationKey,\n          );\n          if (!ok) {\n            ok = await this.insertUnprocessedEntity(\n              tx,\n              entity,\n              hash,\n              locationKey,\n            );\n          }\n\n          if (ok) {\n            await tx<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n            ).insert({\n              source_key: options.sourceKey,\n              target_entity_ref: entityRef,\n            });\n          } else {\n            const conflictingKey = await this.checkLocationKeyConflict(\n              tx,\n              entityRef,\n              locationKey,\n            );\n            if (conflictingKey) {\n              this.options.logger.warn(\n                `Source ${options.sourceKey} detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n              );\n            }\n          }\n        } catch (error) {\n          this.options.logger.error(\n            `Failed to add '${entityRef}' from source '${options.sourceKey}', ${error}`,\n          );\n        }\n      }\n    }\n  }\n\n  async getProcessableEntities(\n    txOpaque: Transaction,\n    request: { processBatchSize: number },\n  ): Promise<GetProcessableEntitiesResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    let itemsQuery = tx<DbRefreshStateRow>('refresh_state').select();\n\n    // This avoids duplication of work because of race conditions and is\n    // also fast because locked rows are ignored rather than blocking.\n    // It's only available in MySQL and PostgreSQL\n    if (['mysql', 'mysql2', 'pg'].includes(tx.client.config.client)) {\n      itemsQuery = itemsQuery.forUpdate().skipLocked();\n    }\n\n    const items = await itemsQuery\n      .where('next_update_at', '<=', tx.fn.now())\n      .limit(request.processBatchSize)\n      .orderBy('next_update_at', 'asc');\n\n    const interval = this.options.refreshInterval();\n    await tx<DbRefreshStateRow>('refresh_state')\n      .whereIn(\n        'entity_ref',\n        items.map(i => i.entity_ref),\n      )\n      .update({\n        next_update_at: tx.client.config.client.includes('sqlite3')\n          ? tx.raw(`datetime('now', ?)`, [`${interval} seconds`])\n          : tx.raw(`now() + interval '${interval} seconds'`),\n      });\n\n    return {\n      items: items.map(\n        i =>\n          ({\n            id: i.entity_id,\n            entityRef: i.entity_ref,\n            unprocessedEntity: JSON.parse(i.unprocessed_entity) as Entity,\n            processedEntity: i.processed_entity\n              ? (JSON.parse(i.processed_entity) as Entity)\n              : undefined,\n            resultHash: i.result_hash || '',\n            nextUpdateAt: timestampToDateTime(i.next_update_at),\n            lastDiscoveryAt: timestampToDateTime(i.last_discovery_at),\n            state: i.cache ? JSON.parse(i.cache) : undefined,\n            errors: i.errors,\n            locationKey: i.location_key,\n          } as RefreshStateItem),\n      ),\n    };\n  }\n\n  async listAncestors(\n    txOpaque: Transaction,\n    options: ListAncestorsOptions,\n  ): Promise<ListAncestorsResult> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n    const entityRefs = new Array<string>();\n\n    let currentRef = entityRef.toLocaleLowerCase('en-US');\n    for (let depth = 1; depth <= MAX_ANCESTOR_DEPTH; depth += 1) {\n      const rows = await tx<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .where({ target_entity_ref: currentRef })\n        .select();\n\n      if (rows.length === 0) {\n        if (depth === 1) {\n          throw new NotFoundError(`Entity ${currentRef} not found`);\n        }\n        throw new NotFoundError(\n          `Entity ${entityRef} has a broken parent reference chain at ${currentRef}`,\n        );\n      }\n\n      const parentRef = rows.find(r => r.source_entity_ref)?.source_entity_ref;\n      if (!parentRef) {\n        // We've reached the top of the tree which is the entityProvider.\n        // In this case we refresh the entity itself.\n        return { entityRefs };\n      }\n      entityRefs.push(parentRef);\n      currentRef = parentRef;\n    }\n    throw new Error(\n      `Unable receive ancestors for ${entityRef}, reached maximum depth of ${MAX_ANCESTOR_DEPTH}`,\n    );\n  }\n\n  async listParents(\n    txOpaque: Transaction,\n    options: ListParentsOptions,\n  ): Promise<ListParentsResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    const rows = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .where({ target_entity_ref: options.entityRef })\n      .select();\n\n    const entityRefs = rows.map(r => r.source_entity_ref!).filter(Boolean);\n\n    return { entityRefs };\n  }\n\n  async refresh(txOpaque: Transaction, options: RefreshOptions): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n\n    const updateResult = await tx<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRef.toLocaleLowerCase('en-US') })\n      .update({ next_update_at: tx.fn.now() });\n    if (updateResult === 0) {\n      throw new NotFoundError(`Failed to schedule ${entityRef} for refresh`);\n    }\n  }\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  /**\n   * Attempts to update an existing refresh state row, returning true if it was\n   * updated and false if there was no entity with a matching ref and location key.\n   *\n   * Updating the entity will also cause it to be scheduled for immediate processing.\n   */\n  private async updateUnprocessedEntity(\n    tx: Knex.Transaction,\n    entity: Entity,\n    hash: string,\n    locationKey?: string,\n  ): Promise<boolean> {\n    const entityRef = stringifyEntityRef(entity);\n    const serializedEntity = JSON.stringify(entity);\n\n    const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        unprocessed_entity: serializedEntity,\n        unprocessed_hash: hash,\n        location_key: locationKey,\n        last_discovery_at: tx.fn.now(),\n        // We only get to this point if a processed entity actually had any changes, or\n        // if an entity provider requested this mutation, meaning that we can safely\n        // bump the deferred entities to the front of the queue for immediate processing.\n        next_update_at: tx.fn.now(),\n      })\n      .where('entity_ref', entityRef)\n      .andWhere(inner => {\n        if (!locationKey) {\n          return inner.whereNull('location_key');\n        }\n        return inner\n          .where('location_key', locationKey)\n          .orWhereNull('location_key');\n      });\n\n    return refreshResult === 1;\n  }\n\n  /**\n   * Attempts to insert a new refresh state row for the given entity, returning\n   * true if successful and false if there was a conflict.\n   */\n  private async insertUnprocessedEntity(\n    tx: Knex.Transaction,\n    entity: Entity,\n    hash: string,\n    locationKey?: string,\n  ): Promise<boolean> {\n    const entityRef = stringifyEntityRef(entity);\n    const serializedEntity = JSON.stringify(entity);\n\n    try {\n      let query = tx<DbRefreshStateRow>('refresh_state').insert({\n        entity_id: uuid(),\n        entity_ref: entityRef,\n        unprocessed_entity: serializedEntity,\n        unprocessed_hash: hash,\n        errors: '',\n        location_key: locationKey,\n        next_update_at: tx.fn.now(),\n        last_discovery_at: tx.fn.now(),\n      });\n\n      // TODO(Rugvip): only tested towards Postgres and SQLite\n      // We have to do this because the only way to detect if there was a conflict with\n      // SQLite is to catch the error, while Postgres needs to ignore the conflict to not\n      // break the ongoing transaction.\n      if (!tx.client.config.client.includes('sqlite3')) {\n        query = query.onConflict('entity_ref').ignore() as any; // type here does not match runtime\n      }\n\n      // Postgres gives as an object with rowCount, SQLite gives us an array\n      const result: { rowCount?: number; length?: number } = await query;\n      return result.rowCount === 1 || result.length === 1;\n    } catch (error) {\n      // SQLite reached this rather than the rowCount check above\n      if (\n        isError(error) &&\n        error.message.includes('UNIQUE constraint failed')\n      ) {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Checks whether a refresh state exists for the given entity that has a\n   * location key that does not match the provided location key.\n   *\n   * @returns The conflicting key if there is one.\n   */\n  private async checkLocationKeyConflict(\n    tx: Knex.Transaction,\n    entityRef: string,\n    locationKey?: string,\n  ): Promise<string | undefined> {\n    const row = await tx<DbRefreshStateRow>('refresh_state')\n      .select('location_key')\n      .where('entity_ref', entityRef)\n      .first();\n\n    const conflictingKey = row?.location_key;\n\n    // If there's no existing key we can't have a conflict\n    if (!conflictingKey) {\n      return undefined;\n    }\n\n    if (conflictingKey !== locationKey) {\n      return conflictingKey;\n    }\n    return undefined;\n  }\n\n  private deduplicateRelations(rows: DbRelationsRow[]): DbRelationsRow[] {\n    return lodash.uniqBy(\n      rows,\n      r => `${r.source_entity_ref}:${r.target_entity_ref}:${r.type}`,\n    );\n  }\n\n  private async createDelta(\n    tx: Knex.Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<{\n    toAdd: { deferred: DeferredEntity; hash: string }[];\n    toUpsert: { deferred: DeferredEntity; hash: string }[];\n    toRemove: string[];\n  }> {\n    if (options.type === 'delta') {\n      return {\n        toAdd: [],\n        toUpsert: options.added.map(e => ({\n          deferred: e,\n          hash: generateStableHash(e.entity),\n        })),\n        toRemove: options.removed.map(e => stringifyEntityRef(e.entity)),\n      };\n    }\n\n    // Grab all of the existing references from the same source, and their locationKeys as well\n    const oldRefs = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .leftJoin<DbRefreshStateRow>('refresh_state', {\n        target_entity_ref: 'entity_ref',\n      })\n      .where({ source_key: options.sourceKey })\n      .select({\n        target_entity_ref: 'refresh_state_references.target_entity_ref',\n        location_key: 'refresh_state.location_key',\n        unprocessed_hash: 'refresh_state.unprocessed_hash',\n      });\n\n    const items = options.items.map(deferred => ({\n      deferred,\n      ref: stringifyEntityRef(deferred.entity),\n      hash: generateStableHash(deferred.entity),\n    }));\n\n    const oldRefsSet = new Map(\n      oldRefs.map(r => [\n        r.target_entity_ref,\n        {\n          locationKey: r.location_key,\n          oldEntityHash: r.unprocessed_hash,\n        },\n      ]),\n    );\n    const newRefsSet = new Set(items.map(item => item.ref));\n\n    const toAdd = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toUpsert = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toRemove = oldRefs\n      .map(row => row.target_entity_ref)\n      .filter(ref => !newRefsSet.has(ref));\n\n    for (const item of items) {\n      const oldRef = oldRefsSet.get(item.ref);\n      const upsertItem = { deferred: item.deferred, hash: item.hash };\n      if (!oldRef) {\n        // Add any entity that does not exist in the database\n        toAdd.push(upsertItem);\n      } else if (oldRef.locationKey !== item.deferred.locationKey) {\n        // Remove and then re-add any entity that exists, but with a different location key\n        toRemove.push(item.ref);\n        toAdd.push(upsertItem);\n      } else if (oldRef.oldEntityHash !== item.hash) {\n        // Entities with modifications should be pushed through too\n        toUpsert.push(upsertItem);\n      }\n    }\n\n    return { toAdd, toUpsert, toRemove };\n  }\n\n  /**\n   * Add a set of deferred entities for processing.\n   * The entities will be added at the front of the processing queue.\n   */\n  private async addUnprocessedEntities(\n    txOpaque: Transaction,\n    options: {\n      sourceEntityRef: string;\n      entities: DeferredEntity[];\n    },\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n\n    // Keeps track of the entities that we end up inserting to update refresh_state_references afterwards\n    const stateReferences = new Array<string>();\n    const conflictingStateReferences = new Array<string>();\n\n    // Upsert all of the unprocessed entities into the refresh_state table, by\n    // their entity ref.\n    for (const { entity, locationKey } of options.entities) {\n      const entityRef = stringifyEntityRef(entity);\n      const hash = generateStableHash(entity);\n\n      const updated = await this.updateUnprocessedEntity(\n        tx,\n        entity,\n        hash,\n        locationKey,\n      );\n      if (updated) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      const inserted = await this.insertUnprocessedEntity(\n        tx,\n        entity,\n        hash,\n        locationKey,\n      );\n      if (inserted) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      // If the row can't be inserted, we have a conflict, but it could be either\n      // because of a conflicting locationKey or a race with another instance, so check\n      // whether the conflicting entity has the same entityRef but a different locationKey\n      const conflictingKey = await this.checkLocationKeyConflict(\n        tx,\n        entityRef,\n        locationKey,\n      );\n      if (conflictingKey) {\n        this.options.logger.warn(\n          `Detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n        );\n        conflictingStateReferences.push(entityRef);\n      }\n    }\n\n    // Replace all references for the originating entity or source and then create new ones\n    await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n      .whereNotIn('target_entity_ref', conflictingStateReferences)\n      .andWhere({ source_entity_ref: options.sourceEntityRef })\n      .delete();\n    await tx.batchInsert(\n      'refresh_state_references',\n      stateReferences.map(entityRef => ({\n        source_entity_ref: options.sourceEntityRef,\n        target_entity_ref: entityRef,\n      })),\n      BATCH_SIZE,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\n\nexport async function applyDatabaseMigrations(knex: Knex): Promise<void> {\n  const migrationsDir = resolvePackagePath(\n    '@backstage/plugin-catalog-backend',\n    'migrations',\n  );\n\n  await knex.migrate.latest({\n    directory: migrationsDir,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_POLLING_INTERVAL_MS = 1000;\n\ntype Options<T> = {\n  /**\n   * The callback used to load in new tasks. The number of items returned\n   * in the array must be at most `count` number of items, but may be lower.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  loadTasks: (count: number) => Promise<Array<T>>;\n\n  /**\n   * The callback used to process a single item.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  processTask: (item: T) => Promise<void>;\n\n  /**\n   * The target minimum number of items to process in parallel. Once the number\n   * of in-flight tasks reaches this count, more tasks will be loaded in.\n   */\n  lowWatermark: number;\n\n  /**\n   * The maximum number of items to process in parallel.\n   */\n  highWatermark: number;\n\n  /**\n   * The interval at which tasks are polled for in the background when\n   * there aren't enough tasks to load to satisfy the low watermark.\n   *\n   * @default 1000\n   */\n  pollingIntervalMs?: number;\n};\n\n/**\n * Creates a task processing pipeline which continuously loads in tasks to\n * keep the number of parallel in-flight tasks between a low and high watermark.\n *\n * @param options - The options for the pipeline.\n * @returns A stop function which when called halts all processing.\n */\nexport function startTaskPipeline<T>(options: Options<T>) {\n  const {\n    loadTasks,\n    processTask,\n    lowWatermark,\n    highWatermark,\n    pollingIntervalMs = DEFAULT_POLLING_INTERVAL_MS,\n  } = options;\n\n  if (lowWatermark >= highWatermark) {\n    throw new Error('lowWatermark must be lower than highWatermark');\n  }\n\n  let loading = false;\n  let stopped = false;\n  let inFlightCount = 0;\n\n  async function maybeLoadMore() {\n    if (stopped || loading || inFlightCount > lowWatermark) {\n      return;\n    }\n\n    // Once we hit the low watermark we load in enough items to reach the high watermark\n    loading = true;\n    const loadCount = highWatermark - inFlightCount;\n    const loadedItems = await loadTasks(loadCount);\n    loading = false;\n\n    // We might not reach the high watermark here, in case there weren't enough items to load\n    inFlightCount += loadedItems.length;\n    loadedItems.forEach(item => {\n      processTask(item).finally(() => {\n        if (stopped) {\n          return;\n        }\n\n        // For each item we complete we check if it's time to load more\n        inFlightCount -= 1;\n        maybeLoadMore();\n      });\n    });\n\n    // We might have processed some tasks while we where loading, so check if we can load more\n    if (loadedItems.length > 1) {\n      maybeLoadMore();\n    }\n  }\n\n  // This interval makes sure that we load in new items if the loop runs\n  // dry because of the lack of available tasks. As long as there are\n  // enough items to process this will be a noop.\n  const intervalId = setInterval(() => {\n    maybeLoadMore();\n  }, pollingIntervalMs);\n\n  return () => {\n    stopped = true;\n    clearInterval(intervalId);\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { assertError, serializeError } from '@backstage/errors';\nimport { Hash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { Logger } from 'winston';\nimport { ProcessingDatabase, RefreshStateItem } from '../database/types';\nimport { createCounterMetric, createSummaryMetric } from '../util/metrics';\nimport {\n  CatalogProcessingEngine,\n  CatalogProcessingOrchestrator,\n  EntityProcessingResult,\n} from '../processing/types';\nimport { Stitcher } from '../stitching/Stitcher';\nimport { startTaskPipeline } from './TaskPipeline';\n\nconst CACHE_TTL = 5;\n\nexport class DefaultCatalogProcessingEngine implements CatalogProcessingEngine {\n  private readonly tracker = progressTracker();\n  private stopFunc?: () => void;\n\n  constructor(\n    private readonly logger: Logger,\n    private readonly processingDatabase: ProcessingDatabase,\n    private readonly orchestrator: CatalogProcessingOrchestrator,\n    private readonly stitcher: Stitcher,\n    private readonly createHash: () => Hash,\n    private readonly pollingIntervalMs: number = 1000,\n  ) {}\n\n  async start() {\n    if (this.stopFunc) {\n      throw new Error('Processing engine is already started');\n    }\n\n    this.stopFunc = startTaskPipeline<RefreshStateItem>({\n      lowWatermark: 5,\n      highWatermark: 10,\n      pollingIntervalMs: this.pollingIntervalMs,\n      loadTasks: async count => {\n        try {\n          const { items } = await this.processingDatabase.transaction(\n            async tx => {\n              return this.processingDatabase.getProcessableEntities(tx, {\n                processBatchSize: count,\n              });\n            },\n          );\n          return items;\n        } catch (error) {\n          this.logger.warn('Failed to load processing items', error);\n          return [];\n        }\n      },\n      processTask: async item => {\n        const track = this.tracker.processStart(item, this.logger);\n\n        try {\n          const {\n            id,\n            state,\n            unprocessedEntity,\n            entityRef,\n            locationKey,\n            resultHash: previousResultHash,\n          } = item;\n          const result = await this.orchestrator.process({\n            entity: unprocessedEntity,\n            state,\n          });\n\n          track.markProcessorsCompleted(result);\n\n          if (result.ok) {\n            if (stableStringify(state) !== stableStringify(result.state)) {\n              await this.processingDatabase.transaction(async tx => {\n                await this.processingDatabase.updateEntityCache(tx, {\n                  id,\n                  state: {\n                    ttl: CACHE_TTL,\n                    ...result.state,\n                  },\n                });\n              });\n            }\n          } else {\n            const maybeTtl = state?.ttl;\n            const ttl = Number.isInteger(maybeTtl) ? (maybeTtl as number) : 0;\n            await this.processingDatabase.transaction(async tx => {\n              await this.processingDatabase.updateEntityCache(tx, {\n                id,\n                state: ttl > 0 ? { ...state, ttl: ttl - 1 } : {},\n              });\n            });\n          }\n\n          for (const error of result.errors) {\n            // TODO(freben): Try to extract the location out of the unprocessed\n            // entity and add as meta to the log lines\n            this.logger.warn(error.message, {\n              entity: entityRef,\n            });\n          }\n          const errorsString = JSON.stringify(\n            result.errors.map(e => serializeError(e)),\n          );\n\n          let hashBuilder = this.createHash().update(errorsString);\n          if (result.ok) {\n            const { entityRefs: parents } =\n              await this.processingDatabase.transaction(tx =>\n                this.processingDatabase.listParents(tx, {\n                  entityRef,\n                }),\n              );\n\n            hashBuilder = hashBuilder\n              .update(stableStringify({ ...result.completedEntity }))\n              .update(stableStringify([...result.deferredEntities]))\n              .update(stableStringify([...result.relations]))\n              .update(stableStringify([...parents]));\n          }\n\n          const resultHash = hashBuilder.digest('hex');\n          if (resultHash === previousResultHash) {\n            // If nothing changed in our produced outputs, we cannot have any\n            // significant effect on our surroundings; therefore, we just abort\n            // without any updates / stitching.\n            track.markSuccessfulWithNoChanges();\n            return;\n          }\n\n          // If the result was marked as not OK, it signals that some part of the\n          // processing pipeline threw an exception. This can happen both as part of\n          // non-catastrophic things such as due to validation errors, as well as if\n          // something fatal happens inside the processing for other reasons. In any\n          // case, this means we can't trust that anything in the output is okay. So\n          // just store the errors and trigger a stich so that they become visible to\n          // the outside.\n          if (!result.ok) {\n            await this.processingDatabase.transaction(async tx => {\n              await this.processingDatabase.updateProcessedEntityErrors(tx, {\n                id,\n                errors: errorsString,\n                resultHash,\n              });\n            });\n            await this.stitcher.stitch(\n              new Set([stringifyEntityRef(unprocessedEntity)]),\n            );\n            track.markSuccessfulWithErrors();\n            return;\n          }\n\n          result.completedEntity.metadata.uid = id;\n          await this.processingDatabase.transaction(async tx => {\n            await this.processingDatabase.updateProcessedEntity(tx, {\n              id,\n              processedEntity: result.completedEntity,\n              resultHash,\n              errors: errorsString,\n              relations: result.relations,\n              deferredEntities: result.deferredEntities,\n              locationKey,\n            });\n          });\n\n          const setOfThingsToStitch = new Set<string>([\n            stringifyEntityRef(result.completedEntity),\n            ...result.relations.map(relation =>\n              stringifyEntityRef(relation.source),\n            ),\n          ]);\n          await this.stitcher.stitch(setOfThingsToStitch);\n\n          track.markSuccessfulWithChanges(setOfThingsToStitch.size);\n        } catch (error) {\n          assertError(error);\n          track.markFailed(error);\n        }\n      },\n    });\n  }\n\n  async stop() {\n    if (this.stopFunc) {\n      this.stopFunc();\n      this.stopFunc = undefined;\n    }\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction progressTracker() {\n  const stitchedEntities = createCounterMetric({\n    name: 'catalog_stitched_entities_count',\n    help: 'Amount of entities stitched',\n  });\n  const processedEntities = createCounterMetric({\n    name: 'catalog_processed_entities_count',\n    help: 'Amount of entities processed',\n    labelNames: ['result'],\n  });\n  const processingDuration = createSummaryMetric({\n    name: 'catalog_processing_duration_seconds',\n    help: 'Time spent executing the full processing flow',\n    labelNames: ['result'],\n  });\n  const processorsDuration = createSummaryMetric({\n    name: 'catalog_processors_duration_seconds',\n    help: 'Time spent executing catalog processors',\n    labelNames: ['result'],\n  });\n  const processingQueueDelay = createSummaryMetric({\n    name: 'catalog_processing_queue_delay_seconds',\n    help: 'The amount of delay between being scheduled for processing, and the start of actually being processed',\n  });\n\n  function processStart(item: RefreshStateItem, logger: Logger) {\n    logger.debug(`Processing ${item.entityRef}`);\n\n    if (item.nextUpdateAt) {\n      processingQueueDelay.observe(-item.nextUpdateAt.diffNow().as('seconds'));\n    }\n\n    const endOverallTimer = processingDuration.startTimer();\n    const endProcessorsTimer = processorsDuration.startTimer();\n\n    function markProcessorsCompleted(result: EntityProcessingResult) {\n      endProcessorsTimer({ result: result.ok ? 'ok' : 'failed' });\n    }\n\n    function markSuccessfulWithNoChanges() {\n      endOverallTimer({ result: 'unchanged' });\n      processedEntities.inc({ result: 'unchanged' }, 1);\n    }\n\n    function markSuccessfulWithErrors() {\n      endOverallTimer({ result: 'errors' });\n      processedEntities.inc({ result: 'errors' }, 1);\n    }\n\n    function markSuccessfulWithChanges(stitchedCount: number) {\n      endOverallTimer({ result: 'changed' });\n      stitchedEntities.inc(stitchedCount);\n      processedEntities.inc({ result: 'changed' }, 1);\n    }\n\n    function markFailed(error: Error) {\n      processedEntities.inc({ result: 'failed' }, 1);\n      logger.warn(`Processing of ${item.entityRef} failed`, error);\n    }\n\n    return {\n      markProcessorsCompleted,\n      markSuccessfulWithNoChanges,\n      markSuccessfulWithErrors,\n      markSuccessfulWithChanges,\n      markFailed,\n    };\n  }\n\n  return { processStart };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Location } from '@backstage/catalog-client';\nimport {\n  CatalogProcessingOrchestrator,\n  DeferredEntity,\n} from '../processing/types';\nimport { LocationInput, LocationService, LocationStore } from './types';\nimport { locationSpecToMetadataName } from '../util/conversion';\n\nexport class DefaultLocationService implements LocationService {\n  constructor(\n    private readonly store: LocationStore,\n    private readonly orchestrator: CatalogProcessingOrchestrator,\n  ) {}\n\n  async createLocation(\n    input: LocationInput,\n    dryRun: boolean,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    if (dryRun) {\n      return this.dryRunCreateLocation(input);\n    }\n    const location = await this.store.createLocation(input);\n    return { location, entities: [] };\n  }\n\n  listLocations(): Promise<Location[]> {\n    return this.store.listLocations();\n  }\n  getLocation(id: string): Promise<Location> {\n    return this.store.getLocation(id);\n  }\n  deleteLocation(id: string): Promise<void> {\n    return this.store.deleteLocation(id);\n  }\n\n  private async processEntities(\n    unprocessedEntities: DeferredEntity[],\n  ): Promise<Entity[]> {\n    const entities: Entity[] = [];\n    while (unprocessedEntities.length) {\n      const currentEntity = unprocessedEntities.pop();\n      if (!currentEntity) {\n        continue;\n      }\n      const processed = await this.orchestrator.process({\n        entity: currentEntity.entity,\n        state: {}, // we process without the existing cache\n      });\n\n      if (processed.ok) {\n        if (\n          entities.some(\n            e =>\n              stringifyEntityRef(e) ===\n              stringifyEntityRef(processed.completedEntity),\n          )\n        ) {\n          throw new Error(\n            `Duplicate nested entity: ${stringifyEntityRef(\n              processed.completedEntity,\n            )}`,\n          );\n        }\n        unprocessedEntities.push(...processed.deferredEntities);\n        entities.push(processed.completedEntity);\n      } else {\n        throw Error(processed.errors.map(String).join(', '));\n      }\n    }\n    return entities;\n  }\n\n  private async dryRunCreateLocation(\n    spec: LocationInput,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    // Run the existence check in parallel with the processing\n    const existsPromise = this.store\n      .listLocations()\n      .then(locations =>\n        locations.some(l => l.type === spec.type && l.target === spec.target),\n      );\n\n    const entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Location',\n      metadata: {\n        name: locationSpecToMetadataName({\n          type: spec.type,\n          target: spec.target,\n        }),\n        namespace: 'default',\n        annotations: {\n          [ANNOTATION_LOCATION]: `${spec.type}:${spec.target}`,\n          [ANNOTATION_ORIGIN_LOCATION]: `${spec.type}:${spec.target}`,\n        },\n      },\n      spec: {\n        type: spec.type,\n        target: spec.target,\n      },\n    };\n    const unprocessedEntities: DeferredEntity[] = [\n      { entity, locationKey: `${spec.type}:${spec.target}` },\n    ];\n    const entities: Entity[] = await this.processEntities(unprocessedEntities);\n\n    return {\n      exists: await existsPromise,\n      location: { ...spec, id: `${spec.type}:${spec.target}` },\n      entities,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport {\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntitiesSearchFilter,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  EntityFilter,\n  EntityPagination,\n} from '../catalog/types';\nimport {\n  DbFinalEntitiesRow,\n  DbPageInfo,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../database/tables';\n\nfunction parsePagination(input?: EntityPagination): {\n  limit?: number;\n  offset?: number;\n} {\n  if (!input) {\n    return {};\n  }\n\n  let { limit, offset } = input;\n\n  if (input.after !== undefined) {\n    let cursor;\n    try {\n      const json = Buffer.from(input.after, 'base64').toString('utf8');\n      cursor = JSON.parse(json);\n    } catch {\n      throw new InputError('Malformed after cursor, could not be parsed');\n    }\n    if (cursor.limit !== undefined) {\n      if (!Number.isInteger(cursor.limit)) {\n        throw new InputError('Malformed after cursor, limit was not an number');\n      }\n      limit = cursor.limit;\n    }\n    if (cursor.offset !== undefined) {\n      if (!Number.isInteger(cursor.offset)) {\n        throw new InputError('Malformed after cursor, offset was not a number');\n      }\n      offset = cursor.offset;\n    }\n  }\n\n  return { limit, offset };\n}\n\nfunction stringifyPagination(input: { limit: number; offset: number }) {\n  const json = JSON.stringify({ limit: input.limit, offset: input.offset });\n  const base64 = Buffer.from(json, 'utf8').toString('base64');\n  return base64;\n}\n\nfunction addCondition(\n  queryBuilder: Knex.QueryBuilder,\n  db: Knex,\n  filter: EntitiesSearchFilter,\n  negate: boolean = false,\n) {\n  // NOTE(freben): This used to be a set of OUTER JOIN, which may seem to\n  // make a lot of sense. However, it had abysmal performance on sqlite\n  // when datasets grew large, so we're using IN instead.\n  const matchQuery = db<DbSearchRow>('search')\n    .select('entity_id')\n    .where({ key: filter.key.toLowerCase() })\n    .andWhere(function keyFilter() {\n      if (filter.values) {\n        if (filter.values.length === 1) {\n          this.where({ value: filter.values[0].toLowerCase() });\n        } else {\n          this.andWhere(\n            'value',\n            'in',\n            filter.values.map(v => v.toLowerCase()),\n          );\n        }\n      }\n    });\n  queryBuilder.andWhere('entity_id', negate ? 'not in' : 'in', matchQuery);\n}\n\nfunction isEntitiesSearchFilter(\n  filter: EntitiesSearchFilter | EntityFilter,\n): filter is EntitiesSearchFilter {\n  return filter.hasOwnProperty('key');\n}\n\nfunction isOrEntityFilter(\n  filter: { anyOf: EntityFilter[] } | EntityFilter,\n): filter is { anyOf: EntityFilter[] } {\n  return filter.hasOwnProperty('anyOf');\n}\n\nfunction isNegationEntityFilter(\n  filter: { not: EntityFilter } | EntityFilter,\n): filter is { not: EntityFilter } {\n  return filter.hasOwnProperty('not');\n}\n\nfunction parseFilter(\n  filter: EntityFilter,\n  query: Knex.QueryBuilder,\n  db: Knex,\n  negate: boolean = false,\n): Knex.QueryBuilder {\n  if (isEntitiesSearchFilter(filter)) {\n    return query.andWhere(function filterFunction() {\n      addCondition(this, db, filter, negate);\n    });\n  }\n\n  if (isNegationEntityFilter(filter)) {\n    return parseFilter(filter.not, query, db, !negate);\n  }\n\n  return query[negate ? 'andWhereNot' : 'andWhere'](function filterFunction() {\n    if (isOrEntityFilter(filter)) {\n      for (const subFilter of filter.anyOf ?? []) {\n        this.orWhere(subQuery => parseFilter(subFilter, subQuery, db));\n      }\n    } else {\n      for (const subFilter of filter.allOf ?? []) {\n        this.andWhere(subQuery => parseFilter(subFilter, subQuery, db));\n      }\n    }\n  });\n}\n\nexport class DefaultEntitiesCatalog implements EntitiesCatalog {\n  constructor(private readonly database: Knex) {}\n\n  async entities(request?: EntitiesRequest): Promise<EntitiesResponse> {\n    const db = this.database;\n\n    let entitiesQuery = db<DbFinalEntitiesRow>('final_entities');\n    if (request?.filter) {\n      entitiesQuery = parseFilter(request.filter, entitiesQuery, db);\n    }\n\n    // TODO: move final_entities to use entity_ref\n    entitiesQuery = entitiesQuery\n      .select('final_entities.*')\n      .whereNotNull('final_entities.final_entity')\n      .orderBy('entity_id', 'asc');\n\n    const { limit, offset } = parsePagination(request?.pagination);\n    if (limit !== undefined) {\n      entitiesQuery = entitiesQuery.limit(limit + 1);\n    }\n    if (offset !== undefined) {\n      entitiesQuery = entitiesQuery.offset(offset);\n    }\n\n    let rows = await entitiesQuery;\n\n    let pageInfo: DbPageInfo;\n    if (limit === undefined || rows.length <= limit) {\n      pageInfo = { hasNextPage: false };\n    } else {\n      rows = rows.slice(0, -1);\n      pageInfo = {\n        hasNextPage: true,\n        endCursor: stringifyPagination({\n          limit,\n          offset: (offset ?? 0) + limit,\n        }),\n      };\n    }\n\n    let entities: Entity[] = rows.map(e => JSON.parse(e.final_entity!));\n\n    if (request?.fields) {\n      entities = entities.map(e => request.fields!(e));\n    }\n\n    // TODO(freben): This is added as a compatibility guarantee, until we can be\n    // sure that all adopters have re-stitched their entities so that the new\n    // targetRef field is present on them, and that they have stopped consuming\n    // the now-removed old field\n    // TODO(jhaals): Remove this in April 2022\n    for (const entity of entities) {\n      if (entity.relations) {\n        for (const relation of entity.relations as any) {\n          if (!relation.targetRef && relation.target) {\n            // This is the case where an old-form entity, not yet stitched with\n            // the updated code, was in the database\n            relation.targetRef = stringifyEntityRef(relation.target);\n          } else if (!relation.target && relation.targetRef) {\n            // This is the case where a new-form entity, stitched with the\n            // updated code, was in the database but we still want to produce\n            // the old data shape as well for compatibility reasons\n            relation.target = parseEntityRef(relation.targetRef);\n          }\n        }\n      }\n    }\n\n    return {\n      entities,\n      pageInfo,\n    };\n  }\n\n  async removeEntityByUid(uid: string): Promise<void> {\n    // Clear the hashed state of the immediate parents of the deleted entity.\n    // This makes sure that when they get reprocessed, their output is written\n    // down again. The reason for wanting to do this, is that if the user\n    // deletes entities that ARE still emitted by the parent, the parent\n    // processing will still generate the same output hash as always, which\n    // means it'll never try to write down the children again (it assumes that\n    // they already exist). This means that without the code below, the database\n    // never \"heals\" from accidental deletes.\n    await this.database<DbRefreshStateRow>('refresh_state')\n      .update({\n        result_hash: 'child-was-deleted',\n      })\n      .whereIn('entity_ref', function parents(builder) {\n        return builder\n          .from<DbRefreshStateRow>('refresh_state')\n          .innerJoin<DbRefreshStateReferencesRow>('refresh_state_references', {\n            'refresh_state_references.target_entity_ref':\n              'refresh_state.entity_ref',\n          })\n          .where('refresh_state.entity_id', '=', uid)\n          .select('refresh_state_references.source_entity_ref');\n      });\n\n    await this.database<DbRefreshStateRow>('refresh_state')\n      .where('entity_id', uid)\n      .delete();\n  }\n\n  async entityAncestry(rootRef: string): Promise<EntityAncestryResponse> {\n    const [rootRow] = await this.database<DbRefreshStateRow>('refresh_state')\n      .leftJoin<DbFinalEntitiesRow>('final_entities', {\n        'refresh_state.entity_id': 'final_entities.entity_id',\n      })\n      .where('refresh_state.entity_ref', '=', rootRef)\n      .select({\n        entityJson: 'final_entities.final_entity',\n      });\n\n    if (!rootRow) {\n      throw new NotFoundError(`No such entity ${rootRef}`);\n    }\n\n    const rootEntity = JSON.parse(rootRow.entityJson) as Entity;\n    const seenEntityRefs = new Set<string>();\n    const todo = new Array<Entity>();\n    const items = new Array<{ entity: Entity; parentEntityRefs: string[] }>();\n\n    for (\n      let current: Entity | undefined = rootEntity;\n      current;\n      current = todo.pop()\n    ) {\n      const currentRef = stringifyEntityRef(current);\n      seenEntityRefs.add(currentRef);\n\n      const parentRows = await this.database<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .innerJoin<DbRefreshStateRow>('refresh_state', {\n          'refresh_state_references.source_entity_ref':\n            'refresh_state.entity_ref',\n        })\n        .innerJoin<DbFinalEntitiesRow>('final_entities', {\n          'refresh_state.entity_id': 'final_entities.entity_id',\n        })\n        .where('refresh_state_references.target_entity_ref', '=', currentRef)\n        .select({\n          parentEntityRef: 'refresh_state.entity_ref',\n          parentEntityJson: 'final_entities.final_entity',\n        });\n\n      const parentRefs: string[] = [];\n      for (const { parentEntityRef, parentEntityJson } of parentRows) {\n        parentRefs.push(parentEntityRef);\n        if (!seenEntityRefs.has(parentEntityRef)) {\n          seenEntityRefs.add(parentEntityRef);\n          todo.push(JSON.parse(parentEntityJson));\n        }\n      }\n\n      items.push({\n        entity: current,\n        parentEntityRefs: parentRefs,\n      });\n    }\n\n    return {\n      rootEntityRef: stringifyEntityRef(rootEntity),\n      items,\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const { entities } = await this.entities({\n      filter: request.filter,\n      authorizationToken: request.authorizationToken,\n    });\n\n    const facets: EntityFacetsResponse['facets'] = {};\n\n    for (const facet of request.facets) {\n      const values = entities\n        .map(entity => {\n          // TODO(freben): Generalize this code to handle any field that may\n          // have dots in its key?\n          if (facet.startsWith('metadata.annotations.')) {\n            return entity.metadata.annotations?.[\n              facet.substring('metadata.annotations.'.length)\n            ];\n          } else if (facet.startsWith('metadata.labels.')) {\n            return entity.metadata.labels?.[\n              facet.substring('metadata.labels.'.length)\n            ];\n          }\n          return lodash.get(entity, facet);\n        })\n        .flatMap(field => {\n          if (typeof field === 'string') {\n            return [field];\n          } else if (Array.isArray(field)) {\n            return field.filter(i => typeof i === 'string');\n          }\n          return [];\n        })\n        .sort();\n\n      const counts = lodash.countBy(values, lodash.identity);\n\n      facets[facet] = Object.entries(counts).map(([value, count]) => ({\n        value,\n        count,\n      }));\n    }\n\n    return { facets };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport { Logger } from 'winston';\nimport { CatalogProcessorResult, EntityRelationSpec } from '../api';\nimport { locationSpecToLocationEntity } from '../util/conversion';\nimport { DeferredEntity } from './types';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  validateEntityEnvelope,\n} from './util';\n\n/**\n * Helper class for aggregating all of the emitted data from processors.\n */\nexport class ProcessorOutputCollector {\n  private readonly errors = new Array<Error>();\n  private readonly relations = new Array<EntityRelationSpec>();\n  private readonly deferredEntities = new Array<DeferredEntity>();\n  private done = false;\n\n  constructor(\n    private readonly logger: Logger,\n    private readonly parentEntity: Entity,\n  ) {}\n\n  get onEmit(): (i: CatalogProcessorResult) => void {\n    return i => this.receive(i);\n  }\n\n  results() {\n    this.done = true;\n    return {\n      errors: this.errors,\n      relations: this.relations,\n      deferredEntities: this.deferredEntities,\n    };\n  }\n\n  private receive(i: CatalogProcessorResult) {\n    if (this.done) {\n      this.logger.warn(\n        `Item of type \"${\n          i.type\n        }\" was emitted after processing had completed. Stack trace: ${\n          new Error().stack\n        }`,\n      );\n      return;\n    }\n\n    if (i.type === 'entity') {\n      let entity: Entity;\n      const location = stringifyLocationRef(i.location);\n\n      try {\n        entity = validateEntityEnvelope(i.entity);\n      } catch (e) {\n        assertError(e);\n        this.logger.debug(`Envelope validation failed at ${location}, ${e}`);\n        this.errors.push(e);\n        return;\n      }\n\n      // Note that at this point, we have only validated the envelope part of\n      // the entity data. Annotations are not part of that, so we have to be\n      // defensive. If the annotations were malformed (e.g. were not a valid\n      // object), we just skip over this step and let the full entity\n      // validation at the next step of processing catch that.\n      const annotations = entity.metadata.annotations || {};\n      if (typeof annotations === 'object' && !Array.isArray(annotations)) {\n        const originLocation = getEntityOriginLocationRef(this.parentEntity);\n        entity = {\n          ...entity,\n          metadata: {\n            ...entity.metadata,\n            annotations: {\n              ...annotations,\n              [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n              [ANNOTATION_LOCATION]: location,\n            },\n          },\n        };\n      }\n\n      this.deferredEntities.push({ entity, locationKey: location });\n    } else if (i.type === 'location') {\n      const entity = locationSpecToLocationEntity(\n        i.location,\n        this.parentEntity,\n      );\n      const locationKey = getEntityLocationRef(entity);\n      this.deferredEntities.push({ entity, locationKey });\n    } else if (i.type === 'relation') {\n      this.relations.push(i.relation);\n    } else if (i.type === 'error') {\n      this.errors.push(i.error);\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { CatalogProcessor, CatalogProcessorCache } from '../api';\nimport { isObject } from './util';\n\nclass SingleProcessorSubCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  collect(): JsonObject | undefined {\n    return this.newState ?? this.existingState;\n  }\n}\n\nclass SingleProcessorCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n  private subCaches: Map<string, SingleProcessorSubCache> = new Map();\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  withKey(key: string) {\n    const existingSubCache = this.subCaches.get(key);\n    if (existingSubCache) {\n      return existingSubCache;\n    }\n    const existing = this.existingState?.[key];\n    const subCache = new SingleProcessorSubCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.subCaches.set(key, subCache);\n    return subCache;\n  }\n\n  collect(): JsonObject | undefined {\n    let obj = this.newState ?? this.existingState;\n    for (const [key, subCache] of this.subCaches) {\n      const subCacheValue = subCache.collect();\n      if (subCacheValue) {\n        obj = { ...obj, [key]: subCacheValue };\n      }\n    }\n    return obj;\n  }\n}\n\nexport class ProcessorCacheManager {\n  private caches = new Map<string, SingleProcessorCache>();\n\n  constructor(private readonly existingState: JsonObject) {}\n\n  forProcessor(\n    processor: CatalogProcessor,\n    key?: string,\n  ): CatalogProcessorCache {\n    // constructor name will be deprecated in the future when we make `getProcessorName` required in the implementation\n    const name = processor.getProcessorName();\n    const cache = this.caches.get(name);\n    if (cache) {\n      return key ? cache.withKey(key) : cache;\n    }\n\n    const existing = this.existingState[name];\n\n    const newCache = new SingleProcessorCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.caches.set(name, newCache);\n    return key ? newCache.withKey(key) : newCache;\n  }\n\n  collect(): JsonObject {\n    const result: JsonObject = {};\n    for (const [key, value] of this.caches.entries()) {\n      result[key] = value.collect();\n    }\n\n    return result;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  EntityPolicy,\n  LocationEntity,\n  parseLocationRef,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport {\n  assertError,\n  ConflictError,\n  InputError,\n  NotAllowedError,\n} from '@backstage/errors';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  LocationSpec,\n  processingResult,\n} from '../api';\nimport {\n  CatalogProcessingOrchestrator,\n  EntityProcessingRequest,\n  EntityProcessingResult,\n} from './types';\nimport { ProcessorOutputCollector } from './ProcessorOutputCollector';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  isLocationEntity,\n  toAbsoluteUrl,\n  validateEntity,\n  validateEntityEnvelope,\n  isObject,\n} from './util';\nimport { CatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { ProcessorCacheManager } from './ProcessorCacheManager';\n\ntype Context = {\n  entityRef: string;\n  location: LocationSpec;\n  originLocation: LocationSpec;\n  collector: ProcessorOutputCollector;\n  cache: ProcessorCacheManager;\n};\n\n/** @public */\nexport class DefaultCatalogProcessingOrchestrator\n  implements CatalogProcessingOrchestrator\n{\n  constructor(\n    private readonly options: {\n      processors: CatalogProcessor[];\n      integrations: ScmIntegrationRegistry;\n      logger: Logger;\n      parser: CatalogProcessorParser;\n      policy: EntityPolicy;\n      rulesEnforcer: CatalogRulesEnforcer;\n    },\n  ) {}\n\n  async process(\n    request: EntityProcessingRequest,\n  ): Promise<EntityProcessingResult> {\n    return this.processSingleEntity(request.entity, request.state);\n  }\n\n  private async processSingleEntity(\n    unprocessedEntity: Entity,\n    state: JsonValue | undefined,\n  ): Promise<EntityProcessingResult> {\n    const collector = new ProcessorOutputCollector(\n      this.options.logger,\n      unprocessedEntity,\n    );\n\n    // Cache that is scoped to the entity and processor\n    const cache = new ProcessorCacheManager(\n      isObject(state) && isObject(state.cache) ? state.cache : {},\n    );\n\n    try {\n      // This will be checked and mutated step by step below\n      let entity: Entity = unprocessedEntity;\n\n      // NOTE: At this early point, we can only rely on the envelope having to\n      // be valid; full entity + kind validation happens after the (potentially\n      // mutative) pre-steps. This means that the code below can't make a lot\n      // of assumptions about the data despite it using the Entity type.\n      try {\n        validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new InputError(\n          `Entity envelope failed validation before processing`,\n          e,\n        );\n      }\n\n      // TODO: which one do we actually use for the location?\n      // source-location? - maybe probably doesn't exist yet?\n      const context: Context = {\n        entityRef: stringifyEntityRef(entity),\n        location: parseLocationRef(getEntityLocationRef(entity)),\n        originLocation: parseLocationRef(getEntityOriginLocationRef(entity)),\n        cache,\n        collector,\n      };\n\n      // Run the steps\n      entity = await this.runPreProcessStep(entity, context);\n      entity = await this.runPolicyStep(entity);\n      await this.runValidateStep(entity, context);\n      if (isLocationEntity(entity)) {\n        await this.runSpecialLocationStep(entity, context);\n      }\n      entity = await this.runPostProcessStep(entity, context);\n\n      // Check that any emitted entities are permitted to originate from that\n      // particular location according to the catalog rules\n      const collectorResults = context.collector.results();\n      for (const deferredEntity of collectorResults.deferredEntities) {\n        if (\n          !this.options.rulesEnforcer.isAllowed(\n            deferredEntity.entity,\n            context.originLocation,\n          )\n        ) {\n          throw new NotAllowedError(\n            `Entity ${stringifyEntityRef(\n              deferredEntity.entity,\n            )} at ${stringifyLocationRef(\n              context.location,\n            )}, originated at ${stringifyLocationRef(\n              context.originLocation,\n            )}, is not of an allowed kind for that location`,\n          );\n        }\n      }\n\n      return {\n        ...collectorResults,\n        completedEntity: entity,\n        state: { cache: cache.collect() },\n        ok: collectorResults.errors.length === 0,\n      };\n    } catch (error) {\n      assertError(error);\n      return {\n        ok: false,\n        errors: collector.results().errors.concat(error),\n      };\n    }\n  }\n\n  // Pre-process phase, used to populate entities with data that is required\n  // during the main processing step\n  private async runPreProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    let res = entity;\n\n    for (const processor of this.options.processors) {\n      if (processor.preProcessEntity) {\n        try {\n          res = await processor.preProcessEntity(\n            res,\n            context.location,\n            context.collector.onEmit,\n            context.originLocation,\n            context.cache.forProcessor(processor),\n          );\n        } catch (e) {\n          throw new InputError(\n            `Processor ${processor.constructor.name} threw an error while preprocessing`,\n            e,\n          );\n        }\n      }\n    }\n\n    return res;\n  }\n\n  /**\n   * Enforce entity policies making sure that entities conform to a general schema\n   */\n  private async runPolicyStep(entity: Entity): Promise<Entity> {\n    let policyEnforcedEntity: Entity | undefined;\n\n    try {\n      policyEnforcedEntity = await this.options.policy.enforce(entity);\n    } catch (e) {\n      throw new InputError('Policy check failed', e);\n    }\n\n    if (!policyEnforcedEntity) {\n      throw new Error('Policy unexpectedly returned no data');\n    }\n\n    return policyEnforcedEntity;\n  }\n\n  /**\n   * Validate the given entity\n   */\n  private async runValidateStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<void> {\n    // Double check that none of the previous steps tried to change something\n    // related to the entity ref, which would break downstream\n    if (stringifyEntityRef(entity) !== context.entityRef) {\n      throw new ConflictError(\n        'Fatal: The entity kind, namespace, or name changed during processing',\n      );\n    }\n\n    // Validate that the end result is a valid Entity at all\n    try {\n      validateEntity(entity);\n    } catch (e) {\n      throw new ConflictError(\n        `Entity envelope failed validation after preprocessing`,\n        e,\n      );\n    }\n\n    let foundKind = false;\n\n    for (const processor of this.options.processors) {\n      if (processor.validateEntityKind) {\n        try {\n          foundKind = await processor.validateEntityKind(entity);\n          if (foundKind) {\n            // TODO(freben): It would make sense to keep running, so that\n            // multiple processors could have a go at making checks. For\n            // example, an org may want to add additional rules on top of the\n            // provided ones. But that would be a breaking change, so we'll\n            // postpone that to a future processors rewrite.\n            break;\n          }\n        } catch (e) {\n          throw new InputError(\n            `Processor ${processor.constructor.name} threw an error while validating the entity`,\n            e,\n          );\n        }\n      }\n    }\n\n    if (!foundKind) {\n      throw new InputError(\n        'No processor recognized the entity as valid, possibly caused by a foreign kind or apiVersion',\n      );\n    }\n  }\n\n  /**\n   * Backwards compatible processing of location entities\n   */\n  private async runSpecialLocationStep(\n    entity: LocationEntity,\n    context: Context,\n  ): Promise<void> {\n    const { type = context.location.type, presence = 'required' } = entity.spec;\n    const targets = new Array<string>();\n    if (entity.spec.target) {\n      targets.push(entity.spec.target);\n    }\n    if (entity.spec.targets) {\n      targets.push(...entity.spec.targets);\n    }\n\n    for (const maybeRelativeTarget of targets) {\n      if (type === 'file' && maybeRelativeTarget.endsWith(path.sep)) {\n        context.collector.onEmit(\n          processingResult.inputError(\n            context.location,\n            `LocationEntityProcessor cannot handle ${type} type location with target ${context.location.target} that ends with a path separator`,\n          ),\n        );\n        continue;\n      }\n      const target = toAbsoluteUrl(\n        this.options.integrations,\n        context.location,\n        type,\n        maybeRelativeTarget,\n      );\n\n      let didRead = false;\n      for (const processor of this.options.processors) {\n        if (processor.readLocation) {\n          try {\n            const read = await processor.readLocation(\n              {\n                type,\n                target,\n                presence,\n              },\n              presence === 'optional',\n              context.collector.onEmit,\n              this.options.parser,\n              context.cache.forProcessor(processor, target),\n            );\n            if (read) {\n              didRead = true;\n              break;\n            }\n          } catch (e) {\n            throw new InputError(\n              `Processor ${processor.constructor.name} threw an error while reading ${type}:${target}`,\n              e,\n            );\n          }\n        }\n      }\n      if (!didRead) {\n        throw new InputError(\n          `No processor was able to handle reading of ${type}:${target}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Main processing step of the entity\n   */\n  private async runPostProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    let res = entity;\n\n    for (const processor of this.options.processors) {\n      if (processor.postProcessEntity) {\n        try {\n          res = await processor.postProcessEntity(\n            res,\n            context.location,\n            context.collector.onEmit,\n            context.cache.forProcessor(processor),\n          );\n        } catch (e) {\n          throw new InputError(\n            `Processor ${processor.constructor.name} threw an error while postprocessing`,\n            e,\n          );\n        }\n      }\n    }\n\n    return res;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, DEFAULT_NAMESPACE } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport { DbSearchRow } from '../database/tables';\n\n// These are excluded in the generic loop, either because they do not make sense\n// to index, or because they are special-case always inserted whether they are\n// null or not\nconst SPECIAL_KEYS = [\n  'attachments',\n  'relations',\n  'status',\n  'metadata.name',\n  'metadata.namespace',\n  'metadata.uid',\n  'metadata.etag',\n];\n\n// The maximum length allowed for search values. These columns are indexed, and\n// database engines do not like to index on massive values. For example,\n// postgres will balk after 8191 byte line sizes.\nconst MAX_KEY_LENGTH = 200;\nconst MAX_VALUE_LENGTH = 200;\n\ntype Kv = {\n  key: string;\n  value: unknown;\n};\n\n// Helper for traversing through a nested structure and outputting a list of\n// path->value entries of the leaves.\n//\n// For example, this yaml structure\n//\n// a: 1\n// b:\n//   c: null\n//   e: [f, g]\n// h:\n//  - i: 1\n//    j: k\n//  - i: 2\n//    j: l\n//\n// will result in\n//\n// \"a\", 1\n// \"b.c\", null\n// \"b.e\": \"f\"\n// \"b.e.f\": true\n// \"b.e\": \"g\"\n// \"b.e.g\": true\n// \"h.i\": 1\n// \"h.j\": \"k\"\n// \"h.i\": 2\n// \"h.j\": \"l\"\nexport function traverse(root: unknown): Kv[] {\n  const output: Kv[] = [];\n\n  function visit(path: string, current: unknown) {\n    if (SPECIAL_KEYS.includes(path)) {\n      return;\n    }\n\n    // empty or scalar\n    if (\n      current === undefined ||\n      current === null ||\n      ['string', 'number', 'boolean'].includes(typeof current)\n    ) {\n      output.push({ key: path, value: current });\n      return;\n    }\n\n    // unknown\n    if (typeof current !== 'object') {\n      return;\n    }\n\n    // array\n    if (Array.isArray(current)) {\n      for (const item of current) {\n        // NOTE(freben): The reason that these are output in two different ways,\n        // is to support use cases where you want to express that MORE than one\n        // tag is present in a list. Since the EntityFilters structure is a\n        // record, you can't have several entries of the same key. Therefore\n        // you will have to match on\n        //\n        // { \"a.b\": [\"true\"], \"a.c\": [\"true\"] }\n        //\n        // rather than\n        //\n        // { \"a\": [\"b\", \"c\"] }\n        //\n        // because the latter means EITHER b or c has to be present.\n        visit(path, item);\n        if (typeof item === 'string') {\n          output.push({ key: `${path}.${item}`, value: true });\n        }\n      }\n      return;\n    }\n\n    // object\n    for (const [key, value] of Object.entries(current!)) {\n      visit(path ? `${path}.${key}` : key, value);\n    }\n  }\n\n  visit('', root);\n\n  return output;\n}\n\n// Translates a number of raw data rows to search table rows\nexport function mapToRows(input: Kv[], entityId: string): DbSearchRow[] {\n  const result: DbSearchRow[] = [];\n\n  for (const { key: rawKey, value: rawValue } of input) {\n    const key = rawKey.toLocaleLowerCase('en-US');\n    if (rawValue === undefined || rawValue === null) {\n      result.push({ entity_id: entityId, key, value: null });\n    } else {\n      const value = String(rawValue).toLocaleLowerCase('en-US');\n      if (key.length <= MAX_KEY_LENGTH && value.length <= MAX_VALUE_LENGTH) {\n        result.push({ entity_id: entityId, key, value });\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Generates all of the search rows that are relevant for this entity.\n *\n * @param entityId - The uid of the entity\n * @param entity - The entity\n * @returns A list of entity search rows\n */\nexport function buildEntitySearch(\n  entityId: string,\n  entity: Entity,\n): DbSearchRow[] {\n  // Visit the base structure recursively\n  const raw = traverse(entity);\n\n  // Start with some special keys that are always present because you want to\n  // be able to easily search for null specifically\n  raw.push({ key: 'metadata.name', value: entity.metadata.name });\n  raw.push({ key: 'metadata.namespace', value: entity.metadata.namespace });\n  raw.push({ key: 'metadata.uid', value: entity.metadata.uid });\n\n  // Namespace not specified has the default value \"default\", so we want to\n  // match on that as well\n  if (!entity.metadata.namespace) {\n    raw.push({ key: 'metadata.namespace', value: DEFAULT_NAMESPACE });\n  }\n\n  // Visit relations\n  for (const relation of entity.relations ?? []) {\n    raw.push({\n      key: `relations.${relation.type}`,\n      value: relation.targetRef,\n    });\n  }\n\n  // This validates that there are no keys that vary only in casing, such\n  // as `spec.foo` and `spec.Foo`.\n  const keys = new Set(raw.map(r => r.key));\n  const lowerKeys = new Set(raw.map(r => r.key.toLocaleLowerCase('en-US')));\n  if (keys.size !== lowerKeys.size) {\n    const difference = [];\n    for (const key of keys) {\n      const lower = key.toLocaleLowerCase('en-US');\n      if (!lowerKeys.delete(lower)) {\n        difference.push(lower);\n      }\n    }\n    const badKeys = `'${difference.join(\"', '\")}'`;\n    throw new InputError(\n      `Entity has duplicate keys that vary only in casing, ${badKeys}`,\n    );\n  }\n\n  return mapToRows(raw, entityId);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nexport const BATCH_SIZE = 50;\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ENTITY_STATUS_CATALOG_PROCESSING_TYPE } from '@backstage/catalog-client';\nimport {\n  AlphaEntity,\n  EntityRelation,\n  EntityStatusItem,\n} from '@backstage/catalog-model';\nimport { SerializedError, stringifyError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { uniqBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  DbFinalEntitiesRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../database/tables';\nimport { buildEntitySearch } from './buildEntitySearch';\nimport { BATCH_SIZE, generateStableHash } from './util';\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport class Stitcher {\n  constructor(\n    private readonly database: Knex,\n    private readonly logger: Logger,\n  ) {}\n\n  async stitch(entityRefs: Set<string>) {\n    for (const entityRef of entityRefs) {\n      try {\n        await this.stitchOne(entityRef);\n      } catch (error) {\n        this.logger.error(\n          `Failed to stitch ${entityRef}, ${stringifyError(error)}`,\n        );\n      }\n    }\n  }\n\n  private async stitchOne(entityRef: string): Promise<void> {\n    const entityResult = await this.database<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRef })\n      .limit(1)\n      .select('entity_id');\n    if (!entityResult.length) {\n      // Entity does no exist in refresh state table, no stitching required.\n      return;\n    }\n\n    // Insert stitching ticket that will be compared before inserting the final entity.\n    const ticket = uuid();\n    await this.database<DbFinalEntitiesRow>('final_entities')\n      .insert({\n        entity_id: entityResult[0].entity_id,\n        hash: '',\n        stitch_ticket: ticket,\n      })\n      .onConflict('entity_id')\n      .merge(['stitch_ticket']);\n\n    // Selecting from refresh_state and final_entities should yield exactly\n    // one row (except in abnormal cases where the stitch was invoked for\n    // something that didn't exist at all, in which case it's zero rows).\n    // The join with the temporary incoming_references still gives one row.\n    // The only result set \"expanding\" join is the one with relations, so\n    // the output should be at least one row (if zero or one relations were\n    // found), or at most the same number of rows as relations.\n    const result: Array<{\n      entityId: string;\n      processedEntity?: string;\n      errors: string;\n      incomingReferenceCount: string | number;\n      previousHash?: string;\n      relationType?: string;\n      relationTarget?: string;\n    }> = await this.database\n      .with('incoming_references', function incomingReferences(builder) {\n        return builder\n          .from('refresh_state_references')\n          .where({ target_entity_ref: entityRef })\n          .count({ count: '*' });\n      })\n      .select({\n        entityId: 'refresh_state.entity_id',\n        processedEntity: 'refresh_state.processed_entity',\n        errors: 'refresh_state.errors',\n        incomingReferenceCount: 'incoming_references.count',\n        previousHash: 'final_entities.hash',\n        relationType: 'relations.type',\n        relationTarget: 'relations.target_entity_ref',\n      })\n      .from('refresh_state')\n      .where({ 'refresh_state.entity_ref': entityRef })\n      .crossJoin(this.database.raw('incoming_references'))\n      .leftOuterJoin('final_entities', {\n        'final_entities.entity_id': 'refresh_state.entity_id',\n      })\n      .leftOuterJoin('relations', {\n        'relations.source_entity_ref': 'refresh_state.entity_ref',\n      })\n      .orderBy('relationType', 'asc')\n      .orderBy('relationTarget', 'asc');\n\n    // If there were no rows returned, it would mean that there was no\n    // matching row even in the refresh_state. This can happen for example\n    // if we emit a relation to something that hasn't been ingested yet.\n    // It's safe to ignore this stitch attempt in that case.\n    if (!result.length) {\n      this.logger.error(\n        `Unable to stitch ${entityRef}, item does not exist in refresh state table`,\n      );\n      return;\n    }\n\n    const {\n      entityId,\n      processedEntity,\n      errors,\n      incomingReferenceCount,\n      previousHash,\n    } = result[0];\n\n    // If there was no processed entity in place, the target hasn't been\n    // through the processing steps yet. It's safe to ignore this stitch\n    // attempt in that case, since another stitch will be triggered when\n    // that processing has finished.\n    if (!processedEntity) {\n      this.logger.debug(\n        `Unable to stitch ${entityRef}, the entity has not yet been processed`,\n      );\n      return;\n    }\n\n    // Grab the processed entity and stitch all of the relevant data into\n    // it\n    const entity = JSON.parse(processedEntity) as AlphaEntity;\n    const isOrphan = Number(incomingReferenceCount) === 0;\n    let statusItems: EntityStatusItem[] = [];\n\n    if (isOrphan) {\n      this.logger.debug(`${entityRef} is an orphan`);\n      entity.metadata.annotations = {\n        ...entity.metadata.annotations,\n        ['backstage.io/orphan']: 'true',\n      };\n    }\n    if (errors) {\n      const parsedErrors = JSON.parse(errors) as SerializedError[];\n      if (Array.isArray(parsedErrors) && parsedErrors.length) {\n        statusItems = parsedErrors.map(e => ({\n          type: ENTITY_STATUS_CATALOG_PROCESSING_TYPE,\n          level: 'error',\n          message: `${e.name}: ${e.message}`,\n          error: e,\n        }));\n      }\n    }\n\n    // TODO: entityRef is lower case and should be uppercase in the final\n    // result\n    const uniqueRelationRows = uniqBy(\n      result,\n      r => `${r.relationType}:${r.relationTarget}`,\n    );\n    entity.relations = uniqueRelationRows\n      .filter(row => row.relationType /* exclude null row, if relevant */)\n      .map<EntityRelation>(row => ({\n        type: row.relationType!,\n        targetRef: row.relationTarget!,\n      }));\n    if (statusItems.length) {\n      entity.status = {\n        ...entity.status,\n        items: [...(entity.status?.items ?? []), ...statusItems],\n      };\n    }\n\n    // If the output entity was actually not changed, just abort\n    const hash = generateStableHash(entity);\n    if (hash === previousHash) {\n      this.logger.debug(`Skipped stitching of ${entityRef}, no changes`);\n      return;\n    }\n\n    entity.metadata.uid = entityId;\n    if (!entity.metadata.etag) {\n      // If the original data source did not have its own etag handling,\n      // use the hash as a good-quality etag\n      entity.metadata.etag = hash;\n    }\n\n    // This may throw if the entity is invalid, so we call it before\n    // the final_entities write, even though we may end up not needing\n    // to write the search index.\n    const searchEntries = buildEntitySearch(entityId, entity);\n\n    const rowsChanged = await this.database<DbFinalEntitiesRow>(\n      'final_entities',\n    )\n      .update({\n        final_entity: JSON.stringify(entity),\n        hash,\n      })\n      .where('entity_id', entityId)\n      .where('stitch_ticket', ticket)\n      .onConflict('entity_id')\n      .merge(['final_entity', 'hash']);\n\n    if (rowsChanged.length === 0) {\n      this.logger.debug(\n        `Entity ${entityRef} is already processed, skipping write.`,\n      );\n      return;\n    }\n\n    // TODO(freben): Search will probably need a similar safeguard against\n    // race conditions like the final_entities ticket handling above.\n    // Otherwise, it can be the case that:\n    // A writes the entity ->\n    // B writes the entity ->\n    // B writes search ->\n    // A writes search\n    await this.database<DbSearchRow>('search')\n      .where({ entity_id: entityId })\n      .delete();\n    await this.database.batchInsert('search', searchEntries, BATCH_SIZE);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntitiesSearchFilter, EntityFilter } from '../../catalog';\n\n/**\n * Forms a full EntityFilter based on a single key-value(s) object.\n */\nexport function basicEntityFilter(\n  items: Record<string, string | string[]>,\n): EntityFilter {\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const [key, value] of Object.entries(items)) {\n    const values = [value].flat();\n\n    const f =\n      key in filtersByKey\n        ? filtersByKey[key]\n        : (filtersByKey[key] = { key, values: [] });\n\n    f.values!.push(...values);\n  }\n\n  return { anyOf: [{ allOf: Object.values(filtersByKey) }] };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string that can\n * be parsed as an integer.\n */\nexport function parseIntegerParam(\n  param: unknown,\n  ctx: string,\n): number | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not an integer on string form`);\n  }\n\n  const parsed = parseInt(param, 10);\n  if (!Number.isInteger(parsed) || String(parsed) !== param) {\n    throw new InputError(`Invalid ${ctx}, not an integer`);\n  }\n\n  return parsed;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string.\n */\nexport function parseStringParam(\n  param: unknown,\n  ctx: string,\n): string | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return param;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a single string or\n * an array of strings, and returns as an array.\n */\nexport function parseStringsParam(\n  param: unknown,\n  ctx: string,\n): string[] | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  const array = [param].flat();\n  if (array.some(p => typeof p !== 'string')) {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return array as string[];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntitiesSearchFilter, EntityFilter } from '../../catalog';\nimport { parseStringsParam } from './common';\n\n/**\n * Parses the filtering part of a query, like\n * /entities?filter=metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterParams(\n  params: Record<string, unknown>,\n): EntityFilter | undefined {\n  // Each filter string is on the form a=b,c=d\n  const filterStrings = parseStringsParam(params.filter, 'filter');\n  if (!filterStrings) {\n    return undefined;\n  }\n\n  // Outer array: \"any of the inner ones\"\n  // Inner arrays: \"all of these must match\"\n  const filters = filterStrings.map(parseEntityFilterString).filter(Boolean);\n  if (!filters.length) {\n    return undefined;\n  }\n\n  return { anyOf: filters.map(f => ({ allOf: f! })) };\n}\n\n/**\n * Parses a single filter string as seen in a filter query, for example\n * metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterString(\n  filterString: string,\n): EntitiesSearchFilter[] | undefined {\n  const statements = filterString\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n\n  if (!statements.length) {\n    return undefined;\n  }\n\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const statement of statements) {\n    const equalsIndex = statement.indexOf('=');\n\n    const key =\n      equalsIndex === -1 ? statement : statement.substr(0, equalsIndex).trim();\n    const value =\n      equalsIndex === -1 ? undefined : statement.substr(equalsIndex + 1).trim();\n    if (!key) {\n      throw new InputError(\n        `Invalid filter, '${statement}' is not a valid statement (expected a string on the form a=b or a= or a)`,\n      );\n    }\n\n    const f =\n      key in filtersByKey ? filtersByKey[key] : (filtersByKey[key] = { key });\n\n    if (value !== undefined) {\n      f.values = f.values || [];\n      f.values.push(value);\n    }\n  }\n\n  return Object.values(filtersByKey);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityPagination } from '../../catalog/types';\nimport { parseIntegerParam, parseStringParam } from './common';\n\n/**\n * Parses the pagination related parameters out of a query, e.g.\n * /entities?offset=100&limit=10\n */\nexport function parseEntityPaginationParams(\n  params: Record<string, unknown>,\n): EntityPagination | undefined {\n  const offset = parseIntegerParam(params.offset, 'offset');\n  const limit = parseIntegerParam(params.limit, 'limit');\n  const after = parseStringParam(params.after, 'after');\n\n  if (offset === undefined && limit === undefined && after === undefined) {\n    return undefined;\n  }\n\n  if (offset !== undefined && offset < 0) {\n    throw new InputError(`Invalid offset, must be zero or greater`);\n  }\n  if (limit !== undefined && limit <= 0) {\n    throw new InputError(`Invalid limit, must be greater than zero`);\n  }\n  if (after !== undefined && !after) {\n    throw new InputError(`Invalid after, must not be empty`);\n  }\n\n  return {\n    ...(offset !== undefined ? { offset } : {}),\n    ...(limit !== undefined ? { limit } : {}),\n    ...(after !== undefined ? { after } : {}),\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport lodash from 'lodash';\nimport { RecursivePartial } from '../../util/RecursivePartial';\nimport { parseStringsParam } from './common';\n\nexport function parseEntityTransformParams(\n  params: Record<string, unknown>,\n): ((entity: Entity) => Entity) | undefined {\n  const fieldsStrings = parseStringsParam(params.fields, 'fields');\n  if (!fieldsStrings) {\n    return undefined;\n  }\n\n  const fields = fieldsStrings\n    .map(s => s.split(','))\n    .flat()\n    .map(s => s.trim())\n    .filter(Boolean);\n\n  if (!fields.length) {\n    return undefined;\n  }\n\n  if (fields.some(f => f.includes('['))) {\n    throw new InputError('invalid fields, array type fields are not supported');\n  }\n\n  return input => {\n    const output: RecursivePartial<Entity> = {};\n\n    for (const field of fields) {\n      const value = lodash.get(input, field);\n      if (value !== undefined) {\n        lodash.set(output, field, value);\n      }\n    }\n\n    return output as Entity;\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotAllowedError } from '@backstage/errors';\nimport { Request } from 'express';\nimport lodash from 'lodash';\nimport { z } from 'zod';\n\nexport async function requireRequestBody(req: Request): Promise<unknown> {\n  const contentType = req.header('content-type');\n  if (!contentType) {\n    throw new InputError('Content-Type missing');\n  } else if (!contentType.match(/^application\\/json($|;)/)) {\n    throw new InputError('Illegal Content-Type');\n  }\n\n  const body = req.body;\n  if (!body) {\n    throw new InputError('Missing request body');\n  } else if (!lodash.isPlainObject(body)) {\n    throw new InputError('Expected body to be a JSON object');\n  } else if (Object.keys(body).length === 0) {\n    // Because of how express.json() translates the empty body to {}\n    throw new InputError('Empty request body');\n  }\n\n  return body;\n}\n\nexport const locationInput = z\n  .object({\n    type: z.string(),\n    target: z.string(),\n    presence: z.literal('required').or(z.literal('optional')).optional(),\n  })\n  .strict(); // no unknown keys;\n\nexport async function validateRequestBody<T>(\n  req: Request,\n  schema: z.Schema<T>,\n): Promise<T> {\n  const body = await requireRequestBody(req);\n  try {\n    return await schema.parse(body);\n  } catch (e) {\n    throw new InputError(`Malformed request: ${e}`);\n  }\n}\n\nexport function disallowReadonlyMode(readonly: boolean) {\n  if (readonly) {\n    throw new NotAllowedError('This operation not allowed in readonly mode');\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\n\n/**\n * Parses the facets part of a facet query, like\n * /entity-facets?filter=metadata.namespace=default,kind=Component&facet=metadata.namespace\n */\nexport function parseEntityFacetParams(\n  params: Record<string, unknown>,\n): string[] {\n  // Each facet string is on the form a.b.c\n  const facetStrings = parseStringsParam(params.facet, 'facet');\n  if (facetStrings) {\n    const filtered = facetStrings.filter(Boolean);\n    if (filtered.length) {\n      return filtered;\n    }\n  }\n\n  throw new InputError('Missing facet parameter');\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { NotFoundError } from '@backstage/errors';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport yn from 'yn';\nimport { EntitiesCatalog } from '../catalog/types';\nimport { LocationAnalyzer } from '../ingestion/types';\nimport {\n  basicEntityFilter,\n  parseEntityFilterParams,\n  parseEntityPaginationParams,\n  parseEntityTransformParams,\n} from './request';\nimport {\n  disallowReadonlyMode,\n  locationInput,\n  validateRequestBody,\n} from './util';\nimport { RefreshOptions, LocationService, RefreshService } from './types';\nimport { z } from 'zod';\nimport { parseEntityFacetParams } from './request/parseEntityFacetParams';\n\n/**\n * Options used by {@link createRouter}.\n *\n * @public\n */\nexport interface RouterOptions {\n  entitiesCatalog?: EntitiesCatalog;\n  locationAnalyzer?: LocationAnalyzer;\n  locationService: LocationService;\n  refreshService?: RefreshService;\n  logger: Logger;\n  config: Config;\n  permissionIntegrationRouter?: express.Router;\n}\n\n/**\n * Creates a catalog router.\n *\n * @public\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const {\n    entitiesCatalog,\n    locationAnalyzer,\n    locationService,\n    refreshService,\n    config,\n    logger,\n    permissionIntegrationRouter,\n  } = options;\n\n  const router = Router();\n  router.use(express.json());\n\n  const readonlyEnabled =\n    config.getOptionalBoolean('catalog.readonly') || false;\n  if (readonlyEnabled) {\n    logger.info('Catalog is running in readonly mode');\n  }\n\n  if (refreshService) {\n    router.post('/refresh', async (req, res) => {\n      const refreshOptions: RefreshOptions = req.body;\n      refreshOptions.authorizationToken = getBearerToken(\n        req.header('authorization'),\n      );\n\n      await refreshService.refresh(refreshOptions);\n      res.status(200).send();\n    });\n  }\n\n  if (permissionIntegrationRouter) {\n    router.use(permissionIntegrationRouter);\n  }\n\n  if (entitiesCatalog) {\n    router\n      .get('/entities', async (req, res) => {\n        const { entities, pageInfo } = await entitiesCatalog.entities({\n          filter: parseEntityFilterParams(req.query),\n          fields: parseEntityTransformParams(req.query),\n          pagination: parseEntityPaginationParams(req.query),\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n\n        // Add a Link header to the next page\n        if (pageInfo.hasNextPage) {\n          const url = new URL(`http://ignored${req.url}`);\n          url.searchParams.delete('offset');\n          url.searchParams.set('after', pageInfo.endCursor);\n          res.setHeader('link', `<${url.pathname}${url.search}>; rel=\"next\"`);\n        }\n\n        // TODO(freben): encode the pageInfo in the response\n        res.json(entities);\n      })\n      .get('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        const { entities } = await entitiesCatalog.entities({\n          filter: basicEntityFilter({ 'metadata.uid': uid }),\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        if (!entities.length) {\n          throw new NotFoundError(`No entity with uid ${uid}`);\n        }\n        res.status(200).json(entities[0]);\n      })\n      .delete('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        await entitiesCatalog.removeEntityByUid(uid, {\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(204).end();\n      })\n      .get('/entities/by-name/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const { entities } = await entitiesCatalog.entities({\n          filter: basicEntityFilter({\n            kind: kind,\n            'metadata.namespace': namespace,\n            'metadata.name': name,\n          }),\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        if (!entities.length) {\n          throw new NotFoundError(\n            `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`,\n          );\n        }\n        res.status(200).json(entities[0]);\n      })\n      .get(\n        '/entities/by-name/:kind/:namespace/:name/ancestry',\n        async (req, res) => {\n          const { kind, namespace, name } = req.params;\n          const entityRef = stringifyEntityRef({ kind, namespace, name });\n          const response = await entitiesCatalog.entityAncestry(entityRef, {\n            authorizationToken: getBearerToken(req.header('authorization')),\n          });\n          res.status(200).json(response);\n        },\n      )\n      .get('/entity-facets', async (req, res) => {\n        const response = await entitiesCatalog.facets({\n          filter: parseEntityFilterParams(req.query),\n          facets: parseEntityFacetParams(req.query),\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(200).json(response);\n      });\n  }\n\n  if (locationService) {\n    router\n      .post('/locations', async (req, res) => {\n        const location = await validateRequestBody(req, locationInput);\n        const dryRun = yn(req.query.dryRun, { default: false });\n\n        // when in dryRun addLocation is effectively a read operation so we don't\n        // need to disallow readonly\n        if (!dryRun) {\n          disallowReadonlyMode(readonlyEnabled);\n        }\n\n        const output = await locationService.createLocation(location, dryRun, {\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(201).json(output);\n      })\n      .get('/locations', async (req, res) => {\n        const locations = await locationService.listLocations({\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(200).json(locations.map(l => ({ data: l })));\n      })\n\n      .get('/locations/:id', async (req, res) => {\n        const { id } = req.params;\n        const output = await locationService.getLocation(id, {\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(200).json(output);\n      })\n      .delete('/locations/:id', async (req, res) => {\n        disallowReadonlyMode(readonlyEnabled);\n\n        const { id } = req.params;\n        await locationService.deleteLocation(id, {\n          authorizationToken: getBearerToken(req.header('authorization')),\n        });\n        res.status(204).end();\n      });\n  }\n\n  if (locationAnalyzer) {\n    router.post('/analyze-location', async (req, res) => {\n      const body = await validateRequestBody(\n        req,\n        z.object({ location: locationInput }),\n      );\n      const schema = z.object({ location: locationInput });\n      const output = await locationAnalyzer.analyzeLocation(schema.parse(body));\n      res.status(200).json(output);\n    });\n  }\n\n  router.use(errorHandler());\n  return router;\n}\n\nfunction getBearerToken(\n  authorizationHeader: string | undefined,\n): string | undefined {\n  if (typeof authorizationHeader !== 'string') {\n    return undefined;\n  }\n  const matches = authorizationHeader.match(/Bearer\\s+(\\S+)/i);\n  return matches?.[1];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DefaultProcessingDatabase } from '../database/DefaultProcessingDatabase';\nimport { RefreshOptions, RefreshService } from './types';\n\nexport class DefaultRefreshService implements RefreshService {\n  private database: DefaultProcessingDatabase;\n\n  constructor(options: { database: DefaultProcessingDatabase }) {\n    this.database = options.database;\n  }\n\n  async refresh(options: RefreshOptions) {\n    await this.database.transaction(async tx => {\n      const { entityRefs } = await this.database.listAncestors(tx, {\n        entityRef: options.entityRef,\n      });\n      const locationAncestor = entityRefs.find(ref =>\n        ref.startsWith('location:'),\n      );\n\n      // TODO: Refreshes are currently scheduled(as soon as possible) for execution and will therefore happen in the future.\n      // There's room for improvements here where the refresh could potentially hang or return an ID so that the user can check progress.\n      if (locationAncestor) {\n        await this.database.refresh(tx, {\n          entityRef: locationAncestor,\n        });\n      }\n      await this.database.refresh(tx, {\n        entityRef: options.entityRef,\n      });\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common';\nimport {\n  AuthorizeResult,\n  PermissionAuthorizer,\n} from '@backstage/plugin-permission-common';\nimport { RefreshOptions, RefreshService } from './types';\n\nexport class AuthorizedRefreshService implements RefreshService {\n  constructor(\n    private readonly service: RefreshService,\n    private readonly permissionApi: PermissionAuthorizer,\n  ) {}\n\n  async refresh(options: RefreshOptions) {\n    const authorizeDecision = (\n      await this.permissionApi.authorize(\n        [\n          {\n            permission: catalogEntityRefreshPermission,\n            resourceRef: options.entityRef,\n          },\n        ],\n        { token: options.authorizationToken },\n      )\n    )[0];\n    if (authorizeDecision.result !== AuthorizeResult.ALLOW) {\n      throw new NotAllowedError();\n    }\n    await this.service.refresh(options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { Entity } from '@backstage/catalog-model';\nimport path from 'path';\nimport { LocationSpec } from '../api';\n\n/**\n * Rules to apply to catalog entities.\n *\n * An undefined list of matchers means match all, an empty list of matchers means match none.\n */\nexport type CatalogRule = {\n  allow: Array<{\n    kind: string;\n  }>;\n  locations?: Array<{\n    target?: string;\n    type: string;\n  }>;\n};\n\n/**\n * Decides whether an entity from a given location is allowed to enter the\n * catalog, according to some rule set.\n */\nexport type CatalogRulesEnforcer = {\n  isAllowed(entity: Entity, location: LocationSpec): boolean;\n};\n\n/**\n * Implements the default catalog rule set, consuming the config keys\n * `catalog.rules` and `catalog.locations.[].rules`.\n */\nexport class DefaultCatalogRulesEnforcer implements CatalogRulesEnforcer {\n  /**\n   * Default rules used by the catalog.\n   *\n   * Denies any location from specifying user or group entities.\n   */\n  static readonly defaultRules: CatalogRule[] = [\n    {\n      allow: ['Component', 'API', 'Location'].map(kind => ({ kind })),\n    },\n  ];\n\n  /**\n   * Loads catalog rules from config.\n   *\n   * This reads `catalog.rules` and defaults to the default rules if no value is present.\n   * The value of the config should be a list of config objects, each with a single `allow`\n   * field which in turn is a list of entity kinds to allow.\n   *\n   * If there is no matching rule to allow an ingested entity, it will be rejected by the catalog.\n   *\n   * It also reads in rules from `catalog.locations`, where each location can have a list\n   * of rules for that specific location, specified in a `rules` field.\n   *\n   * For example:\n   *\n   * ```yaml\n   * catalog:\n   *   rules:\n   *   - allow: [Component, API]\n   *\n   *   locations:\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/users.yaml\n   *     rules:\n   *       - allow: [User, Group]\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/systems.yaml\n   *     rules:\n   *       - allow: [System]\n   * ```\n   */\n  static fromConfig(config: Config) {\n    const rules = new Array<CatalogRule>();\n\n    if (config.has('catalog.rules')) {\n      const globalRules = config.getConfigArray('catalog.rules').map(sub => ({\n        allow: sub.getStringArray('allow').map(kind => ({ kind })),\n      }));\n      rules.push(...globalRules);\n    } else {\n      rules.push(...DefaultCatalogRulesEnforcer.defaultRules);\n    }\n\n    if (config.has('catalog.locations')) {\n      const locationRules = config\n        .getConfigArray('catalog.locations')\n        .flatMap(locConf => {\n          if (!locConf.has('rules')) {\n            return [];\n          }\n          const type = locConf.getString('type');\n          const target = resolveTarget(type, locConf.getString('target'));\n\n          return locConf.getConfigArray('rules').map(ruleConf => ({\n            allow: ruleConf.getStringArray('allow').map(kind => ({ kind })),\n            locations: [{ type, target }],\n          }));\n        });\n\n      rules.push(...locationRules);\n    }\n\n    return new DefaultCatalogRulesEnforcer(rules);\n  }\n\n  constructor(private readonly rules: CatalogRule[]) {}\n\n  /**\n   * Checks whether a specific entity/location combination is allowed\n   * according to the configured rules.\n   */\n  isAllowed(entity: Entity, location: LocationSpec) {\n    for (const rule of this.rules) {\n      if (!this.matchLocation(location, rule.locations)) {\n        continue;\n      }\n\n      if (this.matchEntity(entity, rule.allow)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private matchLocation(\n    location: LocationSpec,\n    matchers?: { target?: string; type: string }[],\n  ): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (matcher.type !== location?.type) {\n        continue;\n      }\n      if (matcher.target && matcher.target !== location?.target) {\n        continue;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private matchEntity(entity: Entity, matchers?: { kind: string }[]): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (entity?.kind?.toLowerCase() !== matcher.kind.toLowerCase()) {\n        continue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nfunction resolveTarget(type: string, target: string): string {\n  if (type !== 'file') {\n    return target;\n  }\n\n  return path.resolve(target);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n} from '@backstage/catalog-model';\nimport { ProcessingDatabase } from '../database/types';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  EntityProviderMutation,\n} from '../api';\n\nclass Connection implements EntityProviderConnection {\n  readonly validateEntityEnvelope = entityEnvelopeSchemaValidator();\n\n  constructor(\n    private readonly config: {\n      id: string;\n      processingDatabase: ProcessingDatabase;\n    },\n  ) {}\n\n  async applyMutation(mutation: EntityProviderMutation): Promise<void> {\n    const db = this.config.processingDatabase;\n\n    if (mutation.type === 'full') {\n      this.check(mutation.entities.map(e => e.entity));\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'full',\n          items: mutation.entities,\n        });\n      });\n    } else if (mutation.type === 'delta') {\n      this.check(mutation.added.map(e => e.entity));\n      this.check(mutation.removed.map(e => e.entity));\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'delta',\n          added: mutation.added,\n          removed: mutation.removed,\n        });\n      });\n    }\n  }\n\n  private check(entities: Entity[]) {\n    for (const entity of entities) {\n      try {\n        this.validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new TypeError(`Malformed entity envelope, ${e}`);\n      }\n    }\n  }\n}\n\nexport async function connectEntityProviders(\n  db: ProcessingDatabase,\n  providers: EntityProvider[],\n) {\n  await Promise.all(\n    providers.map(async provider => {\n      const connection = new Connection({\n        id: provider.getProviderName(),\n        processingDatabase: db,\n      });\n      return provider.connect(connection);\n    }),\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { makeCreatePermissionRule } from '@backstage/plugin-permission-node';\nimport { EntitiesSearchFilter } from '../../catalog/types';\n\n/**\n * Helper function for creating correctly-typed\n * {@link @backstage/plugin-permission-node#PermissionRule}s for the\n * catalog-backend.\n *\n * @alpha\n */\nexport const createCatalogPermissionRule = makeCreatePermissionRule<\n  Entity,\n  EntitiesSearchFilter\n>();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for the presence of an annotation on a given entity.\n *\n * @alpha\n */\nexport const hasAnnotation = createCatalogPermissionRule({\n  name: 'HAS_ANNOTATION',\n  description:\n    'Allow entities which are annotated with the specified annotation',\n  apply: (resource: Entity, annotation: string) =>\n    !!resource.metadata.annotations?.hasOwnProperty(annotation),\n  toQuery: (annotation: string) => ({\n    key: `metadata.annotations.${annotation}`,\n  }),\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { EntitiesSearchFilter } from '../../catalog/types';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified kind.\n * @alpha\n */\nexport const isEntityKind = createCatalogPermissionRule({\n  name: 'IS_ENTITY_KIND',\n  description: 'Allow entities with the specified kind',\n  apply(resource: Entity, kinds: string[]) {\n    const resourceKind = resource.kind.toLocaleLowerCase('en-US');\n    return kinds.some(kind => kind.toLocaleLowerCase('en-US') === resourceKind);\n  },\n  toQuery(kinds: string[]): EntitiesSearchFilter {\n    return {\n      key: 'kind',\n      values: kinds.map(kind => kind.toLocaleLowerCase('en-US')),\n    };\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, RELATION_OWNED_BY } from '@backstage/catalog-model';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified owner.\n *\n * @alpha\n */\nexport const isEntityOwner = createCatalogPermissionRule({\n  name: 'IS_ENTITY_OWNER',\n  description: 'Allow entities owned by the current user',\n  apply: (resource: Entity, claims: string[]) => {\n    if (!resource.relations) {\n      return false;\n    }\n\n    return resource.relations\n      .filter(relation => relation.type === RELATION_OWNED_BY)\n      .some(relation => claims.includes(relation.targetRef));\n  },\n  toQuery: (claims: string[]) => ({\n    key: 'relations.ownedBy',\n    values: claims,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified label in its metadata.\n * @alpha\n */\nexport const hasLabel = createCatalogPermissionRule({\n  name: 'HAS_LABEL',\n  description: 'Allow entities which have the specified label metadata.',\n  apply: (resource: Entity, label: string) =>\n    !!resource.metadata.labels?.hasOwnProperty(label),\n  toQuery: (label: string) => ({\n    key: `metadata.labels.${label}`,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { get } from 'lodash';\nimport { Entity } from '@backstage/catalog-model';\nimport { createCatalogPermissionRule } from './util';\n\nexport const createPropertyRule = (propertyType: 'metadata' | 'spec') =>\n  createCatalogPermissionRule({\n    name: `HAS_${propertyType.toUpperCase()}`,\n    description: `Allow entities which have the specified ${propertyType} subfield.`,\n    apply: (resource: Entity, key: string, value?: string) => {\n      const foundValue = get(resource[propertyType], key);\n      if (value !== undefined) {\n        return value === foundValue;\n      }\n      return !!foundValue;\n    },\n    toQuery: (key: string, value?: string) => ({\n      key: `${propertyType}.${key}`,\n      ...(value !== undefined && { values: [value] }),\n    }),\n  });\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified metadata subfield. Also matches on\n * values if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasMetadata = createPropertyRule('metadata');\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified spec subfield. Also matches on values\n * if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasSpec = createPropertyRule('spec');\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { hasAnnotation } from './hasAnnotation';\nimport { isEntityKind } from './isEntityKind';\nimport { isEntityOwner } from './isEntityOwner';\nimport { hasLabel } from './hasLabel';\nimport { hasMetadata } from './hasMetadata';\nimport { hasSpec } from './hasSpec';\n\n/**\n * These permission rules can be used to conditionally filter catalog entities\n * or describe a user's access to the entities.\n *\n * @alpha\n */\nexport const permissionRules = {\n  hasAnnotation,\n  hasLabel,\n  hasMetadata,\n  hasSpec,\n  isEntityKind,\n  isEntityOwner,\n};\n\nexport { createCatalogPermissionRule } from './util';\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport {\n  catalogEntityDeletePermission,\n  catalogEntityReadPermission,\n} from '@backstage/plugin-catalog-common';\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  AuthorizeResult,\n  PermissionAuthorizer,\n} from '@backstage/plugin-permission-common';\nimport { ConditionTransformer } from '@backstage/plugin-permission-node';\nimport {\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  EntityFilter,\n} from '../catalog/types';\nimport { basicEntityFilter } from './request/basicEntityFilter';\n\nexport class AuthorizedEntitiesCatalog implements EntitiesCatalog {\n  constructor(\n    private readonly entitiesCatalog: EntitiesCatalog,\n    private readonly permissionApi: PermissionAuthorizer,\n    private readonly transformConditions: ConditionTransformer<EntityFilter>,\n  ) {}\n\n  async entities(request?: EntitiesRequest): Promise<EntitiesResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityReadPermission }],\n        { token: request?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        entities: [],\n        pageInfo: { hasNextPage: false },\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.entities({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.entities(request);\n  }\n\n  async removeEntityByUid(\n    uid: string,\n    options?: { authorizationToken?: string },\n  ): Promise<void> {\n    const authorizeResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityDeletePermission }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n    if (authorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n    if (authorizeResponse.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeResponse.conditions,\n      );\n      const { entities } = await this.entitiesCatalog.entities({\n        filter: {\n          allOf: [permissionFilter, basicEntityFilter({ 'metadata.uid': uid })],\n        },\n      });\n      if (entities.length === 0) {\n        throw new NotAllowedError();\n      }\n    }\n    return this.entitiesCatalog.removeEntityByUid(uid);\n  }\n\n  async entityAncestry(\n    entityRef: string,\n    options?: { authorizationToken?: string },\n  ): Promise<EntityAncestryResponse> {\n    const rootEntityAuthorizeResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityReadPermission, resourceRef: entityRef }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n    if (rootEntityAuthorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    const ancestryResult = await this.entitiesCatalog.entityAncestry(entityRef);\n    const authorizeResponse = await this.permissionApi.authorize(\n      ancestryResult.items.map(item => ({\n        permission: catalogEntityReadPermission,\n        resourceRef: stringifyEntityRef(item.entity),\n      })),\n      { token: options?.authorizationToken },\n    );\n    const unauthorizedAncestryItems = ancestryResult.items.filter(\n      (_, index) => authorizeResponse[index].result === AuthorizeResult.DENY,\n    );\n    if (unauthorizedAncestryItems.length === 0) {\n      return ancestryResult;\n    }\n    const rootUnauthorizedEntityRefs = unauthorizedAncestryItems.map(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity),\n    );\n    const allUnauthorizedEntityRefs = new Set(\n      rootUnauthorizedEntityRefs.flatMap(rootEntityRef =>\n        this.findParents(\n          rootEntityRef,\n          ancestryResult.items,\n          new Set(rootUnauthorizedEntityRefs),\n        ),\n      ),\n    );\n    return {\n      rootEntityRef: ancestryResult.rootEntityRef,\n      items: ancestryResult.items.filter(\n        ancestryItem =>\n          !allUnauthorizedEntityRefs.has(\n            stringifyEntityRef(ancestryItem.entity),\n          ),\n      ),\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityReadPermission }],\n        { token: request?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        facets: Object.fromEntries(request.facets.map(f => [f, []])),\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.facets({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.facets(request);\n  }\n\n  private findParents(\n    entityRef: string,\n    allAncestryItems: { entity: Entity; parentEntityRefs: string[] }[],\n    seenEntityRefs: Set<string>,\n  ): string[] {\n    const entity = allAncestryItems.find(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity) === entityRef,\n    );\n    if (!entity) return [];\n\n    const newSeenEntityRefs = new Set(seenEntityRefs);\n    entity.parentEntityRefs.forEach(parentRef =>\n      newSeenEntityRefs.add(parentRef),\n    );\n\n    return [\n      entityRef,\n      ...entity.parentEntityRefs.flatMap(parentRef =>\n        seenEntityRefs.has(parentRef)\n          ? []\n          : this.findParents(parentRef, allAncestryItems, newSeenEntityRefs),\n      ),\n    ];\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { Entity } from '@backstage/catalog-model';\nimport { NotAllowedError, NotFoundError } from '@backstage/errors';\nimport {\n  catalogLocationCreatePermission,\n  catalogLocationDeletePermission,\n  catalogLocationReadPermission,\n} from '@backstage/plugin-catalog-common';\nimport {\n  AuthorizeResult,\n  PermissionAuthorizer,\n} from '@backstage/plugin-permission-common';\nimport { LocationInput, LocationService } from './types';\n\nexport class AuthorizedLocationService implements LocationService {\n  constructor(\n    private readonly locationService: LocationService,\n    private readonly permissionApi: PermissionAuthorizer,\n  ) {}\n\n  async createLocation(\n    spec: LocationInput,\n    dryRun: boolean,\n    options?: {\n      authorizationToken?: string;\n    },\n  ): Promise<{\n    location: Location;\n    entities: Entity[];\n    exists?: boolean | undefined;\n  }> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationCreatePermission }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.createLocation(spec, dryRun);\n  }\n\n  async listLocations(options?: {\n    authorizationToken?: string;\n  }): Promise<Location[]> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      return [];\n    }\n\n    return this.locationService.listLocations();\n  }\n\n  async getLocation(\n    id: string,\n    options?: { authorizationToken?: string },\n  ): Promise<Location> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n\n    return this.locationService.getLocation(id);\n  }\n\n  async deleteLocation(\n    id: string,\n    options?: { authorizationToken?: string },\n  ): Promise<void> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationDeletePermission }],\n        { token: options?.authorizationToken },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.deleteLocation(id);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PluginDatabaseManager, UrlReader } from '@backstage/backend-common';\nimport {\n  DefaultNamespaceEntityPolicy,\n  Entity,\n  EntityPolicies,\n  EntityPolicy,\n  FieldFormatEntityPolicy,\n  makeValidator,\n  NoForeignRootFieldsEntityPolicy,\n  parseEntityRef,\n  SchemaValidEntityPolicy,\n  stringifyEntityRef,\n  Validators,\n} from '@backstage/catalog-model';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { createHash } from 'crypto';\nimport { Router } from 'express';\nimport lodash, { keyBy } from 'lodash';\nimport { EntitiesSearchFilter } from '../catalog';\n\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntityProvider,\n} from '../api';\nimport {\n  AnnotateLocationEntityProcessor,\n  BuiltinKindsEntityProcessor,\n  CodeOwnersProcessor,\n  FileReaderProcessor,\n  PlaceholderProcessor,\n  PlaceholderResolver,\n  UrlReaderProcessor,\n} from '../modules';\nimport { ConfigLocationEntityProvider } from '../modules/core/ConfigLocationEntityProvider';\nimport { DefaultLocationStore } from '../modules/core/DefaultLocationStore';\nimport { RepoLocationAnalyzer } from '../ingestion/LocationAnalyzer';\nimport {\n  jsonPlaceholderResolver,\n  textPlaceholderResolver,\n  yamlPlaceholderResolver,\n} from '../modules/core/PlaceholderProcessor';\nimport { defaultEntityDataParser } from '../modules/util/parse';\nimport { LocationAnalyzer } from '../ingestion/types';\nimport { CatalogProcessingEngine } from '../processing/types';\nimport { DefaultProcessingDatabase } from '../database/DefaultProcessingDatabase';\nimport { applyDatabaseMigrations } from '../database/migrations';\nimport { DefaultCatalogProcessingEngine } from '../processing/DefaultCatalogProcessingEngine';\nimport { DefaultLocationService } from './DefaultLocationService';\nimport { DefaultEntitiesCatalog } from './DefaultEntitiesCatalog';\nimport { DefaultCatalogProcessingOrchestrator } from '../processing/DefaultCatalogProcessingOrchestrator';\nimport { Stitcher } from '../stitching/Stitcher';\nimport {\n  createRandomProcessingInterval,\n  ProcessingIntervalFunction,\n} from '../processing/refresh';\nimport { createRouter } from './createRouter';\nimport { DefaultRefreshService } from './DefaultRefreshService';\nimport { AuthorizedRefreshService } from './AuthorizedRefreshService';\nimport { DefaultCatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { Config } from '@backstage/config';\nimport { Logger } from 'winston';\nimport { connectEntityProviders } from '../processing/connectEntityProviders';\nimport { permissionRules as catalogPermissionRules } from '../permissions/rules';\nimport { PermissionAuthorizer } from '@backstage/plugin-permission-common';\nimport {\n  PermissionRule,\n  createConditionTransformer,\n  createPermissionIntegrationRouter,\n} from '@backstage/plugin-permission-node';\nimport { AuthorizedEntitiesCatalog } from './AuthorizedEntitiesCatalog';\nimport { basicEntityFilter } from './request/basicEntityFilter';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common';\nimport { AuthorizedLocationService } from './AuthorizedLocationService';\n\n/** @public */\nexport type CatalogEnvironment = {\n  logger: Logger;\n  database: PluginDatabaseManager;\n  config: Config;\n  reader: UrlReader;\n  permissions: PermissionAuthorizer;\n};\n\n/**\n * A builder that helps wire up all of the component parts of the catalog.\n *\n * The touch points where you can replace or extend behavior are as follows:\n *\n * - Entity policies can be added or replaced. These are automatically run\n *   after the processors' pre-processing steps. All policies are given the\n *   chance to inspect the entity, and all of them have to pass in order for\n *   the entity to be considered valid from an overall point of view.\n * - Placeholder resolvers can be replaced or added. These run on the raw\n *   structured data between the parsing and pre-processing steps, to replace\n *   dollar-prefixed entries with their actual values (like $file).\n * - Field format validators can be replaced. These check the format of\n *   individual core fields such as metadata.name, to ensure that they adhere\n *   to certain rules.\n * - Processors can be added or replaced. These implement the functionality of\n *   reading, parsing, validating, and processing the entity data before it is\n *   persisted in the catalog.\n *\n * @public\n */\nexport class CatalogBuilder {\n  private readonly env: CatalogEnvironment;\n  private entityPolicies: EntityPolicy[];\n  private entityPoliciesReplace: boolean;\n  private placeholderResolvers: Record<string, PlaceholderResolver>;\n  private fieldFormatValidators: Partial<Validators>;\n  private entityProviders: EntityProvider[];\n  private processors: CatalogProcessor[];\n  private processorsReplace: boolean;\n  private parser: CatalogProcessorParser | undefined;\n  private processingInterval: ProcessingIntervalFunction =\n    createRandomProcessingInterval({\n      minSeconds: 100,\n      maxSeconds: 150,\n    });\n  private locationAnalyzer: LocationAnalyzer | undefined = undefined;\n  private permissionRules: PermissionRule<\n    Entity,\n    EntitiesSearchFilter,\n    unknown[]\n  >[];\n\n  /**\n   * Creates a catalog builder.\n   */\n  static create(env: CatalogEnvironment): CatalogBuilder {\n    return new CatalogBuilder(env);\n  }\n\n  private constructor(env: CatalogEnvironment) {\n    this.env = env;\n    this.entityPolicies = [];\n    this.entityPoliciesReplace = false;\n    this.placeholderResolvers = {};\n    this.fieldFormatValidators = {};\n    this.entityProviders = [];\n    this.processors = [];\n    this.processorsReplace = false;\n    this.parser = undefined;\n    this.permissionRules = Object.values(catalogPermissionRules);\n  }\n\n  /**\n   * Adds policies that are used to validate entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * @param policies - One or more policies\n   */\n  addEntityPolicy(...policies: EntityPolicy[]): CatalogBuilder {\n    this.entityPolicies.push(...policies);\n    return this;\n  }\n\n  /**\n   * Processing interval determines how often entities should be processed.\n   * Seconds provided will be multiplied by 1.5\n   * The default processing interval is 100-150 seconds.\n   * setting this too low will potentially deplete request quotas to upstream services.\n   */\n  setProcessingIntervalSeconds(seconds: number): CatalogBuilder {\n    this.processingInterval = createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n    return this;\n  }\n\n  /**\n   * Overwrites the default processing interval function used to spread\n   * entity updates in the catalog.\n   */\n  setProcessingInterval(\n    processingInterval: ProcessingIntervalFunction,\n  ): CatalogBuilder {\n    this.processingInterval = processingInterval;\n    return this;\n  }\n\n  /**\n   * Overwrites the default location analyzer.\n   */\n  setLocationAnalyzer(locationAnalyzer: LocationAnalyzer): CatalogBuilder {\n    this.locationAnalyzer = locationAnalyzer;\n    return this;\n  }\n\n  /**\n   * Sets what policies to use for validation of entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * This function replaces the default set of policies; use with care.\n   *\n   * @param policies - One or more policies\n   */\n  replaceEntityPolicies(policies: EntityPolicy[]): CatalogBuilder {\n    this.entityPolicies = [...policies];\n    this.entityPoliciesReplace = true;\n    return this;\n  }\n\n  /**\n   * Adds, or overwrites, a handler for placeholders (e.g. $file) in entity\n   * definition files.\n   *\n   * @param key - The key that identifies the placeholder, e.g. \"file\"\n   * @param resolver - The resolver that gets values for this placeholder\n   */\n  setPlaceholderResolver(\n    key: string,\n    resolver: PlaceholderResolver,\n  ): CatalogBuilder {\n    this.placeholderResolvers[key] = resolver;\n    return this;\n  }\n\n  /**\n   * Sets the validator function to use for one or more special fields of an\n   * entity. This is useful if the default rules for formatting of fields are\n   * not sufficient.\n   *\n   * This function has no effect if used together with\n   * {@link CatalogBuilder#replaceEntityPolicies}.\n   *\n   * @param validators - The (subset of) validators to set\n   */\n  setFieldFormatValidators(validators: Partial<Validators>): CatalogBuilder {\n    lodash.merge(this.fieldFormatValidators, validators);\n    return this;\n  }\n\n  /**\n   * Adds or replaces entity providers. These are responsible for bootstrapping\n   * the list of entities out of original data sources. For example, there is\n   * one entity source for the config locations, and one for the database\n   * stored locations. If you ingest entities out of a third party system, you\n   * may want to implement that in terms of an entity provider as well.\n   *\n   * @param providers - One or more entity providers\n   */\n  addEntityProvider(...providers: EntityProvider[]): CatalogBuilder {\n    this.entityProviders.push(...providers);\n    return this;\n  }\n\n  /**\n   * Adds entity processors. These are responsible for reading, parsing, and\n   * processing entities before they are persisted in the catalog.\n   *\n   * @param processors - One or more processors\n   */\n  addProcessor(...processors: CatalogProcessor[]): CatalogBuilder {\n    this.processors.push(...processors);\n    return this;\n  }\n\n  /**\n   * Sets what entity processors to use. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog.\n   *\n   * This function replaces the default set of processors, consider using with\n   * {@link CatalogBuilder#getDefaultProcessors}; use with care.\n   *\n   * @param processors - One or more processors\n   */\n  replaceProcessors(processors: CatalogProcessor[]): CatalogBuilder {\n    this.processors = [...processors];\n    this.processorsReplace = true;\n    return this;\n  }\n\n  /**\n   * Returns the default list of entity processors. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog. Changing\n   * the order of processing can give more control to custom processors.\n   *\n   * Consider using with {@link CatalogBuilder#replaceProcessors}\n   *\n   */\n  getDefaultProcessors(): CatalogProcessor[] {\n    const { config, logger, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return [\n      new FileReaderProcessor(),\n      new UrlReaderProcessor({ reader, logger }),\n      CodeOwnersProcessor.fromConfig(config, { logger, reader }),\n      new AnnotateLocationEntityProcessor({ integrations }),\n    ];\n  }\n\n  /**\n   * Sets up the catalog to use a custom parser for entity data.\n   *\n   * This is the function that gets called immediately after some raw entity\n   * specification data has been read from a remote source, and needs to be\n   * parsed and emitted as structured data.\n   *\n   * @param parser - The custom parser\n   */\n  setEntityDataParser(parser: CatalogProcessorParser): CatalogBuilder {\n    this.parser = parser;\n    return this;\n  }\n\n  /**\n   * Adds additional permission rules. Permission rules are used to evaluate\n   * catalog resources against queries. See\n   * {@link @backstage/plugin-permission-node#PermissionRule}.\n   *\n   * @param permissionRules - Additional permission rules\n   */\n  addPermissionRules(\n    ...permissionRules: PermissionRule<\n      Entity,\n      EntitiesSearchFilter,\n      unknown[]\n    >[]\n  ) {\n    this.permissionRules.push(...permissionRules);\n  }\n\n  /**\n   * Wires up and returns all of the component parts of the catalog\n   */\n  async build(): Promise<{\n    processingEngine: CatalogProcessingEngine;\n    router: Router;\n  }> {\n    const { config, database, logger, permissions } = this.env;\n\n    const policy = this.buildEntityPolicy();\n    const processors = this.buildProcessors();\n    const parser = this.parser || defaultEntityDataParser;\n\n    const dbClient = await database.getClient();\n    if (!database.migrations?.skip) {\n      logger.info('Performing database migration');\n      await applyDatabaseMigrations(dbClient);\n    }\n\n    const processingDatabase = new DefaultProcessingDatabase({\n      database: dbClient,\n      logger,\n      refreshInterval: this.processingInterval,\n    });\n    const integrations = ScmIntegrations.fromConfig(config);\n    const rulesEnforcer = DefaultCatalogRulesEnforcer.fromConfig(config);\n    const orchestrator = new DefaultCatalogProcessingOrchestrator({\n      processors,\n      integrations,\n      rulesEnforcer,\n      logger,\n      parser,\n      policy,\n    });\n    const unauthorizedEntitiesCatalog = new DefaultEntitiesCatalog(dbClient);\n    const entitiesCatalog = new AuthorizedEntitiesCatalog(\n      unauthorizedEntitiesCatalog,\n      permissions,\n      createConditionTransformer(this.permissionRules),\n    );\n    const permissionIntegrationRouter = createPermissionIntegrationRouter({\n      resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n      getResources: async (resourceRefs: string[]) => {\n        const { entities } = await unauthorizedEntitiesCatalog.entities({\n          filter: {\n            anyOf: resourceRefs.map(resourceRef => {\n              const { kind, namespace, name } = parseEntityRef(resourceRef);\n\n              return basicEntityFilter({\n                kind,\n                'metadata.namespace': namespace,\n                'metadata.name': name,\n              });\n            }),\n          },\n        });\n\n        const entitiesByRef = keyBy(entities, stringifyEntityRef);\n\n        return resourceRefs.map(\n          resourceRef =>\n            entitiesByRef[stringifyEntityRef(parseEntityRef(resourceRef))],\n        );\n      },\n      rules: this.permissionRules,\n    });\n    const stitcher = new Stitcher(dbClient, logger);\n\n    const locationStore = new DefaultLocationStore(dbClient);\n    const configLocationProvider = new ConfigLocationEntityProvider(config);\n    const entityProviders = lodash.uniqBy(\n      [...this.entityProviders, locationStore, configLocationProvider],\n      provider => provider.getProviderName(),\n    );\n\n    const processingEngine = new DefaultCatalogProcessingEngine(\n      logger,\n      processingDatabase,\n      orchestrator,\n      stitcher,\n      () => createHash('sha1'),\n    );\n\n    const locationAnalyzer =\n      this.locationAnalyzer ?? new RepoLocationAnalyzer(logger, integrations);\n    const locationService = new AuthorizedLocationService(\n      new DefaultLocationService(locationStore, orchestrator),\n      permissions,\n    );\n    const refreshService = new AuthorizedRefreshService(\n      new DefaultRefreshService({ database: processingDatabase }),\n      permissions,\n    );\n    const router = await createRouter({\n      entitiesCatalog,\n      locationAnalyzer,\n      locationService,\n      refreshService,\n      logger,\n      config,\n      permissionIntegrationRouter,\n    });\n\n    await connectEntityProviders(processingDatabase, entityProviders);\n\n    return {\n      processingEngine,\n      router,\n    };\n  }\n\n  private buildEntityPolicy(): EntityPolicy {\n    const entityPolicies: EntityPolicy[] = this.entityPoliciesReplace\n      ? [new SchemaValidEntityPolicy(), ...this.entityPolicies]\n      : [\n          new SchemaValidEntityPolicy(),\n          new DefaultNamespaceEntityPolicy(),\n          new NoForeignRootFieldsEntityPolicy(),\n          new FieldFormatEntityPolicy(\n            makeValidator(this.fieldFormatValidators),\n          ),\n          ...this.entityPolicies,\n        ];\n\n    return EntityPolicies.allOf(entityPolicies);\n  }\n\n  private buildProcessors(): CatalogProcessor[] {\n    const { config, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    this.checkDeprecatedReaderProcessors();\n\n    const placeholderResolvers: Record<string, PlaceholderResolver> = {\n      json: jsonPlaceholderResolver,\n      yaml: yamlPlaceholderResolver,\n      text: textPlaceholderResolver,\n      ...this.placeholderResolvers,\n    };\n\n    // These are always there no matter what\n    const processors: CatalogProcessor[] = [\n      new PlaceholderProcessor({\n        resolvers: placeholderResolvers,\n        reader,\n        integrations,\n      }),\n      new BuiltinKindsEntityProcessor(),\n    ];\n\n    // These are only added unless the user replaced them all\n    if (!this.processorsReplace) {\n      processors.push(...this.getDefaultProcessors());\n    }\n\n    // Add the ones (if any) that the user added\n    processors.push(...this.processors);\n\n    this.checkMissingExternalProcessors(processors);\n\n    return processors;\n  }\n\n  // TODO(Rugvip): These old processors are removed, for a while we'll be throwing\n  //               errors here to make sure people know where to move the config\n  private checkDeprecatedReaderProcessors() {\n    const pc = this.env.config.getOptionalConfig('catalog.processors');\n    if (pc?.has('github')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.github, move to using integrations.github instead`,\n      );\n    }\n    if (pc?.has('gitlabApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.gitlabApi, move to using integrations.gitlab instead`,\n      );\n    }\n    if (pc?.has('bitbucketApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.bitbucketApi, move to using integrations.bitbucket instead`,\n      );\n    }\n    if (pc?.has('azureApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.azureApi, move to using integrations.azure instead`,\n      );\n    }\n  }\n\n  // TODO(freben): This can be removed no sooner than June 2022, after adopters have had some time to adapt to the new package structure\n  private checkMissingExternalProcessors(processors: CatalogProcessor[]) {\n    const skipCheckVarName = 'BACKSTAGE_CATALOG_SKIP_MISSING_PROCESSORS_CHECK';\n    if (process.env[skipCheckVarName]) {\n      return;\n    }\n\n    const locationTypes = new Set(\n      this.env.config\n        .getOptionalConfigArray('catalog.locations')\n        ?.map(l => l.getString('type')) ?? [],\n    );\n    const processorNames = new Set(processors.map(p => p.getProcessorName()));\n\n    function check(\n      locationType: string,\n      processorName: string,\n      installationUrl: string,\n    ) {\n      if (\n        locationTypes.has(locationType) &&\n        !processorNames.has(processorName)\n      ) {\n        throw new Error(\n          [\n            `Your config contains a \"catalog.locations\" entry of type ${locationType},`,\n            `but does not have the corresponding catalog processor ${processorName} installed.`,\n            `This processor used to be built into the catalog itself, but is now moved to an`,\n            `external module that has to be installed manually. Please follow the installation`,\n            `instructions at ${installationUrl} if you are using this ability, or remove the`,\n            `location from your app config if you do not. You can also silence this check entirely`,\n            `by setting the environment variable ${skipCheckVarName} to 'true'.`,\n          ].join(' '),\n        );\n      }\n    }\n\n    check(\n      'aws-cloud-accounts',\n      'AwsOrganizationCloudAccountProcessor',\n      'https://backstage.io/docs/integrations',\n    );\n    check(\n      's3-discovery',\n      'AwsS3DiscoveryProcessor',\n      'https://backstage.io/docs/integrations/aws-s3/discovery',\n    );\n    check(\n      'azure-discovery',\n      'AzureDevOpsDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/azure/discovery',\n    );\n    check(\n      'bitbucket-discovery',\n      'BitbucketDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/bitbucket/discovery',\n    );\n    check(\n      'github-discovery',\n      'GithubDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/github/discovery',\n    );\n    check(\n      'github-org',\n      'GithubOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/github/org',\n    );\n    check(\n      'gitlab-discovery',\n      'GitLabDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/gitlab/discovery',\n    );\n    check(\n      'ldap-org',\n      'LdapOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/ldap/org',\n    );\n    check(\n      'microsoft-graph-org',\n      'MicrosoftGraphOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/azure/org',\n    );\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common';\nimport { createConditionExports } from '@backstage/plugin-permission-node';\nimport { permissionRules } from './rules';\n\nconst conditionExports = createConditionExports({\n  pluginId: 'catalog',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  rules: permissionRules,\n});\n\n/**\n * These conditions are used when creating conditional decisions that are returned\n * by authorization policies.\n *\n * @alpha\n */\nexport const catalogConditions = conditionExports.conditions;\n\n/**\n * `createCatalogPolicyDecision` can be used when authoring policies to create\n * conditional decisions.\n *\n * ```\n * // MyAuthorizationPolicy.ts\n * ...\n * import { createCatalogPolicyDecision } from '@backstage/plugin-catalog-backend';\n *\n * class MyAuthorizationPolicy implements PermissionPolicy {\n *   async handle(request, user) {\n *     ...\n *\n *     return createCatalogPolicyDecision({\n *       anyOf: [...insert conditions here...],\n *     });\n *   }\n * }\n * ```\n *\n * @alpha\n */\nexport const createCatalogPolicyDecision =\n  conditionExports.createPolicyDecision;\n"],"names":["NotFoundError","InputError","codeowners","pipe","filter","reverse","head","get","ScmIntegrations","stringifyLocationRef","merge","pickBy","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","ANNOTATION_VIEW_URL","ANNOTATION_EDIT_URL","ANNOTATION_SOURCE_LOCATION","identity","parseGitUrl","apiEntityV1alpha1Validator","componentEntityV1alpha1Validator","resourceEntityV1alpha1Validator","groupEntityV1alpha1Validator","locationEntityV1alpha1Validator","userEntityV1alpha1Validator","systemEntityV1alpha1Validator","domainEntityV1alpha1Validator","getCompoundEntityRef","parseEntityRef","RELATION_OWNED_BY","RELATION_OWNER_OF","RELATION_PART_OF","RELATION_HAS_PART","RELATION_PROVIDES_API","RELATION_API_PROVIDED_BY","RELATION_CONSUMES_API","RELATION_API_CONSUMED_BY","RELATION_DEPENDS_ON","RELATION_DEPENDENCY_OF","RELATION_MEMBER_OF","RELATION_HAS_MEMBER","RELATION_CHILD_OF","RELATION_PARENT_OF","promisify","g","fs","path","toAbsoluteUrl","yaml","assertError","limiterFactory","lodash","catalogEntityReadPermission","catalogClient","CatalogClient","Readable","stringifyEntityRef","entitySchemaValidator","entityEnvelopeSchemaValidator","createHash","ConflictError","uuid","DateTime","isDatabaseConflictError","register","Counter","Gauge","Summary","generateStableHash","stableStringify","BATCH_SIZE","errors","isError","resolvePackagePath","serializeError","parseLocationRef","NotAllowedError","DEFAULT_NAMESPACE","stringifyError","ENTITY_STATUS_CATALOG_PROCESSING_TYPE","uniqBy","z","Router","express","yn","errorHandler","catalogEntityRefreshPermission","AuthorizeResult","makeCreatePermissionRule","catalogEntityDeletePermission","catalogLocationCreatePermission","catalogLocationReadPermission","catalogLocationDeletePermission","catalogPermissionRules","createConditionTransformer","createPermissionIntegrationRouter","RESOURCE_TYPE_CATALOG_ENTITY","keyBy","SchemaValidEntityPolicy","DefaultNamespaceEntityPolicy","NoForeignRootFieldsEntityPolicy","FieldFormatEntityPolicy","makeValidator","EntityPolicies","createConditionExports"],"mappings":"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"}