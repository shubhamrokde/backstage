{"version":3,"file":"index.js","sources":["../dist-src/value-to-tree-object.js","../dist-src/create-tree.js","../dist-src/create-commit.js","../dist-src/compose-create-pull-request.js","../dist-src/version.js","../dist-src/index.js"],"sourcesContent":["export async function valueToTreeObject(octokit, owner, repo, path, value) {\n    let mode = \"100644\";\n    if (value !== null && typeof value !== \"string\") {\n        mode = value.mode || mode;\n    }\n    // Text files can be changed through the .content key\n    if (typeof value === \"string\") {\n        return {\n            path,\n            mode: mode,\n            content: value,\n        };\n    }\n    // Binary files need to be created first using the git blob API,\n    // then changed by referencing in the .sha key\n    const { data } = await octokit.request(\"POST /repos/{owner}/{repo}/git/blobs\", {\n        owner,\n        repo,\n        ...value,\n    });\n    const blobSha = data.sha;\n    return {\n        path,\n        mode: mode,\n        sha: blobSha,\n    };\n}\n","import { valueToTreeObject } from \"./value-to-tree-object\";\nexport async function createTree(state, changes) {\n    const { octokit, owner, repo, fork, latestCommitSha, latestCommitTreeSha, } = state;\n    const tree = (await Promise.all(Object.keys(changes.files).map(async (path) => {\n        const value = changes.files[path];\n        if (value === null) {\n            // Deleting a non-existent file from a tree leads to an \"GitRPC::BadObjectState\" error,\n            // so we only attempt to delete the file if it exists.\n            try {\n                // https://developer.github.com/v3/repos/contents/#get-contents\n                await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n                    owner: fork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                return {\n                    path,\n                    mode: \"100644\",\n                    sha: null,\n                };\n            }\n            catch (error) {\n                return;\n            }\n        }\n        // When passed a function, retrieve the content of the file, pass it\n        // to the function, then return the result\n        if (typeof value === \"function\") {\n            let result;\n            try {\n                const { data: file } = await octokit.request(\"GET /repos/{owner}/{repo}/contents/:path\", {\n                    owner: fork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                result = await value(Object.assign(file, { exists: true }));\n            }\n            catch (error) {\n                // istanbul ignore if\n                if (error.status !== 404)\n                    throw error;\n                // @ts-ignore\n                result = await value({ exists: false });\n            }\n            if (result === null || typeof result === \"undefined\")\n                return;\n            return valueToTreeObject(octokit, fork, repo, path, result);\n        }\n        return valueToTreeObject(octokit, fork, repo, path, value);\n    }))).filter(Boolean);\n    if (tree.length === 0) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/trees/#create-a-tree\n    const { data: { sha: newTreeSha }, } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n        owner: fork,\n        repo,\n        base_tree: latestCommitTreeSha,\n        tree,\n    });\n    return newTreeSha;\n}\n","export async function createCommit(state, treeCreated, changes) {\n    const { octokit, repo, fork, latestCommitSha } = state;\n    const message = treeCreated\n        ? changes.commit\n        : typeof changes.emptyCommit === \"string\"\n            ? changes.emptyCommit\n            : changes.commit;\n    // https://developer.github.com/v3/git/commits/#create-a-commit\n    const { data: latestCommit } = await octokit.request(\"POST /repos/{owner}/{repo}/git/commits\", {\n        owner: fork,\n        repo,\n        message,\n        tree: state.latestCommitTreeSha,\n        parents: [latestCommitSha],\n    });\n    return latestCommit.sha;\n}\n","import { createTree } from \"./create-tree\";\nimport { createCommit } from \"./create-commit\";\nexport async function composeCreatePullRequest(octokit, { owner, repo, title, body, base, head, createWhenEmpty, changes: changesOption, draft = false, forceFork = false, }) {\n    const changes = Array.isArray(changesOption)\n        ? changesOption\n        : [changesOption];\n    if (changes.length === 0)\n        throw new Error('[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array');\n    const state = { octokit, owner, repo };\n    // https://developer.github.com/v3/repos/#get-a-repository\n    const { data: repository, headers } = await octokit.request(\"GET /repos/{owner}/{repo}\", {\n        owner,\n        repo,\n    });\n    const isUser = !!headers[\"x-oauth-scopes\"];\n    if (!repository.permissions) {\n        throw new Error(\"[octokit-plugin-create-pull-request] Missing authentication\");\n    }\n    if (!base) {\n        base = repository.default_branch;\n    }\n    state.fork = owner;\n    if (forceFork || (isUser && !repository.permissions.push)) {\n        // https://developer.github.com/v3/users/#get-the-authenticated-user\n        const user = await octokit.request(\"GET /user\");\n        // https://developer.github.com/v3/repos/forks/#list-forks\n        const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n            owner,\n            repo,\n        });\n        const hasFork = forks.data.find(\n        /* istanbul ignore next - fork owner can be null, but we don't test that */\n        (fork) => fork.owner && fork.owner.login === user.data.login);\n        if (!hasFork) {\n            // https://developer.github.com/v3/repos/forks/#create-a-fork\n            await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n                owner,\n                repo,\n            });\n        }\n        state.fork = user.data.login;\n    }\n    // https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    const { data: [latestCommit], } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n        owner,\n        repo,\n        sha: base,\n        per_page: 1,\n    });\n    state.latestCommitSha = latestCommit.sha;\n    state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n    const baseCommitTreeSha = latestCommit.commit.tree.sha;\n    for (const change of changes) {\n        let treeCreated = false;\n        if (change.files && Object.keys(change.files).length) {\n            const latestCommitTreeSha = await createTree(state, change);\n            if (latestCommitTreeSha) {\n                state.latestCommitTreeSha = latestCommitTreeSha;\n                treeCreated = true;\n            }\n        }\n        if (treeCreated || change.emptyCommit !== false) {\n            state.latestCommitSha = await createCommit(state, treeCreated, change);\n        }\n    }\n    const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n    if (hasNoChanges && createWhenEmpty === false) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/refs/#create-a-reference\n    await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n        owner: state.fork,\n        repo,\n        sha: state.latestCommitSha,\n        ref: `refs/heads/${head}`,\n    });\n    // https://developer.github.com/v3/pulls/#create-a-pull-request\n    return await octokit.request(\"POST /repos/{owner}/{repo}/pulls\", {\n        owner,\n        repo,\n        head: `${state.fork}:${head}`,\n        base,\n        title,\n        body,\n        draft,\n    });\n}\n","export const VERSION = \"3.11.0\";\n","import { composeCreatePullRequest } from \"./compose-create-pull-request\";\nimport { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n */\nexport function createPullRequest(octokit) {\n    return {\n        createPullRequest: composeCreatePullRequest.bind(null, octokit),\n    };\n}\nexport { composeCreatePullRequest } from \"./compose-create-pull-request\";\ncreatePullRequest.VERSION = VERSION;\n"],"names":["valueToTreeObject","octokit","owner","repo","path","value","mode","content","data","request","blobSha","sha","createTree","state","changes","fork","latestCommitSha","latestCommitTreeSha","tree","Promise","all","Object","keys","files","map","ref","error","result","file","assign","exists","status","filter","Boolean","length","newTreeSha","base_tree","createCommit","treeCreated","message","commit","emptyCommit","latestCommit","parents","composeCreatePullRequest","title","body","base","head","createWhenEmpty","changesOption","draft","forceFork","Array","isArray","Error","repository","headers","isUser","permissions","default_branch","push","user","forks","hasFork","find","login","per_page","baseCommitTreeSha","change","hasNoChanges","VERSION","createPullRequest","bind"],"mappings":"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"}